[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eInternHunter\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003ca href\u003d\"https://github.com/AY2021S1-CS2103T-T15-4/tp/actions\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cimg src\u003d\"https://github.com/AY2021S1-CS2103T-T15-4/tp/workflows/Java%20CI/badge.svg\" /\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/a\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003ca href\u003d\"https://codecov.io/gh/AY2021S1-CS2103T-T15-4/tp\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cimg src\u003d\"https://codecov.io/gh/AY2021S1-CS2103T-T15-4/tp/branch/master/graph/badge.svg\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/a\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"docs/images/Ui.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cimg src\u003d\"docs/images/App.png\" width\u003d\"49.7%\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cimg src\u003d\"docs/images/Profile.png\" width\u003d\"49.7%\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Welcome to **InternHunter**, a CLI-centric desktop application which aids university students in applying for tech"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internships. It lets users manage their own customizable collection of companies, internships, internship applications"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "and their own user profile, so that they can keep track of internships that they are interested in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [User Guide](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Developer Guide](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [About Us](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/AboutUs.md)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- This project was extended from AddressBook-Level3 project created by [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Libraries Used: [JavaFX](https://github.com/openjdk/jfx), [Jackson](https://github.com/FasterXML/jackson),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Images Used"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Credits goes to [Freepik](https://www.flaticon.com/authors/freepik), [itim201](https://www.flaticon.com/authors/itim2101), [DinosoftLabs](https://www.flaticon.com/authors/dinosoftlabs)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Licence : [MIT](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/LICENSE)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 30,
      "-": 1,
      "seanjyjy": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    archiveName \u003d \u0027InternHunter.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "-": 73,
      "seanjyjy": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "AddressBook - Level 3 was developed by the [SE-EDU](https://se-education.org/docs/team.html) team. Our team was tasked"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "to build on top of this project to morph it to something new! We chose to build a internship hunting application,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "InternHunter, to help university students like us!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Keane Chan Jun Yu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cimg src\u003d\"images/about-us-images/keanecjy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[[github](https://github.com/keanecjy)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[[portfolio](team/keanecjy.md)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* Responsibilities: Logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Sean Lum"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cimg src\u003d\"images/about-us-images/seanjyjy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[[github](http://github.com/seanjyjy)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[[portfolio](team/seanjyjy.md)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "### Gan Wan Cheng Isaac"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cimg src\u003d\"images/about-us-images/orzymandias.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "[[github](http://github.com/orzymandias)] [[portfolio](team/orzymandias.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Role: Team lead"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Responsibilities: Commons"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Shawn Ng Yong Kwang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cimg src\u003d\"images/about-us-images/shawn-nyk.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[[github](http://github.com/shawn-nyk)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[[portfolio](team/shawn-nyk.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Responsibilities: Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Fidella Widjojo"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cimg src\u003d\"images/about-us-images/zoroarkdarkrai.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "[[github](http://github.com/zoroarkdarkrai)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "[[portfolio](team/zoroarkdarkrai.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* Responsibilities: Storage"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14,
      "orzymandias": 4,
      "ZoroarkDarkrai": 4,
      "-": 31,
      "seanjyjy": 4,
      "shawn-nyk": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Storage Component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "![StorageClassDiagram](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "API : [Storage.java](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "The Storage component,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* can save UserPref objects in json format and read it back."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* can save the InternHunter data in json format and read it back."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Implementation of `Command` classes"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "There are 4 different subclasses of `Item` in InternHunter, namely `Company`, `Internship`, `Application`, and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`Profile`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "There are 2 types of commands:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Commands that are dependent on the type of `Item`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - e.g. `AddCommand`, `DeleteCommand`, `EditCommand`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - These commands are implemented as _abstract_ classes that inherit from the `Command` class. Type specific"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    commands like `AddCompanyCommand` and `AddApplicationCommand` inherit from the _abstract_ `AddCommand`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    class"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Commands that are not dependent on the type of `Item`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - e.g. `SwitchCommand`, `HelpCommand`, `ExitCommand`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - These commands are implemented as _concrete_ classes and inherit directly from the `Command` class"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "From this point on, we will be using `XCommand` to represent commands that are dependent on type and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`YCommand` to represent commands that are independent of type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "The following is an example of the class hierachy:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "![CommandClassDiagram](images/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "##### Aspect: Whether `XCommand` should be abstract and split into 4 other `XItemCommand` or handle the 4 `Item` types on its own"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "**Alternative 1 (current choice)**: `XCommand` is split into 4 other `XItemCommand`. Parser parses the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "user input and creates the specific `XItemCommand` for execution. The following activity diagram shows how the "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "execution of the `AddApplicationCommand` will work."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "![AddApplicationCommandActivityDiagram](images/AddApplicationCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Pros: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Each command has its own specific task to execute. This means that classes are more flexible and can be changed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    very easily. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Higher cohesion as the class is only dependent on the one `Item` type"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Short and concise `execute` method, providing better readability and maintainability"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Cons:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - More classes have to be created"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- **Alternative 2**: `XCommand` is a _concrete_ class and handles the execution of all 4 `Item` types."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Parser parses the user input and creates the general `XCommand` for execution. The following"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "activity diagram shows how the `AddCommand` will work."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "![AddCommandActivityDiagram](images/AddCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Pros:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Only one command is needed, reducing the number of classes created"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Cons:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - `execute` method becomes extremely long as it needs to contain switch statements to handle the execution of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    command X for the 4 different types of `Item`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - `XCommand` class is vulnerable to drastic changes when the parsing method of any one `Item` class changes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - `XCommand` class holds more dependencies as it is now dependent on the 4 `Item` classes  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Poor readability and maintainability"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - A slight overhead increase as `Item` type needs to be passed in as a parameter to the `XCommand`,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    additional check for nullity in the parameter passed in is required"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "**Conclusion**: Our group settled on the first design, since it better adheres to OOP principles such as"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Single Responsiblity Principle. Our design meant that each specific `Item` command is only dependent on the `Item`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "itself and not subjected to the changes in implementation of the other `Item` classes. This means that it will only"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "have one reason to change. Moreover, this leads to lower coupling, which makes maintenance, integration and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "testing easier. This ended up being a good choice as we had some changes in the parsing requirements of one"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "of the `Item` classes, `Internship`. If we had gone with the second design, the concrete `XCommand` might"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "have broken down as it might not be suited to the different parsing requirements in the of the `Internship` item."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Delete company feature"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### What it is"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Users are able to execute a command to delete a company from their list of companies in InterHunter. Upon the "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "successful deletion of a company, all internships within that company, if any, will also be deleted (as they are a "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "part of the company, i.e. companies and the internships that they offer have a whole-part / composition relationship). "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "As a result, all applications made to internships from the company to be deleted, if any, will also be deleted as per "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "the delete internship feature. This feature is intended to be used when the user is viewing the Company tab. However, "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "the user is free to execute the delete company command while they are on another tab, and InternHunter will simply "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "switch over to the Company tab if and when the command has finished executing successfully."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Command format**: `delete com INDEX`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Where `INDEX` is the index of the company to be deleted in the list of companies"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Upon a user’s entry of a valid delete company command, a `DeleteCompanyCommand` object is created. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "`DeleteCompanyCommand` is a class that extends the `DeleteCommandAbstract` abstract class that in turn extends the "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "`Command` abstract class."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "![DeleteCompanyCommandClassDiagram](images/DeleteCompanyCommandClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "`DeleteCompanyCommand` implements the `execute()` method from the `Command` abstract class whereby upon execution, the "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "method will delete the respective company in the model’s list of companies if a valid index is given."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "This is how the `DeleteCompanyCommand#execute()` method works upon execution:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. The tab that the user is currently viewing is obtained via the `Model#getTabName()` method."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. The company to be deleted is retrieved from the model’s `companyList` via the `CommandUtil#getCompany()` method."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "3. All the internships within the company, if any, are deleted via a self-invocation to `DeleteCompanyCommand`’s own "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " `deleteAllInternshipsInCompany()` method."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "4. The company is then deleted from the model via the `model#deleteCompany()` method."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "5. The deletion is successful and a `CommandResult` is returned with an appropriate success message to indicate "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " operation success via the `CommandUtil#getCommandResult()` method. The `CommandResult` also indicates whether the tab "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " needs to be switched to the Company tab or not, based on if the user was already viewing the Company tab or not as "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " retrieved in Step 1."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "The following sequence diagrams show how the delete company feature works successfully, using the example command "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "`delete com 3`:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "![DeleteCompanyCommandSequenceDiagram](images/DeleteCompanyCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "![ExecuteDeleteCompany3CommandSequenceDiagram](images/ExecuteDeleteCompany3CommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "![GetDeleteCommandResultSequenceDiagram](images/GetDeleteCommandResultSequenceDiagram.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "HandleDeleteDisplaySwitchIndexSequenceDiagram can be found [here](#handle-delete-display-switch-index-sequence-diagram)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Obtaining the tab that the user is currently viewing has to be done before deleting all the company’s internships "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "via the `DeleteCompanyCommand#deleteAllInternshipsInCompany()` method. This is because the "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "`DeleteCompanyCommand#deleteAllInternshipsInCompany()` method executes `DeleteInternshipCommands`, and "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "`DeleteInternshipCommands` will cause the model to switch tabs to the Company tab internally (i.e. updates are made to "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "the relevant objects’ fields but this change is not reflected via the GUI). The implication of this behaviour is that "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "if the model’s tab is obtained after the `DeleteCompanyCommand#deleteAllInternshipsInCompany()` method is executed, "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "then it will always reflect that the model is on the Company tab and hence no switching of tabs is necessary GUI-wise. "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "In other words, if the user successfully executes the delete company command whilst not on the Company tab, the tab "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "will not be switched to the Company tab in the GUI, which is undesirable. Our implementation resolves this issue."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* The `DeleteCompanyCommand#deleteAllInternshipsInCompany()` method works by creating and executing a "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "`DeleteInternshipCommand` for every internship in the company’s list of internships. This implementation was chosen "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "because `DeleteInternshipCommand` handles deleting any application made to the internship that is being deleted. As "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "such, the delete company command will exhibit the behaviour whereby any applications made to internships offered by a "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "company that is being deleted will also be deleted, which is the behaviour we believe is appropriate and hence wanted "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "to achieve."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Alternatives considered"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* **Alternative 1 (current choice)**: Delete all applications made to internships from the company to be deleted by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " executing delete internship commands."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    * Avoids rewriting code / code duplication by calling methods that have already been implemented to achieve the "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    desired functionality."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    * Ensures consistent behaviour - when an internship is deleted because a company is deleted, what happens to any "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    application for that internship will be the same as what would happen to it if a delete internship command was "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    executed directly by the user for the same internship."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    * Introduces a dependency on `DeleteInternshipCommand`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Alternative 2**: Delete all applications made to internships from the company to be deleted without executing"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "delete internship commands, i.e. by implementing delete internship command’s internal workings."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    * Not dependent on `DeleteInternshipCommand`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    * Introduces dependencies on `InternshipItem` and `ApplicationItem`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    * Violates the DRY (Don\u0027t Repeat Yourself) principle:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "      * Introduces code duplication."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "      * Decentralizes the behaviour of what happens to an application made for an internship that is being deleted, "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "      since there are now 2 separate implementations for this (one in `DeleteCompanyCommand` and the other in "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "      `DeleteInternshipCommand`). The implications of this are:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        * Cannot guarantee consistent behaviour - when an internship is deleted because a company is deleted, what "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        happens to any application for that internship may not be the same as what would happen to it if a delete "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internship command was executed directly by the user for the same internship."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        * Updating this behaviour will require updating code in both places rather than one centralised place."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "### User profile feature"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "The user profile feature behaves like a resume for the user to keep track of noteworthy events and milestones in one"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "\u0027s professional life. There are three categories of profile items namely: `ACHIEVEMENT`, `SKILL` and `EXPERIENCE`. "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Editing User profile"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "The `edit me` command for the user profile allows the user to update the fields of the each profile item by"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "specifying the targeted index and at least one field. The following activity diagram illustrates the possible"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "behaviour of the `edit me` command depending on the user input:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "to Add: activity diagram"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* The functionality edit profile is implemented as part of the `EditProfileCommand` which extends the the abstract class"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " `EditCommand` which further extends the `Command` class."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* The `EditProfileCommand` is produced by its own `EditProfileCommandParser#parse` method."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "This is an example of what the edit feature does at every step to achieve its intended behaviour:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "![EditProfileCommandSequenceDiagramSimplified](images/EditProfileCommandSequenceDiagramSimplified.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1. Assuming user enters an input complying with the specification of the user guide to edit the user profile, the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " input is first parsed by the `MainParser` looks out for the command word, recognizes the `edit` command and"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  funnels the input to `EditCommandParser`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2. The `EditCommandParser` then identifies the item type, which is profile item and returns the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " `EditProfileCommandParser`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "3. The `EditProfileCommandParser` creates a editedProfileItem based on the details of the input provided and returns a"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " `EditProfileCommand` containing with the editedProfileItem. The following sequence diagram depicts how the `EditProfileCommand` works:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "![ExecuteEditMeCommand](images/ExecuteEditMeCommand.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "4. The `EditProfileCommand` is executed by `LogicManager` which retrieves the targeted `profileItemToEdit` from the `lastShownList` and updates"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " the model with the `editedProfileItem` associated with the `EditProfileCommand`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "5. CommandResult is return to indicate a successful operation."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Aspect: How EditProfileCommand Object interacts with Model"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Alternatives considered"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Alternative 1 (current choice)**: `EditProfileCommand` interact with the model solely and not directly with model\u0027s "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " internal components: `ProfileItemList` and `FilteredProfileItemList`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    * This obeys the Law of Demeter which stresses for components to avoid interacting directly with internal"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     components of other objects. This reduces coupling which increases testability as `EditProfileCommand` only"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     requires one model"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "      stub as opposed to more objects stubs for testing."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    * This also increases maintainability as `EditProfileCommand` only has to be concerned with the methods that"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     `Model` provides and not the other implementation details should they be subjected to change."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    * This increases code volume within `Model` as the model need to hold every method to interact with all the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "   collections it contains."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Alternative 2 (used in v1.2)**: Due to the presence of other collections such as `companyList` in the model, the"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " `filteredProfileLists` and `profileList` are both retrieved from the model within the `EditProfileCommand` and then the"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  `setItemList()` operation is called directly on the `profileList` to update its value."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  model.getProfileList().setItem(profileItemToEdit, EditedProfileItem)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "![ExecuteEditMeCommandAlt.png](images/ExecuteEditMeCommandAlt.png)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Pros: "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    * This reduces code volume by keeping `Model` lean and for `EditProfileObject`to interact with the objects it needs."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    * This may marginally improve performance as it bypasses the `Model` to interact with the `profileList` and"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     `filteredProfileList` directly."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    * This exposes the internal components of the `Model` which increases coupling as `EditProfileCommand` is now"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     dependent on `filteredProfileList` and `profileList` of the `ItemListManager` reduces testability and"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "      maintainability."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Switch screen feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### What it is"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Users are able to execute a command to switch their tabs in InterHunter. There are 3 tabs, Company, Application, Profile. Take for example swithcing to the company tab, upon the successful switch of the tabs, the screen will now display a list of companies and also display the information of the last known index of that tab, i.e if the index that was previously saved in that tab was the 3rd index, when switching back to this tab, it will show the information of the 3rd index."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**Command format**: `switch TYPE`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`TYPE` is the type of tab."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "There are three `TYPE`s:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* `com`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* `app`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* `me`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Upon a user’s entry of a valid switch command, a `SwitchCommand` object is created. `SwitchCommand` is a class that extends the Command abstract class as well as having direct association with TabName, an enumeration, as well as having a dependency to the Model interface as it relies on some of its method."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"left\"\u003e\u003cimg src\u003d\"images/SwitchCommandClassDiagram.png\" width\u003d\"70%\" height\u003d\"70%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`SwitchCommand` implements the `execute()` method from the `Command` abstract class whereby upon execution, the "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "method will switch the tab and the screen if a valid command is provided."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "This is how the `SwitchCommand#execute()` method works upon execution:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. The current tab that the user is viewing is obtained via the `Model#getTabName()` method."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "2. The input tab will be check against the current tab. \u003cbr/\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " 2a. If both the tabs are the same, a same tab message will be passed to `CommandUtil#getCommandResult()`method. \u003cbr/\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " 2b. If both the tabs are different, a success message will be passed to `CommandUtil#getCommandResult()`method. \u003cbr/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003eThe overall process of how \u003ccode\u003eSwitchCommand\u003c/code\u003e was generated.\u003c/p\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/SwitchCommandSequenceDiagram.png\"\u003c/p\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003eThe process of how \u003ccode\u003eSwitchCommand\u003c/code\u003e interacts with the model.\u003c/p\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ExecuteSwitchMeCommandSequenceDiagram.png\" width\u003d\"75%\" height\u003d\"75%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "This is how the `CommandUtil#getCommandResult()` method works upon execution:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. The current tab that the user is viewing is obtained via the `Model#getTabName()` method."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "2. The input tab will be check against the current tab. \u003cbr/\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " 2a. If both the tabs are the same, a `CommandResult` with a same tab message is return."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " 2b. If both the tabs are different, we will change the tab to the input\u0027s tab name via `Model#setTabName()`. A `CommandResult` with a success message is return."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003eThe process of how \u003ccode\u003egetCommandResult\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/GetCommandResultSequenceDiagram.png\" width\u003d\"95%\" height\u003d\"95%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a switch command:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "![SwitchCommandActivityDiagram](images/SwitchCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The above activity diagram shows the logic and the path execution when the switch command is executed. The code will check if there is any missing input or if the input is not one of the three mentioned in the `Command format` above. If the aforementioned 2 conditions are not met, an error message is displayed. If the input is one of the three mentioned above in the `Command format`, there will be further checks if the user are already in the same tab."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Aspect: Should the tabs be allowed to change only by the `SwitchCommand`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* **Alternative 1 (current choice):** Allow the switch of tabs to not only be accessible via the switch command, but rather extract it out for all commands excluding `exit` and `help`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * Allows user to type once instead of twice when executing a single command and wanting to view it. (This optimzation is to allow for a faster way to type and view the changes). \u003cbr/\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * By abstract the method out from switch command, it obeys the DRY (Don\u0027t Repeat Yourself) principle as all the commands will be calling a single method."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * This allows and obeys the Open-Close princple as new implementation of commands can just be calling this single method at the end."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * Allows user to have a second alternative to switch tabs for just viewing purpose."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * User might switch tab accidentally because of inputting the wrong `TYPE`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * Increases some form of coupling between all commands as they are now linked to this single method."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* **Alternative 2:** Only allow switch command to be the only way to switch tabs."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * This introduces a \"type-safe\" checks like in Java where only if the user is in the correct tab, then he or she will be able to add items to that item type. \u003cbr/\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        * This introduces the need to type twice in order to view the execution of the command."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Storage Feature"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### What it is"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "After a command is successfully executed, InternHunter automatically saves users\u0027 data to JSON files. Moreover, "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "everytime the `GuiSettings` is modified, InternHunter updates the user preferences JSON file. Users can transfer or "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "backup the JSON files manually. The storage component is responsible for both reading and saving the data."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter uses Jackson, a high-performance JSON processor for Java. It can  serialize Java objects into JSON and "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "deserialize JSON into Java objects. InternHunter\u0027s model has 4 different types of data: `ApplicationItem`, "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "`CompanyItem`, `InternshipItem`, and `ProfileItem`. They first need to be converted to Jackson-friendly versions of "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "themselves, where each field is a string or another Jackson-friendly object. User preference is saved as a `UserPrefs` "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "object."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " [Storage structure diagram](#storage-class-diagram)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * `Storage` handles the storage for all `Item` lists and user preferences."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * `UserPrefsStorage` handles the storage for user preferences."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * `ItemListStorage` handles the storage for `Item` lists."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * `JsonSerializableItemList` represents a Jackson-friendly version of an `Item` list."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * `JsonAdaptedItem` represents a Jackson-friendly version of an `Item`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " ![JsonAdaptedItemClassDiagram](images/JsonAdaptedItemClassDiagram.png)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " `JsonAdaptedItem` is an abstract class representing Jackson-friendly version of the `Item` class in the model component."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  It has one method `toModelType()` which convert itself to an `Item` object. There are 4 classes extending "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  `JsonAdaptedItem`:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * `JsonAdaptedApplicationItem` the Jackson-friendly version of `ApplicationItem`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * `JsonAdaptedCompanyItem` the Jackson-friendly version of `CompanyItem`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * `JsonAdaptedInternshipItem` the Jackson-friendly version of `InternshipItem`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * `JsonAdaptedProfileItem` the Jackson-friendly version of `ProfileItem`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter automatically saves user data after every command. The following sequence diagram demonstrates how"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter does it. Let `commandString` be any valid command string."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "![SavingDataSequenceDiagram](images/SavingDataSequenceDiagram.png)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "##### Aspect: How to handle 3 types of \u0027Item\u0027 list"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter maintains 3 types of `Item` list: `ApplicationItem`, `CompanyItem`, and `ProfileItem` lists."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Both `ItemListStorage` and `JsonSerializableItemList` use  the same logic regardless of the `Item` type."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Alternative 1: current choice**: Creates a base abstract class `JsonAdaptedItem` and makes `ItemListStorage` "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "and `JsonSerializableItemList` use generics."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Adheres to OOP principle, polymorphism."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Less code duplication."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Makes adding a new `Item` type easy. To be able to save and read a new `Item` type, only a new "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        class representing its Jackson-friendly version needs to be created."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Makes further extension to the `ItemListStorage` and `JsonSerializableItemList` faster."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * More complicated as Jackson does not provide a direct way to convert a generic object to its JSON format."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Alternative 2**: Each `Item` type has their own `ItemListStorage` and `JsonSerializableItemList`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Easier to implement."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Much longer code with much duplication."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Adding a new `Item` type requires at least 3 new classes to be made."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Extending the `ItemListStorage` and `JsonSerializableItemList` class would require changes to all the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        different versions corresponding to the different `Item` types."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Clear Feature"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### What it is"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "In the beginning, user can see how the app works with sample data. After that, user can decide to "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "clear all the entries in InternHunter with just a `clear` command."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "The following diagram illustrates whether InternHunter use sample data."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "![SampleDataActivityDiagram](images/SampleDataActivityDiagram.png)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "When user enters the `clear` command, InternHunter will reset all three lists. Here is a sequence diagram showcasing how"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter does it."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "![ClearCommandSequenceDiagram](images/ClearCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "##### Aspect: How to clear the lists"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter only lets users create applications for internships already added to companies."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Alternative 1: current choice**: Clear all three lists at once."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Guarantees data consistency."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Less freedom for the users."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Alternative 2**: Each list can be cleared individually."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * Users can choose which lists to be cleared."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        * High risk of data inconsistency due to the linkage between company and application lists."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "       "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## **Appendix**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Appendix A: Product Scope"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* university students applying for tech internships"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Value proposition**: Improves your planning, confidence and readiness for tech-related internship applications by"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " improving your interview skills and search strategy."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Appendix B: User Stories"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| Priority | As a …​    | I want to …​                                                   | So that I can…​                                                                   |"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| -------- | ---------- | -------------------------------------------------------------- | --------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | new user   | see usage instructions                                         | refer to instructions when I forget how to use the app                            |"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | get error feedback when a command fails                        | know what went wrong                                                              |"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | maintain a list of company profiles                            | keep track of companies that I\u0027m interested in                                    |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add a company profile                                          | keep track of companies that I\u0027m interested in                                    |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete a company profile                                       | remove company profiles that I no longer need / am no longer interested in        |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit a company profile                                         | keep my company profiles updated and accurate                                     |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view a company profile                                         | see its details                                                                   |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add an internship to a company profile                         | keep track of the internships that that company is offering                       |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete an internship from a company profile                    | remove erroneous / outdated entries                                               |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit an internship from a company profile                      | keep the list of internships that a company offers updated and accurate           |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view a company’s internships when I view their profile         | see what internships they are offering                                            |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | maintain a list of my internship applications                  | keep track of them                                                                |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add an internship application                                  | keep track of the internships that I have applied for                             |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete an internship application                               | remove internship applications that I no longer need / am no longer interested in |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit an internship application                                 | keep my internship applications updated and accurate                              |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view an internship application                                 | see its details                                                                   |"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | record and see an internship application\u0027s status              | keep track of them                                                                |"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | save the dates of my upcoming interviews                       | keep track of them                                                                |"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | maintain a user profile                                        | have an overview of my experience, skills and achievements                        |"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add information to my user profile                             | keep my user profile updated and accurate                                         |"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete information from my user profile                        | keep my user profile updated and accurate                                         |"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit information in my user profile                            | keep my user profile updated and accurate                                         |"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view information in my user profile                            | see its details                                                                   |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* *`    | user       | navigate the application easily through a clear user interface |                                                                                   |"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* *`    | user       | get fast feedback from the app                                 |                                                                                   |"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "| `* *`    | user       | clears all entries from InterhHunter                           | start from a clean slate"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Appendix C: Use Cases"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "(For all use cases below, the **System** is `InternHunter` and the **Actor** is the `user`)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC01 - Add a company"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Addition of company is successful"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to add a company and provides details."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter adds the company to the list of companies.\u003cbr/\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \t\t"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC02 - Delete a company"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Deletion of company is successful"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to delete a company."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter removes the company from the list of companies.\u003cbr/\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC03 - Edit a company"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Editing of company is successful"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to edit the details of a company and provides details."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter updates the details of the company. \u003cbr/\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC04 - View a company"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Viewing of company is successful"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to view a company."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter displays the company.\u003cbr/\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC05 - Add an internship"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Guarantees: Addition of internship is successful"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to add an internship to a company and provides the index and relevant details."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "2.  InternHunter adds the internship to the list of internships of the company. \u003cbr/\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC06 - Delete an internship"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of internships in a company \u003cbr/\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Guarantees: Deletion of internship is successful"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "1.  User requests to delete an internship of a company and provides the index."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter removes the internship from the list of internships in a company. \u003cbr /\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC07 - Edit an internship"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of internships in a company \u003cbr/\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Guarantees: Editing of internship is successful"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "1.  User requests to edit the details of an internship and inputs the index and details."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "2.  InternHunter edits the details of the internship, and updates the list. \u003cbr /\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC08 - Add an application"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of internships in a company \u003cbr/\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Adding of application is successful"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to apply for an internship and provides the index and relevant details."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter adds the application to the list of applications and prompts the user to switch to the Applications"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "tab to view the newly added application. \u003cbr/\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC09 - Delete an application"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of applications \u003cbr /\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Deletion of application is successful"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to delete an application and provides the index."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter removes the application from the list of applications. \u003cbr /\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC10 - Edit an application"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of applications \u003cbr /\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Editing of application is successful"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to edit the details of an application and inputs the index and details."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter edits the details of this application and the list is updated accordingly. \u003cbr /\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC11 - View an application"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of applications \u003cbr /\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Viewing of application is successful"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to view the details of an application and provides the index."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter shows the details of this application. \u003cbr /\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC12 - Add user profile item"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Addition of user profile item is successful"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to add a user profile item to the user profile and provides details."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter adds the user profile item to the user profile. \u003cbr /\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC13 - Delete a user profile item "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of user profile items \u003cbr/\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Deletion of user profile item is successful"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to delete a user profile item from the user profile."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter removes the user profile item from the user profile. \u003cbr/\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC14 - Edit a user profile item"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of user profile items \u003cbr/\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Editing of user profile item is successful"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to edit the details of a user profile item and provides details."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter edits the user profile item in the user profile. \u003cbr/\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC15 - View a user profile item"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Precondition: User already has an existing list of user profile items \u003cbr/\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Viewing of user profile item is successful"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to view the details of a user profile item."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter shows the details of this user profile item. \u003cbr/\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    "
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Use case: UC16 - Switch tabs"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1.  User requests to switch the tab of the screen."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2.  InternHunter switches to the requested tab. \u003cbr/\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Use case: UC17 - Clear all entries"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Guarantees: All entries in InternHunter will be cleared"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "1.  User requests to clear all entries."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "2.  InternHunter deletes all of its entries. \u003cbr/\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Use case: UC18 - Get help"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: User will get directions to the user guide"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to see the help window."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter displays help message directing user to user guide. \u003cbr/\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Use case: UC19 - Exit "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to exit InternHunter."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter prompts for confirmation."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "3.  User confirms intention to exit."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "4.  InternHunter exits. \u003cbr/\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 2a. User chooses to cancel the confirmation. \u003cbr/\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should be for a single user i.e. (not a multi-user product)."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* The data should be stored locally and should be in a human editable text file."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* The software should work without requiring an installer."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should work on both 32-bit and 64-bit environment."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should only use third-party frameworks or libraries which are free, open-source and have permissive license term and "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "do not require installation by user of the software."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* A user with above average typing speed for regular English text should be able to accomplish most of the tasks faster "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "using commands than using the mouse."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should be a result of evolving and morphing the given code base."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should be developed in a breadth-first incremental manner over the project duration."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Appendix E: Glossary"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **OS**: Operating System"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Json**: JavaScript Object Notation"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Appendix F: Sequence Diagrams"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003eSequence diagram for HandleDeleteDisplaySwitchIndex\u003c/p\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp id\u003d\"handle-delete-display-switch-index-sequence-diagram\" align\u003d\"center\"\u003e\u003cimg src\u003d\"images/HandleDeleteDisplaySwitchIndexSequenceDiagram.png\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 142,
      "ZoroarkDarkrai": 160,
      "orzymandias": 110,
      "-": 150,
      "shawn-nyk": 217,
      "seanjyjy": 77
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "-": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "# Welcome to the InternHunter User Guide"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Table Of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[1. Introduction](#introduction) \u003cbr /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " [1.1. Overview](#overview) \u003cbr /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[2. Quick start](#quick-start) \u003cbr /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[3. About](#about) \u003cbr /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[4. Features](#features) \u003cbr /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [4.1. Company](#company) \u003cbr /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.1.1. Adding a company: `add com`](#adding-a-company-add-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.1.2. Deleting a company: `delete com`](#deleting-a-company-delete-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.1.3. Editing a company: `edit com`](#editing-a-company-edit-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.1.4. Viewing a company: `view com`](#viewing-a-company-view-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  [4.1.5. Finding companies: `find com`](#finding-companies-find-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.1.6. Listing all companies: `list com`](#listing-all-companies-list-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [4.2. Internship](#internship) \u003cbr /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.2.1. Adding an internship: `add int`](#adding-an-internship-add-int) \u003cbr /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.2.2. Deleting an internship: `delete int`](#deleting-an-internship-delete-int) \u003cbr /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.2.3. Editing an internship: `edit int`](#editing-an-internship-edit-int) \u003cbr /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [4.3. Application](#application) \u003cbr /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  [4.3.1. Applying for an internship: `add app`](#applying-for-an-internship-add-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.3.2. Deleting an application: `delete app`](#deleting-an-application-delete-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  [4.3.3. Updating an application: `edit app`](#updating-an-application-edit-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.3.4. Viewing an application: `view app`](#viewing-an-application-view-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  [4.3.5. Finding applications: `find app`](#finding-applications-find-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  [4.3.6. Listing all applications: `list app`](#listing-all-applications-list-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [4.4. Profile](#profile) \u003cbr /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.4.1. Adding item to profile: `add me`](#adding-item-to-profile-add-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.4.2. Deleting item in profile: `delete me`](#deleting-item-in-profile-delete-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.4.3. Editing item in profile: `edit me`](#editing-item-in-profile-edit-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.4.4. Viewing item in profile: `view me`](#viewing-item-in-profile-view-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  [4.4.5. Finding items in profile: `find me`](#finding-items-in-profile-find-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  [4.4.6. Listing all profile items: `list me`](#listing-all-items-in-profile-list-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [4.5 General](#general) \u003cbr /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  [4.5.1. Generating matching internships: `match`](#generating-matching-internships-match) \u003cbr /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.5.2. Switching Tabs: `switch`](#switching-tabs-switch) \u003cbr /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.5.3. Viewing Help: `help`](#viewing-help-help) \u003cbr /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.5.4. Clearing all entries: `clear`](#clearing-all-entries-clear) \u003cbr /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [4.5.5. Exiting the program: `exit`](#exiting-the-program-exit) \u003cbr /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[5. FAQ](#faq) \u003cbr/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[6. Command Summary](#command-summary) \u003cbr /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**InternHunter is a CLI-centric desktop application which aids university students in applying for internships**."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "It lets you manage your own customisable collection of companies, internships, internship applications and your own "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "user profile, so that you can keep track of internships that you are interested in - all from one centralised place."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Never lose track of a good internship opportunity again."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "This User Guide will help you - the user - find out about what InternHunter is and how to use it. It\u0027ll get you up and "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "running with the app in your pursuit to land that desired internship. Let\u0027s dive in."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### **Overview**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "You\u0027re searching for an internship."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "You\u0027ve got 100 tabs open in Chrome."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "You\u0027re viewing multiple internship listings and companies\u0027 details, comparing salaries and job requirements across "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "webpages all while trying to recall your own skill set and finding what role best suits you."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "It\u0027s a mess."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "InternHunter is here to fix that. Here\u0027s how:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "InternHunter lets you record crucial information that you would want to keep track of during your internship hunting "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "process by managing a collection of four types of items:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Item | Alias | Attributes | What it represents"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "-----|-------|------------|-------------------"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Company | com | company name, phone number, email, address, industry types, internships | A company offering internships"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Internship | int | company name, job title, period, wage, requirements | An internship offered by a company"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Application | app | internship, status, status date | An internship application that you applied for"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Profile Item | me | category, title, descriptors | An item in your profile"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "And here\u0027s what you can do:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. When you find a company that you are interested in, add it to your list of companies with the: \u003cbr /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[`add com` command](#adding-a-company-add-com)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. Next, note down the internships offered by that company that interest you with the: \u003cbr /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[`add int` command](#adding-an-internship-add-int)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "3. And once you\u0027ve applied for an internship, record it down to keep track of it with the: \u003cbr /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[`add app` command](#applying-for-an-internship-add-app)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "You can also keep track of your achievements, experience and skills in your own [profile](#profile). Along with the "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[skills matching feature](#generating-matching-internships-match), it will aid you in creating a tailored resume for each "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "application and figure out which internship is the best fit for you."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Simple? Well that\u0027s the InternHunter flow."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Now, along the way you\u0027re probably going to want to edit, delete and look through your collection of items - "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "InternHunter supports all those features and more."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Ready to begin? Let\u0027s get hunting."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## **Quick start**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. Download the latest `InternHunter.jar` [here](https://github.com/AY2021S1-CS2103T-T15-4/tp/releases/tag/v1.2)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for InternHunter."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. Double-click the file to start the app or run `java -jar InternHunter.jar` from the terminal."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. Refer to [About](#about) to understand certain terminologies and usage of InternHunter."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. The [Features](#features) available in the current version of InternHunter are listed below."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## **About**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "This section will bring you through the [GUI](#understanding-the-gui), [technical terminologies](#understanding-the-technical-terminologies), as well as commonly used [symbols](#understanding-the-symbols)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Understanding the GUI"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp\u003e\u003cimg src\u003d\"images/GuiAnnotated.png\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Understanding the technical terminologies"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Word | What it means"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "-----|---------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Commands | Words that determines the action of InternHunter."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Command word | The first word of every command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Parameters | Information that is supplied by you."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Execute | Typing the information into the command box and pressing enter."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Understanding the symbols"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Symbol | What it means"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "-------|--------------"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ":information_source: | Important information to take note."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ":bulb: | Extra tip."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`add` | Words that have a grey highlighted background are commands that can be keyed into the command box."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "*italics* | Words in italics represent additional information."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Understanding the usage of the commands"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**:information_source: Notes about the commands:**\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  e.g. in `add com n/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/INDUSTRY]...`, `COMPANY_NAME`, `PHONE_NUMBER`, `EMAIL`, `ADDRESS`, `INDUSTRY`,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  are parameters which can be used as `add com n/Google p/65218000 e/GoogleHire@gmail.com a/70 Pasir Panjang Rd, #03-71 t/Cloud Computing t/Artificial Industry`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Items in square brackets `[]` are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  e.g `add int INDEX j/JOB_TITLE w/WAGE [p/PERIOD] [r/REQUIREMENT]...` can be used as \u003cbr/\u003e `add int 1 j/Software Engineer` or"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  `add int 3 j/Web Developer r/React w/3000 r/HTML5`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Items with `...`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  e.g. `[r/REQUIREMENT]...` can be used as `r/Rust`, `r/React native r/JavaScript` etc."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  e.g. if the command specifies `p/PERIOD w/WAGE`, `w/WAGE p/PERIOD` is also acceptable. Note that the command word and the item type should still come first."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* `INDEX` refers to the index of the item (Company, Application, or Profile Item) in its respective displayed list of"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " items unless stated otherwise. All `INDEX`es are positive integers *(1, 2, 3, ...)*.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## **Features**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### **Company**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "This represents a company, any company, but typically one that you are interested in applying for an internship to."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "You can record and maintain a company\u0027s name, phone number, email address, physical address, and its industry types."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "You can then later specify what internships the company is offering by using the [internship commands](#internship)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "*(Note that you must create a company first before you can create internships that the company offers)*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Adding a company: `add com`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Adds a company to your list of companies."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `add com n/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `add com n/Garena a/201 Victoria St e/GarenaHires@garena.com p/65093545` *(notice that the company\u0027s industry types"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " need not be specified)*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Executing `add com n/Google p/65218000 e/GoogleHires@gmail.com a/70 Pasir Panjang Rd, #03-71 t/Cloud Computing t"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/Artificial Intelligence` on an empty company list will add the company as follows: \u003cbr /\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "![AddCompanySS](images/AddCompanySS.PNG)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Deleting a company: `delete com`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Deletes a company from your list of companies. All internships and applications associated with this company will also be deleted."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `delete com INDEX`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `delete com 5`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Editing a company: `edit com`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Edits a company in your list of companies."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `edit com INDEX [n/COMPANY_NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Existing values will be updated to the input values."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- When editing industry types, the existing industry types get removed i.e. industry types do not accumulate."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- You can remove all of a company’s industry types by simply typing `t/` without specifying anything after it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `edit com 2 p/61234567`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- For the following example, executing `edit com 1 n/Google Singapore e/GoogleIsHiring@google.com t/Internet` will"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " edit company 1 as follows: \u003cbr /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " ![EditCompanySS](images/EditCompanySS.PNG) \u003cbr /\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " *(Notice that by editing industry types, the existing industry types get replaced i.e. industry types do not"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  accumulate)*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Viewing a company: `view com`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Selects a company in your list of companies to show in detail on the right panel."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `view com INDEX`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `view com 3`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Suppose you are currently viewing the first company and you want to view the second company. Executing `view com 2` "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "will update the right panel to display the second company: \u003cbr /\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "   ![ViewComSS](images/ViewComSS.PNG) \u003cbr /\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Finding companies: `find com`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Finds all companies in your list of companies whose names contain any of the given keywords."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `find com KEYWORD [ANOTHER_KEYWORD]...`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Only the company name will be searched for."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- The search is case-insensitive. e.g. `google` will match `Google`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Companies with names matching at least one keyword will be returned. e.g. `Google Facebook` will return companies"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " whose names contain the word `Google` *or* `Facebook`."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- The order of the keywords does not matter. e.g. `Google Facebook` and `Facebook Google` will return the same results."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Only full words will be matched. e.g. `Googl` will not match `Google`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `find com Amazon`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Suppose you have this list of companies. Executing `find com google` will update the list to show matching"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " companies: \u003cbr /\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     ![FindComGoogleSS](images/FindComGoogleSS.png) \u003cbr /\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     And executing `find com google facebook` will return the following: \u003cbr /\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     ![FindComGoogleFacebookSS](images/FindComGoogleFacebookSS.png) \u003cbr /\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Listing all companies: `list com`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Lists out **all** companies in your list of companies. After using the `find com` command, you would have likely"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "narrowed your list of companies down to a few search results. Use the `list com` command to revert to seeing all the"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "companies in your list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `list com`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### **Internship**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Note: You must be on the **Company** tab in order to execute these commands."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Adding an internship: `add int`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Adds an internship to a company."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format: `add int INDEX j/JOB_TITLE w/WAGE [p/PERIOD] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `PERIOD` can refer to any word (e.g. `3 months`, `Summer break`)."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `add int 3 j/Web Developer w/3000 r/React r/HTML5`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "- `add int 1 j/Machine Learning Engineer w/4700` "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "![AddInternship](images/AddInternship.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Deleting an internship: `delete int`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Deletes an internship from a company. The application (if any) made with this internship will also be deleted."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `delete int INDEX i/INDEX` "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `INDEX` refers to the index of the company in the company list, and `i/INDEX` refers to the index of the"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internship in the company’s list of internships."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `delete int 3 i/2`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Editing an internship: `edit int`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Edits an internship from a company. The application (if any) made with this internship will also be edited."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format:  `edit int INDEX i/INDEX [j/JOB_TITLE] [w/WAGE] [p/PERIOD] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `INDEX` refers to the index of the company in the company list, and `i/INDEX` refers to the index of the"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internship in the company’s list of internships."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `edit int 3 i/1 j/Frontend Developer`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "- Executing `edit int 1 i/2 w/4800 r/Java r/Python`:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "![EditInternship](images/EditInternship.png)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "If an application is already created for the internship, it will also be edited as shown below:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "![EditInternshipApplication](images/EditInternshipApplication.png)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### **Application**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Now that you have learnt how to manage your companies and internships, the next burning question you probably have is "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "how to use InternHunter to apply, track and manage your internship applications. Read on through this section to find "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "out how."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ":information_source: Each application comes with a `STATUS` and `STATUS_DATE` field which indicates the date that the"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`STATUS` was set/updated."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Valid `STATUS` specifiers:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `Applied`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `Interview`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `Waiting`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `Rejected`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `Offered`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `Accepted`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ":information_source: Note that status added are case-insensitive"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Valid `STATUS_DATE` formats:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- d-M-yy HHmm"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    - e.g. `23-12-19 2230`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- d-M-yy"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    - e.g. `23-12-19`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Time will be taken as 2359"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ":information_source: Note that dates added must be in the future"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Applying for an internship: `add app`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Selects an internship from a company and adds it to your list of applications. If unspecified, the application’s"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`STATUS` will be `Applied`, and it’s `STATUS_DATE` will be set as today’s date."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `add app INDEX i/INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Where `INDEX` refers to the index of the company in the company list, and `i/INDEX` refers to the index of the"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internship in the company’s internship list."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Suppose you are interested in applying for the Software Engineer internship in Google Singapore:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ug-application/Internship.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Executing `add app 1 i/1` will apply for the internship as follows. The default status and status date will be used"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "since the status and status date are not specified in this case. Note that you will be automatically switched to"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "the application tab to view this application made:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ug-application/AddApplication.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Deleting an application: `delete app`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Deletes an application from your list of applications."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `delete app INDEX` "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `delete app 3`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Updating an application: `edit app`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Updates an application in your list of applications."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `edit app INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Suppose Google Singapore has replied to your application for the Software Engineer internship and has called you up "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "for an interview on the 28 Oct 2020, 2pm. Executing `edit app 1 s/interview d/28-10-2020 1400` will update this "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "application:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ug-application/EditApplication.png\" width\u003d\"70%\" height\u003d\"70%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Viewing an application: `view app`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Selects an application in the list of applications to show in detail on the right panel."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `view app INDEX`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Suppose you are currently viewing the first application and you want to view the second application. "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Executing `view app 2` will update the right panel to display the second application:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ug-application/ViewApplication2.png\" width\u003d\"70%\" height\u003d\"70%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Finding applications: `find app`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Finds all applications in your list of applications whose job titles contain any of the given keywords."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `find app KEYWORD [ANOTHER_KEYWORD]...`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Find command matching is the same as that used in [`find com` command](#finding-companies-find-com), except "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "job titles are used in placed of company names."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Suppose you have this list of applications. Executing `find app engineer` will update the list to show matching"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "applications:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ug-application/FindApplication.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Listing all applications: `list app`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Lists out **all** applications in your list of applications. After using the `find app` command, you would have likely"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "narrowed your list of applications down to a few search results. Use the `list app` command to revert to seeing"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "all the applications in your list."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `list app`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### **Profile**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "The profile feature offers you the ability to keep track and maintain your personal portfolio. It stores"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "profile items which are entities that describe an achievement, a past experience or a skill you have acquired."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "It assists you in crafting a tailored resume for your internship applications by allowing you to find items in your"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "profile which are relevant to the job description through the [find feature](#finding-items-in-profile-find-me)."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Each profile item belongs to 1 of 3 categories."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Valid `CATEGORY` specifiers:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- `achievement`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- `experience`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- `skill`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Each category is represented by the following icons in the UI:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "| CATEGORY   | ICON "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "|------------|------------------"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "|`achievement`| \u003cimg src\u003d\"images/achievement.png\" width\u003d\"10%\" height\u003d\"10%\"/\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "|`experience` | \u003cimg src\u003d\"images/experience.png\" width\u003d\"10%\" height\u003d\"10%\"/\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "|`skill`      | \u003cimg src\u003d\"images/skills.png\" width\u003d\"10%\" height\u003d\"10%\"/\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Each profile item also contains a `TITLE` that describes the item, and you can optionally "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "add additional `DESCRIPTOR`s to further describe the item in point form."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Adding item to profile: `add me`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Adds a profile item to your profile."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `add me c/CATEGORY t/TITLE [d/DESCRIPTOR]...`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `add me c/skill t/HTML d/Learn how to create divs`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `add me c/achievement t/special recognition in Hack n Roll`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* For example, you have just completed an internship at Govtech. Executing `add me c/experience t/Internship at"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " Govtech d/Implemented automate testing using TravisCI d/Implemented dashboard to track code coverage` on an empty "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " profile will add the profile item as follows: \u003cbr /\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "![AddProfileSS](images/AddProfileItem.png)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Deleting item in profile: `delete me`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Deletes experience, skills or achievements descriptors from your profile."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `delete me INDEX`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `delete me 2`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Editing item in profile: `edit me`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Edit the experience, skills or achievements descriptors of your profile."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `edit me INDEX [c/CATEGORY] [t/TITLE] [d/DESCRIPTORS]`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* When editing `DESCRIPTORS`, all existing descriptors get replaced by the new specified descriptors."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* You can remove all `DESCRIPTORS` by adding d/ without anything after it."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `edit me 2 c/skill t/CSS d/learnt how to use flexbox`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* For example if you want to update the title and descriptor of the first item in your profile."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Executing `edit me 1 t/Internship at Google d/Build a dashboard` will edit the profile item to:\u003cbr /\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "![EditProfileSS](images/EditProfile.PNG)\u003cbr /\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " *(Note that the existing descriptors get replaced)*"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Viewing item in profile: `view me`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Selects an item in the profile to show in detail on the right panel."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `view me INDEX`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `view me 3`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* For example if you have the following profile items and you want to view the third item in your user profile. Executing `view me 3` will show the following:\u003cbr /\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "![ViewProfile](images/ViewProfile.png)\u003cbr /\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "*(As you can see the details of the third item can be seen in the right panel)*"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Finding items in profile: `find me`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Finds all items in your profile whose titles contain any of the specified keywords."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `find me KEYWORD [ANOTHER_KEYWORD]...`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- Only the profile item\u0027s title will be searched for."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- The search is case-insensitive. e.g. `HTML` will match and return items with `html` in its title."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- Profile items with titles matching at least one keyword will be returned. e.g. `Hackathon Internship` will return"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " a list of profile items whose titles contain the word `Hackathon` *or* `Internship`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- The ordering of the keywords does not affect the outcome of the query. e.g. `Hackathon Internship` and `Internship"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " Hackathon` will return the same results."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- Only full words will be matched. e.g. `Intern` will not match `Internship`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- `find me Internship`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- For the following example, if the profile contains the following items. Executing `find me internship` will return"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " the following: \u003cbr /\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     ![FindProfile](images/FindProfileSingle.png) \u003cbr /\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     And executing `find me internship google` will return the following: \u003cbr /\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     ![FindProfileDouble](images/FindProfileDouble.png) \u003cbr /\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *(As you can see, the search results match at least one of the keywords specified regardless of its casing)*"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Listing all items in profile: `list me`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Lists out all items in your profile. After using the `find me` command, you would have likely filtered "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "your list of profile items down to a few search results. You can then use the `list me` command to revert to seeing "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "all the items in your profile."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `list me`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### **General**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Generating matching internships: `match`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Generates a list of internships that have requirements that matches your current set of skills."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `match`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Matching done is case-insensitive. e.g. `Python` will match `python`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Internships with job titles matching at least one `SKILL` will be returned."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Only full words will be matched. e.g. `React` will not match `React Native`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Suppose you have these 2 internship lists (from 2 different companies) and profile skills in your list."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Executing `match` will generate the list of matching internships in a new window."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ug-application/MatchCommand2.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ":bulb: You can press Esc key to close the popup window!"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Switching Tabs: `switch`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Switches between tabs."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Format: `switch TYPE`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "There are three `TYPE`s:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* `com`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* `app`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* `me`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`com` refers to Company tab, `app` refers to Application tab, `me` refers to Profile tab."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* `switch me`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Clearing all entries: `clear`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Clears all entries from InternHunter."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "format: `clear`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Viewing Help: `help`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Displays a link to the InternHunter user guide."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ":bulb: You can press Esc key to close the help window!"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Exiting the Program: `exit`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Shows an exit confirmation dialog."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## **FAQ**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**Where does InternHunter store its data?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "By default, InternHunter will save all the information into a folder called data. The information is then stored into 3 different Json files: `applicationitemlist.json`, `companyitemlist.json`, `profileitemlist.json`."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**How do I transfer my data to another computer?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "You can copy the data file and transfer it into the same directory of the other computer. InternHunter will then be able to reuse this data."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**Do I have to save my data manually?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "There isn\u0027t a need for you to manually save your data, InternHunter will automatically save your data into the relevant json files."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**What happens if I accidentally clear all my data using `clear`?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Unfortunately InternHunter does not provide an `undo` method."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## **Command summary**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Company"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Action     | Format"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "-----------|------------------"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Add**    | `add com n/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Delete** | `delete com INDEX`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Edit**   | `edit com INDEX [n/COMPANY_NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**View**   | `view com INDEX`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Find**   | `find com KEYWORD [ANOTHER_KEYWORD]...`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**List**   | `list com`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Internship"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Action     | Format"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "-----------|------------------"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Add**    | `add int INDEX j/JOB_TITLE w/WAGE [p/PERIOD] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Delete** | `delete int INDEX i/INDEX`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Edit**   | `edit int INDEX i/INDEX [j/JOB_TITLE] [p/PERIOD] [w/WAGE] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Application"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Action     | Format"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "-----------|------------------"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Add**    | `add app INDEX i/INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Delete** | `delete app INDEX`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Edit**   | `edit app INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**View**   | `view app INDEX`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Find**   | `find app KEYWORD [ANOTHER_KEYWORD]...`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**List**   | `list app`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Profile"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Action     | Format"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "-----------|------------------"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Add**    | `add me c/CATEGORY t/TITLE [d/DESCRIPTOR]...`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Delete** | `delete me INDEX`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Edit**   | `edit me INDEX [c/CATEGORY] [t/TITLE] [d/DESCRIPTOR]...`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**View**   | `view me INDEX`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Find**   | `find me KEYWORD [ANOTHER_KEYWORD]...`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**List**   | `list me`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### General"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Action     | Format"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "-----------|------------------"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Match**  | `match`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Switch** | `switch TYPE`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Clear**  | `clear`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Help**   | `help`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Exit**   | `exit`"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 114,
      "orzymandias": 64,
      "ZoroarkDarkrai": 79,
      "-": 119,
      "seanjyjy": 99,
      "shawn-nyk": 166
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eInternHunter\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003ca href\u003d\"https://github.com/AY2021S1-CS2103T-T15-4/tp/actions\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cimg src\u003d\"https://github.com/AY2021S1-CS2103T-T15-4/tp/workflows/Java%20CI/badge.svg\" /\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/a\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003ca href\u003d\"https://codecov.io/gh/AY2021S1-CS2103T-T15-4/tp\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cimg src\u003d\"https://codecov.io/gh/AY2021S1-CS2103T-T15-4/tp/branch/master/graph/badge.svg\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/a\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/Ui.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  \u003cimg src\u003d\"images/App.png\" width\u003d\"49.7%\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  \u003cimg src\u003d\"images/Profile.png\" width\u003d\"49.7%\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Welcome to **InternHunter**, a CLI-centric desktop application which aids university students in applying for tech"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internships. It lets users manage their own customisable collection of companies, internships, internship applications"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "and their own user profile, so that they can keep track of internships that they are interested in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [User Guide](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Developer Guide](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [About Us](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/AboutUs.md)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- This project was extended from AddressBook-Level3 project created by [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Libraries Used: [JavaFX](https://github.com/openjdk/jfx), [Jackson](https://github.com/FasterXML/jackson),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Licence : [MIT](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/LICENSE)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27,
      "-": 6
    }
  },
  {
    "path": "docs/team/keanecjy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Keane Chan Jun Yu - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Other contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Contributed to forum discussions: [#236](https://github.com/nus-cs2103-AY2021S1/forum/issues/236),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Questions on forum: [#173](https://github.com/nus-cs2103-AY2021S1/forum/issues/173)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "keanecjy": 38,
      "ZoroarkDarkrai": 4
    }
  },
  {
    "path": "docs/team/orzymandias.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Gan Wan Cheng Isaac - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* New Feature:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* New Feature:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Code contributed: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Contributed to forum discussions:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Contributions to the Developer Guide"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "orzymandias": 38
    }
  },
  {
    "path": "docs/team/seanjyjy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Lum Jian Yang Sean - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* New Feature: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* New Feature:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Code contributed: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Other contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Contributed to forum discussions:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Contributions to the Developer Guide"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "seanjyjy": 37
    }
  },
  {
    "path": "docs/team/shawn-nyk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Shawn Ng Yong Kwang - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "_(to be filled in along the course of the project)_"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "shawn-nyk": 13
    }
  },
  {
    "path": "docs/team/zoroarkdarkrai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Fidella Widjojo - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Other contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Setup the team organization and repository."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Contributed to forum discussions: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Questions on forum:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Launches the InternHunter app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.ItemListStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing InternHunter ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        config \u003d MainAppUtil.initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        UserPrefs userPrefs \u003d MainAppUtil.initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(userPrefs.getApplicationItemListFilePath(), ApplicationItem.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d new JsonItemListStorage\u003c\u003e("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefs.getCompanyItemListFilePath(), CompanyItem.class, JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d new JsonItemListStorage\u003c\u003e("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefs.getProfileItemListFilePath(), ProfileItem.class, JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        storage \u003d new StorageManager(applicationItemListStorage, companyItemListStorage, profileItemListStorage,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        MainAppUtil.initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model \u003d MainAppUtil.initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"Starting InternHunter \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping InternHunter ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 24,
      "-": 66,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainAppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.exceptions.InconsistentInternshipException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * A collection of utility functions for the MainApp."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class MainAppUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainAppUtil.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the initial application item list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param storage storage the application item list is saved in."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return initial application item list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ReadOnlyItemList\u003cApplicationItem\u003e initApplicationItemList(Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Optional\u003cReadOnlyItemList\u003cApplicationItem\u003e\u003e itemListOptional;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cApplicationItem\u003e initialItemListData;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemListOptional \u003d storage.readApplicationItemList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (itemListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample application item list\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            //to do sample data"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d itemListOptional.orElse(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Will be starting with an empty application item list\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Will be starting with an empty application item list\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initialItemListData;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the initial company item list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param storage storage the company item list is saved in."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return initial company item list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ReadOnlyItemList\u003cCompanyItem\u003e initCompanyItemList(Storage storage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Optional\u003cReadOnlyItemList\u003cCompanyItem\u003e\u003e itemListOptional;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cCompanyItem\u003e initialItemListData;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemListOptional \u003d storage.readCompanyItemList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (itemListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample company item list\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            //to do sample data"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d itemListOptional.orElse(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Will be starting with an empty company item list\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Will be starting with an empty company item list\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initialItemListData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the initial profile item list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param storage storage the profile item list is saved in."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return initial profile item list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ReadOnlyItemList\u003cProfileItem\u003e initProfileItemList(Storage storage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Optional\u003cReadOnlyItemList\u003cProfileItem\u003e\u003e itemListOptional;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cProfileItem\u003e initialItemListData;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemListOptional \u003d storage.readProfileItemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (itemListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample profile item list\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            //to do sample data"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d itemListOptional.orElse(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Will be starting with an empty profile item list\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Will be starting with an empty profile item list\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initialItemListData;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Matches internships in the application list with the ones in the company list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param applicationItemList list of application items."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param companyItemList     list of company items."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws InconsistentInternshipException an application has an internship"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *                                         that does not exist in any company\u0027s list of internships."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static void matchInternships(ItemList\u003cApplicationItem\u003e applicationItemList,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ItemList\u003cCompanyItem\u003e companyItemList) throws InconsistentInternshipException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (ApplicationItem applicationItem : applicationItemList.getItemList()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            final InternshipItem applicationInternshipItem \u003d applicationItem.getInternshipItem();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            final Optional\u003cInternshipItem\u003e correctInternshipItem \u003d companyItemList.getItemList().stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    .map(CompanyItem::getInternships).reduce(new ArrayList\u003c\u003e(), (x, y) -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        x.addAll(y);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        return x;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    }).stream().filter(companyInternshipItem -\u003e companyInternshipItem.equals(applicationInternshipItem))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    .findAny();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (correctInternshipItem.isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                applicationItemList.resetData(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                companyItemList.resetData(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                throw new InconsistentInternshipException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            //Changes the current application item with the one with the correct internship object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            applicationItemList.setItem(applicationItem, new ApplicationItem(correctInternshipItem.get(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    applicationItem.getStatus(), applicationItem.getStatusDate()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e addressBook \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cCompanyItem\u003e companyItemList \u003d new ItemList\u003c\u003e(initCompanyItemList(storage));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cApplicationItem\u003e applicationItemList \u003d new ItemList\u003c\u003e(initApplicationItemList(storage));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cProfileItem\u003e profileItemList \u003d new ItemList\u003c\u003e(initProfileItemList(storage));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            matchInternships(applicationItemList, companyItemList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (InconsistentInternshipException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ModelManager(addressBook, companyItemList, applicationItemList, profileItemList, userPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static void initLogging(Config config) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "ZoroarkDarkrai": 245
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 743;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 932;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Invalid commands */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // To remove"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Error messages, string refers to item type */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The %s item index provided is invalid!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This %s item already exists in InternHunter\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Index error */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\\nTip: If you are \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"certain that you have input a non-zero unsigned integer, check that you are following the valid \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"command format\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Delete message: First string refers to item type, second string refers to item deleted. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_DELETED_ITEM \u003d \"Deleted %1$s item: %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_TYPE \u003d \"Item type has to be either \u0027com\u0027, \u0027int\u0027, \u0027app\u0027 or \u0027me\u0027\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_TYPE_ABRIDGED \u003d \"The Item type for this command has to be either\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \" com, app or \u0027me\u0027\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Add message: First string refers to item type, second string refers to item added. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_ADD_SUCCESS \u003d \"New %1$s item added: %2$s\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Edit message: First string refers to item type, second string refers to item. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Edited %1$s item: %2$s\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** View message: First string refers to item type, second string refers to the index. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Currently viewing %1$s %2$s\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** Switch message: First string refers to tab that is being switch to. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_SWITCH_SUCCESS \u003d \"Switching to %s tab\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_SAME_SCREEN \u003d \"Already in %s tab\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** Find message: First string refers to the number if item found. second string refers to the item type. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_FIND_SUCCESS \u003d \"%1$d %2$s items found!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** List message: First string to refers to the item type. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_LIST_SUCCESS \u003d \"Listed all %1$s items\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19,
      "-": 13,
      "shawn-nyk": 6,
      "seanjyjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Represents an Index in using the one-based indexing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of one-based index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return String.valueOf(getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String getNumberedList(List\u003c?\u003e items) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            sb.append(i + 1).append(\". \").append(items.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 10,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonSerializableItemList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    static \u003cT extends Item, U extends JsonAdaptedItem\u003e JsonSerializableItemList\u003cT, U\u003e deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path jsonFile, Class\u003cT\u003e contentClass,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Class\u003cU\u003e jsonClass)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), contentClass, jsonClass);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * This method is used to circumvent Classnot allowing parameterized type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param filePath     cannot be null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param contentClass Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param jsonClass    the json class of contentClass."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static \u003cT extends Item, U extends JsonAdaptedItem\u003e Optional\u003cJsonSerializableItemList\u003cT, U\u003e\u003e readJsonFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath, Class\u003cT\u003e contentClass, Class\u003cU\u003e jsonClass) throws DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cT, U\u003e jsonFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, contentClass, jsonClass);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static \u003cT extends Item, U extends JsonAdaptedItem\u003e JsonSerializableItemList\u003cT, U\u003e fromJsonString("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            String json, Class\u003cT\u003e contentClass, Class\u003cU\u003e jsonClass) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return objectMapper.readValue(json, objectMapper.getTypeFactory().constructParametricType("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                JsonSerializableItemList.class, contentClass, jsonClass));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 57,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts a string to title case."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param string String input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Title case representation of string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String toTitleCase(String string) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert string.length() \u003e 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        char firstLetter \u003d string.charAt(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String remaining \u003d string.substring(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Character.toUpperCase(firstLetter) + remaining.toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/TabUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE_ABRIDGED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TabUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Takes in a {@code tab} and converts the {@code tab} into it\u0027s {@code TabName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TabName getSwitchTabName(String tab) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName tabName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tabName \u003d TabName.COMPANY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tabName \u003d TabName.APPLICATION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tabName \u003d TabName.PROFILE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE_ABRIDGED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of Application Item"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    ObservableList\u003cApplicationItem\u003e getFilteredApplicationItemList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of Company Item"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    ObservableList\u003cCompanyItem\u003e getFilteredCompanyItemList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of Profile Item"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ObservableList\u003cProfileItem\u003e getFilteredProfileItemList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns the current tab of InternHunter."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    TabName getTabName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current tab of InternHunter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setTabName(TabName tabName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns the current company view Index."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getCompanyViewIndex();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns the current application view Index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getApplicationViewIndex();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns the current profile view Index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getProfileViewIndex();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current company view index to {@code index}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setCompanyViewIndex(Index index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current application view index to {@code index}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setApplicationViewIndex(Index index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current profile view index to {@code index}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setProfileViewIndex(Index index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 7,
      "-": 38,
      "seanjyjy": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.MainParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final MainParser mainParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mainParser \u003d new MainParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Command command \u003d mainParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            storage.saveCompanyItemList(model.getUnfilteredCompanyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            storage.saveApplicationItemList(model.getUnfilteredApplicationList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            storage.saveProfileItemList(model.getUnfilteredProfileList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ObservableList\u003cApplicationItem\u003e getFilteredApplicationItemList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getFilteredApplicationList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ObservableList\u003cCompanyItem\u003e getFilteredCompanyItemList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getFilteredCompanyList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ObservableList\u003cProfileItem\u003e getFilteredProfileItemList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getFilteredProfileList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TabName getTabName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return model.getTabName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName(TabName tabName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(tabName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getCompanyViewIndex() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return model.getCompanyViewIndex();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getApplicationViewIndex() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return model.getApplicationViewIndex();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getProfileViewIndex() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return model.getProfileViewIndex();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setCompanyViewIndex(Index index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setCompanyViewIndex(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setApplicationViewIndex(Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setApplicationViewIndex(index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setProfileViewIndex(Index index) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setProfileViewIndex(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "orzymandias": 1,
      "ZoroarkDarkrai": 6,
      "-": 67,
      "seanjyjy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"InternHunter has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.setApplicationList(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.setCompanyList(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.setProfileList(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final boolean isShowHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** The application should switch tab. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final boolean isSwitchTab;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** The application should switch display. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final boolean isSwitchDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** List of matching internships generated based on user\u0027s profile skills */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private List\u003cInternshipItem\u003e matchingInternships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowHelp, boolean isExit, boolean isSwitchTab,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            boolean isSwitchDisplay) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isShowHelp \u003d isShowHelp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isSwitchTab \u003d isSwitchTab;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isSwitchDisplay \u003d isSwitchDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this(feedbackToUser, false, false, false, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isSwitchTab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean isSwitchDisplay() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isSwitchDisplay;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isShowMatchingInternships() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return !matchingInternships.isEmpty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setMatchingInternships(List\u003cInternshipItem\u003e listOfInternships) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        matchingInternships \u003d listOfInternships;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public List\u003cInternshipItem\u003e getMatchingInternships() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return matchingInternships;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 isSwitchTab \u003d\u003d otherCommandResult.isSwitchTab"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 isSwitchDisplay \u003d\u003d otherCommandResult.isSwitchDisplay;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isExit, isSwitchTab, isSwitchDisplay);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16,
      "-": 63,
      "seanjyjy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting InternHunter as requested ...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MatchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class MatchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"match\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String SHOWING_MATCH_COMMAND_MESSAGE \u003d \"Displaying list of matching internships.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String NO_MATCHING_INTERNSHIPS_MESSAGE \u003d \"There are no internships that matches your \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"current skill set\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        List\u003cProfileItem\u003e profileItemList \u003d model.getProfileItemList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        List\u003cCompanyItem\u003e companyItemList \u003d model.getCompanyItemList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        List\u003cString\u003e currentSkillList \u003d getSkillList(profileItemList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        List\u003cInternshipItem\u003e fullInternshipList \u003d getInternshipList(companyItemList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        List\u003cInternshipItem\u003e matchingInternships \u003d getMatchingInternships(fullInternshipList, currentSkillList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getMatchingInternshipsCommandResult(matchingInternships);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private List\u003cString\u003e getSkillList(List\u003cProfileItem\u003e profileItemList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return profileItemList.stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .filter(profileItem -\u003e profileItem.getCategory() \u003d\u003d ProfileItemCategory.SKILL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .map(ProfileItem::getTitleValue)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private List\u003cInternshipItem\u003e getInternshipList(List\u003cCompanyItem\u003e companyItemList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        List\u003cInternshipItem\u003e internshipItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        companyItemList.stream().map(CompanyItem::getInternships).forEach(internshipItems::addAll);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internshipItems;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private List\u003cInternshipItem\u003e getMatchingInternships(List\u003cInternshipItem\u003e internshipItemList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            List\u003cString\u003e skillList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internshipItemList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .filter(internshipItem -\u003e internshipItem.matches(skillList))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private CommandResult getMatchingInternshipsCommandResult(List\u003cInternshipItem\u003e matchingInternships) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (matchingInternships.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new CommandResult(NO_MATCHING_INTERNSHIPS_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(SHOWING_MATCH_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        commandResult.setMatchingInternships(matchingInternships);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SAME_SCREEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SWITCH_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Switch the screen to a a certain tab."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + \": Switch to the desired tab.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + \"Parameters: TAB_NAME.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String EXCESS_MESSAGE \u003d \"Note that that should not be anything inputs after the ITEM_TYPE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public final String sameScreenText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public final String switchedScreenText;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final TabName tabName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a SwitchCommand to switch {@code tabName}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public SwitchCommand(TabName tabName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        sameScreenText \u003d String.format(MESSAGE_SAME_SCREEN, tabName.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switchedScreenText \u003d String.format(MESSAGE_SWITCH_SUCCESS, tabName.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName currentTab \u003d model.getTabName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String resultMessage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (tabName.equals(currentTab)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            resultMessage \u003d sameScreenText;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            resultMessage \u003d switchedScreenText;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getCommandResult(model, resultMessage, tabName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u0026\u0026 tabName.equals(((SwitchCommand) other).tabName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCompany;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Adds an application to the Application list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddApplicationCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + APPLICATION_ALIAS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Adds an \" + APPLICATION_NAME + \" to \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"[\" + PREFIX_STATUS_DATE + \"STATUS_DATE]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + APPLICATION_ALIAS + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_INDEX + \"2 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_STATUS + \"waiting \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_STATUS_DATE + \"23-12-20\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index companyIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index internshipIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final StatusDate statusDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an AddApplicationCommand to add the specified {@code ApplicationItem}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddApplicationCommand(Index companyIndex, Index internshipIndex, Status status, StatusDate statusDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(companyIndex, internshipIndex, status, statusDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyIndex \u003d companyIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem companyItem \u003d getCompany(model, companyIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        InternshipItem internshipItem \u003d companyItem.getInternship(internshipIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ApplicationItem applicationToAdd \u003d new ApplicationItem(internshipItem, status, statusDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (model.hasApplication(applicationToAdd)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_ITEM, APPLICATION_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.addApplication(applicationToAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setApplicationViewIndex(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String addSuccessMessage \u003d String.format(MESSAGE_ADD_SUCCESS, APPLICATION_NAME, applicationToAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getCommandResult(model, addSuccessMessage, TabName.APPLICATION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the application view index to the newly added application."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setApplicationViewIndex(Model model) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int size \u003d model.getFilteredApplicationListSize();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setApplicationViewIndex(Index.fromOneBased(size));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof AddApplicationCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddApplicationCommand otherAddApplicationCommand \u003d (AddApplicationCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyIndex.equals(otherAddApplicationCommand.companyIndex)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 internshipIndex.equals(otherAddApplicationCommand.internshipIndex)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 status.equals(otherAddApplicationCommand.status)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 statusDate.equals(otherAddApplicationCommand.statusDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 86,
      "shawn-nyk": 15,
      "seanjyjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (model.getAddressBook().hasItem(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().addItem(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 9,
      "ZoroarkDarkrai": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCommandAbstract.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ITEM_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Represents an Add Command for Items."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public abstract class AddCommandAbstract extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    //todo Update Message Usage to standardised format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Adds a \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_NAME + \", \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + INTERNSHIP_NAME + \", \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + APPLICATION_NAME + \" or \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PROFILE_ITEM_NAME"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" to InternHunter.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: ITEM_TYPE DETAILS\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Valid ITEM_TYPEs are \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + COMPANY_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + INTERNSHIP_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + APPLICATION_ALIAS + \"\u0027 or \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + PROFILE_ALIAS + \"\u0027. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Each ITEM_TYPE requires its own set of DETAILS.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + INTERNSHIP_ALIAS + \" DETAILS\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 12,
      "shawn-nyk": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCompanyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_INDUSTRY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Adds a Company to the Model\u0027s Company list. todo javadocs (shawn)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddCompanyCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMPANY_ALIAS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Adds a \" + COMPANY_NAME + \" to \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_COMPANY_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_INDUSTRY + \"INDUSTRY_TYPE]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_COMPANY_NAME + \"Google \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_PHONE + \"65218000 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_EMAIL + \"GoogleHires@gmail.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_ADDRESS + \"70 Pasir Panjang Rd, #03-71 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_INDUSTRY + \"Cloud Computing \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_INDUSTRY + \"Artificial Intelligence\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final CompanyItem toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates an AddCompanyCommand to add the specified {@code CompanyItem}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddCompanyCommand(CompanyItem company) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        toAdd \u003d company;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (model.hasCompany(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_ITEM, COMPANY_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.addCompany(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setCompanyViewIndex(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String addSuccessMessage \u003d String.format(MESSAGE_ADD_SUCCESS, COMPANY_NAME, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getCommandResult(model, addSuccessMessage, TabName.COMPANY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the company view index to the newly added company."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setCompanyViewIndex(Model model) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int size \u003d model.getFilteredCompanyListSize();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setCompanyViewIndex(Index.fromOneBased(size));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof AddCompanyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCompanyCommand) other).toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 3,
      "shawn-nyk": 69,
      "seanjyjy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCompany;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_REQUIREMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_WAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddInternshipCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + INTERNSHIP_ALIAS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Adds an \" + INTERNSHIP_NAME + \" to InternHunter.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_JOB_TITLE + \"JOB_TITLE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            // Todo: Update Wage when its status is resolved."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_WAGE + \"WAGE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_PERIOD + \"PERIOD] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_REQUIREMENT + \"REQUIREMENT]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Select a company to add an internship to using INDEX.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + INTERNSHIP_ALIAS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_JOB_TITLE + \"Software Engineer \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_WAGE + \"3000 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_PERIOD + \"3 months \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_REQUIREMENT + \"React \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_REQUIREMENT + \"Vue \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This %1$s already exists in %2$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Index companyIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final JobTitle jobTitle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Wage wage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Period period;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Set\u003cRequirement\u003e requirements;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Internship}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddInternshipCommand(Index companyIndex, JobTitle jobTitle,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Wage wage, Period period, Set\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(companyIndex, jobTitle, wage, period, requirements);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.companyIndex \u003d companyIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.wage \u003d wage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.requirements \u003d requirements;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem companyItem \u003d getCompany(model, companyIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        InternshipItem internshipItem \u003d new InternshipItem(companyItem.getCompanyName(), jobTitle, period, wage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                requirements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (companyItem.containsInternship(internshipItem)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_ITEM,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    INTERNSHIP_NAME, companyItem.getCompanyName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        companyItem.addInternship(internshipItem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setCompanyViewIndex(companyIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String addSuccessMessage \u003d String.format(MESSAGE_ADD_SUCCESS, INTERNSHIP_NAME, internshipItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, addSuccessMessage, TabName.COMPANY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 8,
      "orzymandias": 73,
      "shawn-nyk": 14,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ITEM_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Adds a Profile Item to the Model\u0027s Profile list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddProfileCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PROFILE_ALIAS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Adds a \" + PROFILE_ITEM_NAME + \" item to \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTOR + \"DESCRIPTOR]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PROFILE_ALIAS + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_TITLE + \"Learn HTML \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_CATEGORY + \"skill \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_DESCRIPTOR + \"Learn how to use div and classes. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_DESCRIPTOR + \"Learn how to inject javascript. \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final ProfileItem toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Creates an AddCommand to add the specified {@code ProfileItem}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddProfileCommand(ProfileItem profileItem) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(profileItem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        toAdd \u003d profileItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (model.hasProfileItem(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_ITEM, PROFILE_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.addProfileItem(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setProfileViewIndex(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String addSuccessMessage \u003d String.format(MESSAGE_ADD_SUCCESS, PROFILE_NAME, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, addSuccessMessage, TabName.PROFILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the profile view index to the newly added profile."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setProfileViewIndex(Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int size \u003d model.getFilteredProfileListSize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setProfileViewIndex(Index.fromOneBased(size));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof AddProfileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProfileCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "orzymandias": 61,
      "shawn-nyk": 6,
      "seanjyjy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETED_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Deletes the application from the Application list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteApplicationCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + APPLICATION_ALIAS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Deletes a \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + APPLICATION_NAME"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" from InternHunter by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMMAND_WORD + \" \" + APPLICATION_ALIAS + \" 1\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteApplicationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName currentTabName \u003d model.getTabName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ApplicationItem applicationToDelete \u003d getApplication(model, targetIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.deleteApplication(applicationToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String deleteSuccessMessage \u003d String.format(MESSAGE_DELETED_ITEM, APPLICATION_NAME, applicationToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getCommandResult(model, deleteSuccessMessage, currentTabName, TabName.APPLICATION, targetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof DeleteApplicationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteApplicationCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 38,
      "shawn-nyk": 14,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class DeleteCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getAddressBook().getFilteredItemList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().deleteItem(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 4,
      "ZoroarkDarkrai": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteCommandAbstract.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ITEM_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/** todo javadocs */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public abstract class DeleteCommandAbstract extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Deletes a \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_NAME + \", \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + INTERNSHIP_NAME + \", \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + APPLICATION_NAME + \" or \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PROFILE_ITEM_NAME"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" from InternHunter by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters (for ITEM_TYPE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + COMPANY_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + APPLICATION_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + PROFILE_ALIAS + \"\u0027): \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"ITEM_TYPE INDEX\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters (for ITEM_TYPE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + INTERNSHIP_ALIAS + \"\u0027): \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"ITEM_TYPE INDEX \" + PREFIX_INDEX + \"INDEX\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Valid ITEM_TYPEs are \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + COMPANY_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + INTERNSHIP_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + APPLICATION_ALIAS + \"\u0027 or \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + PROFILE_ALIAS + \"\u0027. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" 2\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMMAND_WORD + \" \" + INTERNSHIP_ALIAS + \" 1 \" + PREFIX_INDEX + \"3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 9,
      "shawn-nyk": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteCompanyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETED_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCompany;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Deletes a Company from the Model\u0027s Company list. todo javadocs (shawn)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeleteCompanyCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMPANY_ALIAS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Deletes a \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_NAME"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" from InternHunter by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" 1\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeleteCompanyCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName currentTabName \u003d model.getTabName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem companyToDelete \u003d getCompany(model, targetIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // Delete all internships in the company"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        deleteAllInternshipsInCompany(model, companyToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // Delete the company"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.deleteCompany(companyToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String deleteSuccessMessage \u003d String.format(MESSAGE_DELETED_ITEM, COMPANY_NAME, companyToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getCommandResult(model, deleteSuccessMessage, currentTabName, TabName.COMPANY, targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private void deleteAllInternshipsInCompany(Model model, CompanyItem company) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        int numberOfInternships \u003d company.getNumberOfInternships();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfInternships; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new DeleteInternshipCommand(targetIndex, Index.fromZeroBased(0)).execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof DeleteCompanyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCompanyCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 64,
      "seanjyjy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETED_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCompany;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Deletes an internship from the internship list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteInternshipCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Deletes the \" + INTERNSHIP_NAME + \" identified by the index number used in the displayed \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + INTERNSHIP_NAME + \" list in a \" + COMPANY_NAME + \".\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"The \" + APPLICATION_NAME + \" (if any) made with this \" + INTERNSHIP_NAME + \" will also be deleted.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_INDEX + \"INDEX\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Select a \" + COMPANY_NAME + \" with the first INDEX and an \" + INTERNSHIP_NAME + \" within that \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_NAME + \" with the second INDEX. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + INTERNSHIP_ALIAS + \" 1 \" + PREFIX_INDEX + \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index companyIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index internshipIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an DeleteInternshipCommand to delete the specified {@code InternshipItem}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteInternshipCommand(Index companyIndex, Index internshipIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(companyIndex, internshipIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyIndex \u003d companyIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem companyItem \u003d getCompany(model, companyIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        InternshipItem internshipItem \u003d companyItem.getInternship(internshipIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Delete applications for this deleted internship"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem applicationItemToDelete \u003d new ApplicationItem(internshipItem);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.deleteSameApplication(applicationItemToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // Delete the internship"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        companyItem.removeInternship(internshipIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String deleteSuccessMessage \u003d String.format(MESSAGE_DELETED_ITEM, INTERNSHIP_NAME, internshipItem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getCommandResult(model, deleteSuccessMessage, TabName.COMPANY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof DeleteInternshipCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteInternshipCommand otherDeleteInternshipCommand \u003d (DeleteInternshipCommand) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyIndex.equals(otherDeleteInternshipCommand.companyIndex)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 internshipIndex.equals(otherDeleteInternshipCommand.internshipIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 67,
      "shawn-nyk": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class DeleteProfileCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PROFILE_ALIAS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Deletes a \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PROFILE_ITEM_NAME"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" from InternHunter by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMMAND_WORD + \" \" + PROFILE_ALIAS + \" 1\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public DeleteProfileCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName currentTabName \u003d model.getTabName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cProfileItem\u003e lastShownList \u003d model.getFilteredProfileList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, PROFILE_NAME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem profileToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.deleteProfileItem(profileToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String deleteSuccessMessage \u003d String.format(Messages.MESSAGE_DELETED_ITEM, PROFILE_NAME, profileToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getCommandResult(model, deleteSuccessMessage, currentTabName, TabName.PROFILE, targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof DeleteProfileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteProfileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 44,
      "shawn-nyk": 13,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EditApplicationCommand extends EditCommandAbstract {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + APPLICATION_ALIAS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Edits the details of a \" + APPLICATION_NAME + \" from InternHunter accessed \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"[\" + PREFIX_STATUS_DATE + \"STATUS_DATE]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: At least one of the optional fields must be provided. INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + APPLICATION_ALIAS + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_STATUS + \"offered\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final EditApplicationDescriptor editApplicationDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param targetIndex of the application in the filtered application list to edit."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param editApplicationDescriptor details to edit the application with."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationCommand(Index targetIndex, EditApplicationDescriptor editApplicationDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(targetIndex, editApplicationDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.editApplicationDescriptor \u003d new EditApplicationDescriptor(editApplicationDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem applicationItemToEdit \u003d getApplication(model, targetIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem editedApplicationItem \u003d createEditedApplicationItem(applicationItemToEdit,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                editApplicationDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.setApplication(applicationItemToEdit, editedApplicationItem);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setApplicationViewIndex(targetIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String editSuccessMessage \u003d String.format(MESSAGE_EDIT_SUCCESS, APPLICATION_NAME, editedApplicationItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getCommandResult(model, editSuccessMessage, TabName.APPLICATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates and returns a {@code ApplicationItem} with the details of {@code applicationItemToEdit}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * edited with {@code editApplicationDescriptor}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static ApplicationItem createEditedApplicationItem(ApplicationItem applicationItemToEdit,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            EditApplicationDescriptor editApplicationDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(applicationItemToEdit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Keeps the same internship item"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem internshipItem \u003d applicationItemToEdit.getInternshipItem();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Status updatedStatus \u003d editApplicationDescriptor.getStatus().orElse(applicationItemToEdit.getStatus());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StatusDate updatedStatusDate \u003d editApplicationDescriptor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .getStatusDate()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .orElse(applicationItemToEdit.getStatusDate());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new ApplicationItem(internshipItem, updatedStatus, updatedStatusDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof EditApplicationCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationCommand e \u003d (EditApplicationCommand) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 editApplicationDescriptor.equals(e.editApplicationDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Stores the details to edit the application item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * corresponding field value of the application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static class EditApplicationDescriptor {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private StatusDate statusDate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public EditApplicationDescriptor() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public EditApplicationDescriptor(EditApplicationDescriptor toCopy) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            setStatusDate(toCopy.statusDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return CollectionUtil.isAnyNonNull(status, statusDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void setStatusDate(StatusDate statusDate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public Optional\u003cStatusDate\u003e getStatusDate() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Optional.ofNullable(statusDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (!(other instanceof EditApplicationDescriptor)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            EditApplicationDescriptor e \u003d (EditApplicationDescriptor) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return getStatus().equals(e.getStatus())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    \u0026\u0026 getStatusDate().equals(e.getStatusDate());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 158,
      "shawn-nyk": 8,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EditCommand extends EditCommandAbstract {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getAddressBook().getFilteredItemList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!personToEdit.isSameItem(editedPerson) \u0026\u0026 model.getAddressBook().hasItem(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().setItem(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 7,
      "ZoroarkDarkrai": 5,
      "-": 214,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditCommandAbstract.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public abstract class EditCommandAbstract extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Edits the details of an item from InternHunter accessed \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters (for ITEM_TYPE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + COMPANY_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + APPLICATION_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + PROFILE_ALIAS + \"\u0027): \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"ITEM_TYPE INDEX DETAILS\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters (for ITEM_TYPE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + INTERNSHIP_ALIAS + \"\u0027): \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"ITEM_TYPE INDEX \" + PREFIX_INDEX + \"INDEX DETAILS\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Valid ITEM_TYPEs are \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + COMPANY_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + INTERNSHIP_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + APPLICATION_ALIAS + \"\u0027 or \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + PROFILE_ALIAS + \"\u0027. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX must be a positive integer. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Each ITEM_TYPE requires its own set of DETAILS.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PROFILE_ALIAS + \" 3 DETAILS\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditCompanyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCompany;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_INDUSTRY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/** todo javadocs (shawn) */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EditCompanyCommand extends EditCommandAbstract {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMPANY_ALIAS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Edits the details of a \" + COMPANY_NAME + \" from InternHunter accessed \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_COMPANY_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_INDUSTRY + \"INDUSTRY_TYPE]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: At least one of the optional fields must be provided. INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" 5 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_COMPANY_NAME + \"Amazon Inc \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_PHONE + \"61234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_INDUSTRY + \"Commerce \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_INDUSTRY + \"Cloud Computing\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final EditCompanyDescriptor editCompanyDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param editCompanyDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public EditCompanyCommand(Index index, EditCompanyDescriptor editCompanyDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(editCompanyDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.editCompanyDescriptor \u003d new EditCompanyDescriptor(editCompanyDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem companyToEdit \u003d getCompany(model, index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem editedCompany \u003d createEditedCompany(companyToEdit, editCompanyDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!companyToEdit.isSameItem(editedCompany) \u0026\u0026 model.hasCompany(editedCompany)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_DUPLICATE_ITEM, COMPANY_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.setCompany(companyToEdit, editedCompany);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setCompanyViewIndex(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String editSuccessMessage \u003d String.format(MESSAGE_EDIT_SUCCESS, COMPANY_NAME, editedCompany);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, editSuccessMessage, TabName.COMPANY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static CompanyItem createEditedCompany(CompanyItem companyToEdit,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            EditCompanyDescriptor editCompanyDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assert companyToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyName updatedName \u003d editCompanyDescriptor.getName().orElse(companyToEdit.getCompanyName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Phone updatedPhone \u003d editCompanyDescriptor.getPhone().orElse(companyToEdit.getPhone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Email updatedEmail \u003d editCompanyDescriptor.getEmail().orElse(companyToEdit.getEmail());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Address updatedAddress \u003d editCompanyDescriptor.getAddress().orElse(companyToEdit.getAddress());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Set\u003cIndustry\u003e updatedIndustries \u003d editCompanyDescriptor.getIndustries().orElse(companyToEdit.getIndustries());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cInternshipItem\u003e internships \u003d companyToEdit.getInternships();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem updatedCompany \u003d new CompanyItem(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                updatedIndustries, internships);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        updatedCompany.updateAllInternshipsCompanyName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return updatedCompany;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!(other instanceof EditCompanyCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        EditCompanyCommand e \u003d (EditCompanyCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 editCompanyDescriptor.equals(e.editCompanyDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static class EditCompanyDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private CompanyName name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private Set\u003cIndustry\u003e industries;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public EditCompanyDescriptor() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public EditCompanyDescriptor(EditCompanyDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setIndustries(toCopy.industries);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, industries);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setName(CompanyName name) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cCompanyName\u003e getName() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setIndustries(Set\u003cIndustry\u003e industries) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.industries \u003d (industries !\u003d null) ? new HashSet\u003c\u003e(industries) : null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cSet\u003cIndustry\u003e\u003e getIndustries() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return (industries !\u003d null) ? Optional.of(Collections.unmodifiableSet(industries)) : Optional.empty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (!(other instanceof EditCompanyDescriptor)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            EditCompanyDescriptor e \u003d (EditCompanyDescriptor) other;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    \u0026\u0026 getIndustries().equals(e.getIndustries());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "shawn-nyk": 227,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCompany;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_REQUIREMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_WAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/** todo javadocs (shawn) */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EditInternshipCommand extends EditCommandAbstract {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + INTERNSHIP_ALIAS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Edits the \" + INTERNSHIP_NAME + \" identified by the index number used in the displayed \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + INTERNSHIP_NAME + \" list in a \" + COMPANY_NAME + \".\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_JOB_TITLE + \"JOB_TITLE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_WAGE + \"WAGE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_PERIOD + \"PERIOD] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_REQUIREMENT + \"REQUIREMENT]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Select a \" + COMPANY_NAME + \" with the first INDEX and an \" + INTERNSHIP_NAME + \" within that \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_NAME + \" with the second INDEX. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"At least one of the optional fields must be provided.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + INTERNSHIP_ALIAS + \" 5 \" + PREFIX_INDEX + \"2 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_JOB_TITLE + \"Web Developer \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_REQUIREMENT + \"HTML \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_REQUIREMENT + \"CSS \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_REQUIREMENT + \"JS \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Index companyIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Index internshipIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final EditInternshipDescriptor editInternshipDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn) */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public EditInternshipCommand(Index companyIndex, Index internshipIndex,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireAllNonNull(companyIndex, internshipIndex, editInternshipDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.companyIndex \u003d companyIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.editInternshipDescriptor \u003d new EditInternshipDescriptor(editInternshipDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem companyItem \u003d getCompany(model, companyIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        InternshipItem internshipToEdit \u003d companyItem.getInternship(internshipIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        InternshipItem editedInternship \u003d createEditedInternship(internshipToEdit, editInternshipDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!internshipToEdit.isSameItem(editedInternship) \u0026\u0026 companyItem.getInternships().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .anyMatch(editedInternship::isSameItem)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_DUPLICATE_ITEM, INTERNSHIP_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        editInternship(internshipToEdit, editedInternship);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.updateFilteredCompanyList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setCompanyViewIndex(companyIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String editSuccessMessage \u003d String.format(MESSAGE_EDIT_SUCCESS, INTERNSHIP_NAME, editedInternship);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, editSuccessMessage, TabName.COMPANY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static InternshipItem createEditedInternship(InternshipItem internshipToEdit,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assert internshipToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyName companyName \u003d internshipToEdit.getCompanyName();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        JobTitle updatedJobTitle \u003d editInternshipDescriptor.getJobTitle().orElse(internshipToEdit.getJobTitle());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Wage updatedWage \u003d editInternshipDescriptor.getWage().orElse(internshipToEdit.getWage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Period updatedPeriod \u003d editInternshipDescriptor.getPeriod().orElse(internshipToEdit.getPeriod());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Set\u003cRequirement\u003e updatedRequirements \u003d editInternshipDescriptor.getRequirements()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .orElse(internshipToEdit.getRequirements());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new InternshipItem(companyName, updatedJobTitle, updatedPeriod, updatedWage, updatedRequirements);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static void editInternship(InternshipItem internshipToEdit, InternshipItem editedInternship) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internshipToEdit.setJobTitle(editedInternship.getJobTitle());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internshipToEdit.setWage(editedInternship.getWage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internshipToEdit.setPeriod(editedInternship.getPeriod());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internshipToEdit.setRequirements(editedInternship.getRequirements());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!(other instanceof EditInternshipCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        EditInternshipCommand e \u003d (EditInternshipCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyIndex.equals(e.companyIndex)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 internshipIndex.equals(e.internshipIndex)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 editInternshipDescriptor.equals(e.editInternshipDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static class EditInternshipDescriptor {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private JobTitle jobTitle;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private Wage wage;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private Period period;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        private Set\u003cRequirement\u003e requirements;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public EditInternshipDescriptor() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public EditInternshipDescriptor(EditInternshipDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setJobTitle(toCopy.jobTitle);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setWage(toCopy.wage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setPeriod(toCopy.period);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            setRequirements(toCopy.requirements);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return CollectionUtil.isAnyNonNull(jobTitle, wage, period, requirements);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setJobTitle(JobTitle jobTitle) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cJobTitle\u003e getJobTitle() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.ofNullable(jobTitle);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setWage(Wage wage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.wage \u003d wage;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cWage\u003e getWage() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.ofNullable(wage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setPeriod(Period period) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.period \u003d period;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cPeriod\u003e getPeriod() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.ofNullable(period);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public void setRequirements(Set\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            this.requirements \u003d (requirements !\u003d null) ? new HashSet\u003c\u003e(requirements) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public Optional\u003cSet\u003cRequirement\u003e\u003e getRequirements() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return (requirements !\u003d null) ? Optional.of(Collections.unmodifiableSet(requirements)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (!(other instanceof EditInternshipDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            EditInternshipDescriptor e \u003d (EditInternshipDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return getJobTitle().equals(e.getJobTitle())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    \u0026\u0026 getWage().equals(e.getWage())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    \u0026\u0026 getPeriod().equals(e.getPeriod())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    \u0026\u0026 getRequirements().equals(e.getRequirements());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "shawn-nyk": 225,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.isAnyNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getProfileItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ITEM_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Edits the details of a existing profileItem in the InternHunter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class EditProfileCommand extends EditCommandAbstract {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PROFILE_ALIAS"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Edits the details of a \" + PROFILE_ITEM_NAME + \" from InternHunter accessed \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTOR + \"DESCRIPTOR]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: At least one of the optional fields must be provided. INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_CATEGORY + \"achievement \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_DESCRIPTOR + \"Devised a mobile transaction solution. \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final EditProfileItemDescriptor editProfileItemDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param index of the profileItem in the filtered profile item list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param editProfileItemDescriptor details to edit the profile item with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileCommand(Index index, EditProfileItemDescriptor editProfileItemDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(editProfileItemDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.editProfileItemDescriptor \u003d new EditProfileItemDescriptor(editProfileItemDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem profileItemToEdit \u003d getProfileItem(model, targetIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem editedProfileItem \u003d createEditedProfileItem(profileItemToEdit, editProfileItemDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!profileItemToEdit.isSameItem(editedProfileItem) \u0026\u0026 model.hasProfileItem(editedProfileItem)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_DUPLICATE_ITEM, PROFILE_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.setProfileItem(profileItemToEdit, editedProfileItem);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setProfileViewIndex(targetIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String editSuccessMessage \u003d String.format(MESSAGE_EDIT_SUCCESS, PROFILE_NAME, editedProfileItem);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, editSuccessMessage, TabName.PROFILE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Creates and returns a {@code ProfileItem} with the details of {@code profileItemToEdit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * edited with {@code editProfileItemDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static ProfileItem createEditedProfileItem(ProfileItem profileItemToEdit,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            EditProfileItemDescriptor editProfileItemDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assert profileItemToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title updatedTitle \u003d editProfileItemDescriptor.getTitle()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .orElse(profileItemToEdit.getTitle());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory updatedCategory \u003d editProfileItemDescriptor"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .getProfileItemCategory().orElse(profileItemToEdit.getCategory());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Set\u003cDescriptor\u003e updatedDescriptor \u003d editProfileItemDescriptor"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .getDescriptors().orElse(profileItemToEdit.getDescriptors());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new ProfileItem(updatedTitle, updatedCategory, updatedDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!(other instanceof EditProfileCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileCommand e \u003d (EditProfileCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 editProfileItemDescriptor.equals(e.editProfileItemDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Stores the details to edit the profile item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * corresponding field value of the profile item."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static class EditProfileItemDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        private ProfileItemCategory profileItemCategory;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        private Set\u003cDescriptor\u003e descriptors;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public EditProfileItemDescriptor() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * A defensive copy of {@code descriptors} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public EditProfileItemDescriptor(EditProfileItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            setProfileItemCategory(toCopy.profileItemCategory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            setDescriptors(toCopy.descriptors);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return isAnyNonNull(title, profileItemCategory, descriptors);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public void setProfileItemCategory(ProfileItemCategory cat) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            this.profileItemCategory \u003d cat;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public Optional\u003cProfileItemCategory\u003e getProfileItemCategory() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return Optional.ofNullable(profileItemCategory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * Sets {@code descriptors} to this object\u0027s {@code descriptors}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * A defensive copy of {@code descriptors} is used internally."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public void setDescriptors(Set\u003cDescriptor\u003e descriptors) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            this.descriptors \u003d (descriptors !\u003d null) ? new HashSet\u003c\u003e(descriptors) : null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * Returns an unmodifiable descriptor set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code descriptors} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public Optional\u003cSet\u003cDescriptor\u003e\u003e getDescriptors() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return (descriptors !\u003d null) ? Optional.of(Collections.unmodifiableSet(descriptors)) : Optional.empty();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            if (!(other instanceof EditProfileItemDescriptor)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            EditProfileItemDescriptor e \u003d (EditProfileItemDescriptor) other;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                    \u0026\u0026 getProfileItemCategory().equals(e.getProfileItemCategory())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                    \u0026\u0026 getDescriptors().equals(e.getDescriptors());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 188,
      "shawn-nyk": 11,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationNameContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Finds and lists all application items in InternHunter whose jobTitle contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindApplicationCommand extends FindCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + APPLICATION_ALIAS + \": Finds all applications in the list of applications whose internship job titles \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"contain any of the given keywords.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: KEYWORD [ANOTHER_KEYWORD]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + APPLICATION_ALIAS + \" tester\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final ApplicationNameContainsKeyWordsPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public FindApplicationCommand(ApplicationNameContainsKeyWordsPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.updateFilteredApplicationList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setApplicationViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(Messages.MESSAGE_FIND_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            model.getFilteredApplicationListSize(), APPLICATION_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getCommandResult(model, message, TabName.APPLICATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            || (other instanceof FindApplicationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindApplicationCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 2,
      "seanjyjy": 43,
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Finds all items of a specified item type in the InternHunter to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Finds all items by name in the \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_NAME + \", \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + APPLICATION_NAME + \" or \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PROFILE_NAME + \" list that contain any of the given keywords.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: ITEM_TYPE KEYWORD [ANOTHER_KEYWORD]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Search results are returned for all items that match at least one of the given keyword(s).\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Valid ITEM_TYPEs are \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + COMPANY_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + APPLICATION_ALIAS + \"\u0027 or \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + PROFILE_ALIAS + \"\u0027.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" Google\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 22,
      "shawn-nyk": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindCompanyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyNameContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class FindCompanyCommand extends FindCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_ALIAS + \": Finds all companies in the list of companies whose names contain any of the given \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"keywords.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: KEYWORD [ANOTHER_KEYWORD]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" Google Facebook\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final CompanyNameContainsKeyWordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public FindCompanyCommand(CompanyNameContainsKeyWordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.updateFilteredCompanyList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.setCompanyViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String message \u003d String.format(Messages.MESSAGE_FIND_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                model.getFilteredCompanyListSize(), COMPANY_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, message, TabName.COMPANY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof FindCompanyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCompanyCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "shawn-nyk": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Finds and lists all profileItem in Internhunter whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class FindProfileCommand extends FindCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PROFILE_ALIAS + \": Finds all profile items whose titles contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Parameters: KEYWORD [ANOTHER_KEYWORD]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PROFILE_ALIAS + \" competition html hackathon\" + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final ProfileItemContainsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public FindProfileCommand(ProfileItemContainsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.updateFilteredProfileList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.setProfileViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String message \u003d String.format(Messages.MESSAGE_FIND_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                model.getFilteredProfileListSize(), PROFILE_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return getCommandResult(model, message, TabName.PROFILE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof FindProfileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindProfileCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Lists all application items in the InternHunter to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ListApplicationCommand extends ListCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d String.format(MESSAGE_LIST_SUCCESS, APPLICATION_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.updateFilteredApplicationList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setApplicationViewIndex(Index.fromOneBased(1)); // reset to zero for consistency"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getCommandResult(model, MESSAGE_SUCCESS, TabName.APPLICATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Lists all items of a specified item type in the InternHunter to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        + \": Lists out all the items in the \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        + COMPANY_NAME + \", \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + APPLICATION_NAME + \" or \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        + PROFILE_NAME + \" list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        + \"Parameters: ITEM_TYPE\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + COMPANY_ALIAS + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String EXCESS_MESSAGE \u003d \"Note that there should not be any inputs after the ITEM_TYPE\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "seanjyjy": 20,
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListCompanyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ListCompanyCommand extends ListCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d String.format(MESSAGE_LIST_SUCCESS, COMPANY_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.updateFilteredCompanyList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.setCompanyViewIndex(Index.fromOneBased(1)); // reset to zero for consistency"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, MESSAGE_SUCCESS, TabName.COMPANY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Lists all profile items in the InternHunter to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ListProfileCommand extends ListCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d String.format(MESSAGE_LIST_SUCCESS, PROFILE_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.updateFilteredProfileList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.setProfileViewIndex(Index.fromOneBased(1)); // reset to zero for consistency"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return getCommandResult(model, MESSAGE_SUCCESS, TabName.PROFILE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/util/CommandUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.tabs.TabName.APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.tabs.TabName.COMPANY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.tabs.TabName.PROFILE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates common / shared execution processes between commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public abstract class CommandUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static CompanyItem getCompany(Model model, Index companyIndex) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cCompanyItem\u003e lastShownList \u003d model.getFilteredCompanyList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (companyIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, COMPANY_NAME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return model.getCompanyItemFromFilteredList(companyIndex.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static ApplicationItem getApplication(Model model, Index applicationIndex) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cApplicationItem\u003e lastShownList \u003d model.getFilteredApplicationList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (applicationIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, APPLICATION_NAME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return model.getApplicationItemFromFilteredList(applicationIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static ProfileItem getProfileItem(Model model, Index profileItemIndex) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cProfileItem\u003e lastShownList \u003d model.getFilteredProfileList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (profileItemIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, PROFILE_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return model.getProfileItemFromFilteredList(profileItemIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Gets the feedback message of the operation result for display and indicates whether tabs need to be switched or"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * not."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param model Model of application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param message Feedback message of the operation result for display."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tabName The tab that is being switched to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static CommandResult getCommandResult(Model model, String message, TabName tabName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireAllNonNull(model, message, tabName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (model.getTabName() !\u003d tabName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            model.setTabName(tabName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Gets the feedback message of the operation result for display and indicates whether tabs and display view."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * need to be switched or not."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param model Model of application."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param message Feedback message of the operation result for display."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param currentTabName The current tab of the application."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param changedTabName The tab that is being switched to."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param newIndex The desired index of the tab that is being switch to."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static CommandResult getCommandResult(Model model, String message, TabName currentTabName,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName changedTabName, Index newIndex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireAllNonNull(model, message, currentTabName, changedTabName, newIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        handleDeleteDisplaySwitchIndex(model, changedTabName, newIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (currentTabName !\u003d changedTabName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            model.setTabName(changedTabName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks which tab\u0027s display needs to be switch."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param model Model of application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param changedTabName The tab that is being switched to."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param newIndex The desired index of the tab that is being switch to."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static void handleDeleteDisplaySwitchIndex(Model model, TabName changedTabName, Index newIndex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Index currentIndex;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert (changedTabName.equals(COMPANY) || changedTabName.equals(APPLICATION) || changedTabName.equals(PROFILE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (changedTabName) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            currentIndex \u003d model.getCompanyViewIndex();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            handleViewIndex(model::setCompanyViewIndex, currentIndex, newIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            currentIndex \u003d model.getApplicationViewIndex();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            handleViewIndex(model::setApplicationViewIndex, currentIndex, newIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            currentIndex \u003d model.getProfileViewIndex();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            handleViewIndex(model::setProfileViewIndex, currentIndex, newIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks whether there is a need for a switch in the view index."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param changeViewIndex Handles the switching of the view index in the respective tab."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param currentIndex The current view index in the respective tab."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param newIndex The new view index to be switched to in the respective tab."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static void handleViewIndex(Consumer\u003cIndex\u003e changeViewIndex, Index currentIndex, Index newIndex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (currentIndex.getOneBased() \u003e\u003d newIndex.getOneBased()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // currentIndex have to minus 1"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int shiftIndex \u003d currentIndex.getOneBased();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (shiftIndex - 1 \u003e 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                changeViewIndex.accept(Index.fromOneBased(shiftIndex - 1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 3,
      "shawn-nyk": 62,
      "seanjyjy": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VIEW_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ViewApplicationCommand extends ViewCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" \" + APPLICATION_ALIAS + \": Views an \" + APPLICATION_NAME + \" in \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + APPLICATION_ALIAS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \" 2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String messageViewSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String messageAlreadyViewing;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ViewApplicationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.messageViewSuccess \u003d String.format(MESSAGE_VIEW_SUCCESS, APPLICATION_NAME, targetIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.messageAlreadyViewing \u003d String.format(MESSAGE_ALREADY_VIEWING, APPLICATION_NAME, targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes the view application command and returns the result message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This command also auto-switches the user to the application tab."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cApplicationItem\u003e lastShownList \u003d model.getFilteredApplicationList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, APPLICATION_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (model.getTabName() \u003d\u003d TabName.APPLICATION \u0026\u0026 model.getApplicationViewIndex().equals(targetIndex)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new CommandResult(messageAlreadyViewing, false, false , false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setApplicationViewIndex(targetIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, messageViewSuccess, TabName.APPLICATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof ViewApplicationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewApplicationCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 50,
      "orzymandias": 6,
      "shawn-nyk": 13,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ITEM_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Views a \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_NAME + \", \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + APPLICATION_NAME + \", or \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PROFILE_ITEM_NAME"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" in InternHunter.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: ITEM_TYPE INDEX\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Valid ITEM_TYPEs are \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + COMPANY_ALIAS + \"\u0027, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + APPLICATION_ALIAS + \"\u0027 or \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"\u0027\" + PROFILE_ALIAS + \"\u0027. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" 3\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_ALREADY_VIEWING \u003d \"Already viewing %1$s %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 11,
      "shawn-nyk": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewCompanyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VIEW_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ViewCompanyCommand extends ViewCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" \" + COMPANY_ALIAS + \": Views a \" + COMPANY_NAME + \" in \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + COMPANY_ALIAS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String messageViewSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String messageAlreadyViewing;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn) */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ViewCompanyCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.messageViewSuccess \u003d String.format(MESSAGE_VIEW_SUCCESS, COMPANY_NAME, targetIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.messageAlreadyViewing \u003d String.format(MESSAGE_ALREADY_VIEWING, COMPANY_NAME, targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the view company command and returns the result message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * This command also auto-switches the user to the company tab."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cCompanyItem\u003e lastShownList \u003d model.getFilteredCompanyList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, COMPANY_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (model.getTabName() \u003d\u003d TabName.COMPANY \u0026\u0026 model.getCompanyViewIndex().equals(targetIndex)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new CommandResult(messageAlreadyViewing, false, false , false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setCompanyViewIndex(targetIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, messageViewSuccess, TabName.COMPANY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof ViewCompanyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewCompanyCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 69,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VIEW_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ITEM_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ViewProfileCommand extends ViewCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" \" + PROFILE_ALIAS + \": Views a \" + PROFILE_ITEM_NAME + \" in \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PROFILE_ALIAS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" 5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String messageViewSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String messageAlreadyViewing;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ViewProfileCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.messageViewSuccess \u003d String.format(MESSAGE_VIEW_SUCCESS, PROFILE_ITEM_NAME, targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.messageAlreadyViewing \u003d String.format(MESSAGE_ALREADY_VIEWING, PROFILE_ITEM_NAME, targetIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Executes the view profile command and returns the result message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * This command also auto-switches the user to the profile tab."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cProfileItem\u003e lastShownList \u003d model.getFilteredProfileList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, PROFILE_NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (model.getTabName() \u003d\u003d TabName.PROFILE \u0026\u0026 model.getProfileViewIndex().equals(targetIndex)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new CommandResult(messageAlreadyViewing, false, false , false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setProfileViewIndex(targetIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, messageViewSuccess, TabName.PROFILE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof ViewProfileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewProfileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 55,
      "shawn-nyk": 15,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MainParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.add.AddCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.delete.DeleteCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.edit.EditCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.find.FindCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.list.ListCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.switchparser.SwitchCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.view.ViewCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String COMMAND_WORD \u003d \"commandWord\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String ARGUMENTS \u003d \"arguments\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case MatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new MatchCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15,
      "orzymandias": 5,
      "-": 56,
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param userInput User input string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Command of type T."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform to the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddApplicationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.parseIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.add.AddApplicationCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.ApplicationParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new AddApplicationCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddApplicationCommandParser implements Parser\u003cAddApplicationCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddApplicationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_STATUS, PREFIX_STATUS_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    AddApplicationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index companyIndex \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index internshipIndex \u003d parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Status status \u003d getStatus(argMultimap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StatusDate statusDate \u003d getStatusDate(argMultimap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new AddApplicationCommand(companyIndex, internshipIndex, status, statusDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the status from the user input. Returns default Applied status if not provided by user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param argMultimap ArgumentMultimap."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Status for this application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Status getStatus(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ApplicationParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.APPLIED;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the status from the user input. Returns default today\u0027s date and 2359 if not provided by user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param argMultimap ArgumentMultimap."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return StatusDate for this application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code StatusDate} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private StatusDate getStatusDate(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS_DATE).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ApplicationParserUtil.parseStatusDate(argMultimap.getValue(PREFIX_STATUS_DATE).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new StatusDate(DateUtil.getTodayDate());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 77,
      "orzymandias": 1,
      "shawn-nyk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getCommandDetails;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getItemType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.add.AddCommandAbstract;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments for item type and returns AddCommandAbstract Object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommandAbstract\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments for the item type"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conformClear the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddCommandAbstract parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String itemType \u003d getItemType(args, AddCommandAbstract.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String commandDetails \u003d getCommandDetails(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddCompanyCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddInternshipCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddApplicationCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddProfileCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 28,
      "orzymandias": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddCompanyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_INDUSTRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.add.AddCompanyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.CompanyParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Parses input arguments and creates a new AddCompanyCommand object. todo javadocs (shawn)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddCompanyCommandParser implements Parser\u003cAddCompanyCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCompanyCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * and returns an AddCompanyCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddCompanyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMPANY_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        PREFIX_INDUSTRY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(false, argMultimap, PREFIX_COMPANY_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCompanyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyName companyName \u003d CompanyParserUtil.parseCompanyName(argMultimap.getValue(PREFIX_COMPANY_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Phone phone \u003d CompanyParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Email email \u003d CompanyParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Address address \u003d CompanyParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Set\u003cIndustry\u003e industryList \u003d CompanyParserUtil.parseIndustries(argMultimap.getAllValues(PREFIX_INDUSTRY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem company \u003d new CompanyItem(companyName, phone, email, address, industryList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new AddCompanyCommand(company);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "orzymandias": 1,
      "shawn-nyk": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddInternshipCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_REQUIREMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_WAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.InternshipParserUtil.parseJobTitle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.InternshipParserUtil.parseRequirements;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.InternshipParserUtil.parseWage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.InternshipParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Parses input arguments and creates a new AddApplicationCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddInternshipCommandParser implements Parser\u003cAddInternshipCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddInternshipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_JOB_TITLE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                PREFIX_PERIOD, PREFIX_WAGE, PREFIX_REQUIREMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // Todo: Wage will be compulsory until its status can be resolved"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap, PREFIX_JOB_TITLE, PREFIX_WAGE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInternshipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index companyIndex \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        JobTitle jobTitle \u003d parseJobTitle(argMultimap.getValue(PREFIX_JOB_TITLE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Wage wage \u003d parseWage(argMultimap.getValue(PREFIX_WAGE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Period period \u003d getPeriod(argMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Set\u003cRequirement\u003e requirements \u003d parseRequirements(argMultimap.getAllValues(PREFIX_REQUIREMENT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new AddInternshipCommand(companyIndex, jobTitle, wage, period, requirements);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the period from the user input. Returns default \"-\" if unspecified."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param argMultimap ArgumentMultimap."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Period for this application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code Period} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Period getPeriod(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return InternshipParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new Period(\"-\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15,
      "orzymandias": 54,
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddProfileCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddProfileCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.ProfileParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Parses input arguments and creates a new AddProfileCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddProfileCommandParser implements Parser\u003cAddProfileCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProfileCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns an AddProfileCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CATEGORY, PREFIX_DESCRIPTOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(false, argMultimap, PREFIX_TITLE, PREFIX_CATEGORY)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title title \u003d ProfileParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory category \u003d ProfileParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Set\u003cDescriptor\u003e descriptorSet \u003d ProfileParserUtil"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .parseDescriptors(argMultimap.getAllValues(PREFIX_DESCRIPTOR));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem profileItem \u003d new ProfileItem(title, category, descriptorSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new AddProfileCommand(profileItem);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "orzymandias": 51,
      "shawn-nyk": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/ApplicationCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Prefix PREFIX_STATUS_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/CompanyCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_COMPANY_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_INDUSTRY \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/InternshipCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class InternshipCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_JOB_TITLE \u003d new Prefix(\"j/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_WAGE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_REQUIREMENT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/ItemCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ItemCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /* Todo: delete Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /* Common Prefix definitions */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/ProfileCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTOR \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/delete/DeleteApplicationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteApplicationCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.util.GeneralParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new DeleteApplicationCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteApplicationCommandParser implements Parser\u003cDeleteApplicationCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteApplicationCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and returns a DeleteApplicationCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Arguments to be parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return DeleteApplicationCommand object for execution"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteApplicationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, DeleteApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index index \u003d GeneralParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new DeleteApplicationCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/delete/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getCommandDetails;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getItemType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommandAbstract;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommandAbstract\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public DeleteCommandAbstract parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String itemType \u003d getItemType(args, DeleteCommandAbstract.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String commandDetails \u003d getCommandDetails(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new DeleteCompanyCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        case INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new DeleteInternshipCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new DeleteApplicationCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new DeleteProfileCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Invalid item type"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13,
      "orzymandias": 17,
      "-": 14,
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/delete/DeleteCompanyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCompanyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.GeneralParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Parses input arguments and creates a new DeleteCompanyCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeleteCompanyCommandParser implements Parser\u003cDeleteCompanyCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCompanyCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * and returns a DeleteCompanyCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param args Arguments to be parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return DeleteCompanyCommand object for execution"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeleteCompanyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, DeleteCompanyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index index \u003d GeneralParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new DeleteCompanyCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 5,
      "shawn-nyk": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/delete/DeleteInternshipCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.parseIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteInternshipCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new DeleteInternshipCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteInternshipCommandParser implements Parser\u003cDeleteInternshipCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * and returns an AddCommand object for execution. todo javadocs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteInternshipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    DeleteInternshipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index companyIndex \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index internshipIndex \u003d parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new DeleteInternshipCommand(companyIndex, internshipIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 39,
      "shawn-nyk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/delete/DeleteProfileCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteProfileCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.GeneralParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Parses input arguments and creates a new DeleteProfileCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class DeleteProfileCommandParser implements Parser\u003cDeleteProfileCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteProfileItemCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns a DeleteProfileItemCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param args Arguments to be parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return DeleteProfileCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public DeleteProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, DeleteProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index index \u003d GeneralParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new DeleteProfileCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/edit/EditApplicationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.edit.EditCommandAbstract.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.ApplicationParserUtil.parseStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.ApplicationParserUtil.parseStatusDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.edit.EditApplicationCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.edit.EditApplicationCommand.EditApplicationDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new EditApplicationCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EditApplicationCommandParser implements Parser\u003cEditApplicationCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditApplicationCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and returns an EditApplicationCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STATUS, PREFIX_STATUS_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    EditApplicationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index index \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationDescriptor editApplicationDescriptor \u003d new EditApplicationDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String inputStatus \u003d argMultimap.getValue(PREFIX_STATUS).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Status editedStatus \u003d parseStatus(inputStatus);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            editApplicationDescriptor.setStatus(editedStatus);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String inputStatusDate \u003d argMultimap.getValue(PREFIX_STATUS_DATE).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            StatusDate editedStatusDate \u003d parseStatusDate(inputStatusDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            editApplicationDescriptor.setStatusDate(editedStatusDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!editApplicationDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new EditApplicationCommand(index, editApplicationDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 54,
      "shawn-nyk": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/edit/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getCommandDetails;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getItemType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommandAbstract;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommandAbstract\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns a EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditCommandAbstract parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String itemType \u003d getItemType(args, EditCommandAbstract.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String commandDetails \u003d getCommandDetails(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new EditCompanyCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new EditInternshipCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new EditApplicationCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new EditProfileCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            // Invalid item type"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 27,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/edit/EditCompanyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.edit.EditCommandAbstract.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.edit.EditCompanyCommand.EditCompanyDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_INDUSTRY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommandAbstract;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.edit.EditCompanyCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.util.CompanyParserUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EditCompanyCommandParser implements Parser\u003cEditCommandAbstract\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public EditCompanyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_COMPANY_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_INDUSTRY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    EditCompanyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index index \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        EditCompanyDescriptor editCompanyDescriptor \u003d new EditCompanyDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            editCompanyDescriptor.setName(CompanyParserUtil.parseCompanyName(argMultimap.getValue(PREFIX_COMPANY_NAME)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            editCompanyDescriptor.setPhone(CompanyParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            editCompanyDescriptor.setEmail(CompanyParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            editCompanyDescriptor.setAddress(CompanyParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        parseIndustriesForEdit(argMultimap.getAllValues(PREFIX_INDUSTRY))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .ifPresent(editCompanyDescriptor::setIndustries);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!editCompanyDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new EditCompanyCommand(index, editCompanyDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Optional\u003cSet\u003cIndustry\u003e\u003e parseIndustriesForEdit(Collection\u003cString\u003e industries) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assert industries !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (industries.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Collection\u003cString\u003e industrySet \u003d industries.size() \u003d\u003d 1 \u0026\u0026 industries.contains(\"\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                : industries;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return Optional.of(CompanyParserUtil.parseIndustries(industrySet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/edit/EditInternshipCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.edit.EditCommandAbstract.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_REQUIREMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_WAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommandAbstract;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.edit.EditInternshipCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.edit.EditInternshipCommand.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.util.GeneralParserUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.util.InternshipParserUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * todo javadocs (shawn)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EditInternshipCommandParser implements Parser\u003cEditCommandAbstract\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * todo javadocs (shawn)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public EditInternshipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_JOB_TITLE, PREFIX_WAGE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                PREFIX_PERIOD, PREFIX_REQUIREMENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    EditInternshipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index companyIndex \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index internshipIndex \u003d GeneralParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        EditInternshipDescriptor editInternshipDescriptor \u003d new EditInternshipDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_JOB_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            editInternshipDescriptor.setJobTitle(InternshipParserUtil.parseJobTitle(argMultimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    .getValue(PREFIX_JOB_TITLE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WAGE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            editInternshipDescriptor.setWage(InternshipParserUtil.parseWage(argMultimap.getValue(PREFIX_WAGE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            editInternshipDescriptor.setPeriod(InternshipParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        parseRequirementsForEdit(argMultimap.getAllValues(PREFIX_REQUIREMENT))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .ifPresent(editInternshipDescriptor::setRequirements);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!editInternshipDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new EditInternshipCommand(companyIndex, internshipIndex, editInternshipDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Optional\u003cSet\u003cRequirement\u003e\u003e parseRequirementsForEdit(Collection\u003cString\u003e requirements)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assert requirements !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (requirements.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Collection\u003cString\u003e requirementSet \u003d requirements.size() \u003d\u003d 1 \u0026\u0026 requirements.contains(\"\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                : requirements;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return Optional.of(InternshipParserUtil.parseRequirements(requirementSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 6,
      "shawn-nyk": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/edit/EditProfileCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.edit.EditCommandAbstract.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.edit.EditProfileCommand.EditProfileItemDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.ProfileParserUtil.parseCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.ProfileParserUtil.parseDescriptors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.ProfileParserUtil.parseTitle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditProfileCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Parses input arguments and creates a new EditProfileCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class EditProfileCommandParser implements Parser\u003cEditProfileCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditProfileCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns an EditProfileCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                PREFIX_DESCRIPTOR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    EditProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index index \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileItemDescriptor editProfileItemDescriptor \u003d new EditProfileItemDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // Update the setters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            editProfileItemDescriptor.setTitle(parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            editProfileItemDescriptor.setProfileItemCategory(parseCategory(argMultimap.getValue(PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        parseDescriptorsForEdit(argMultimap.getAllValues(PREFIX_DESCRIPTOR))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .ifPresent(editProfileItemDescriptor::setDescriptors);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!editProfileItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new EditProfileCommand(index, editProfileItemDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e descriptors} into a {@code Set\u003cDescriptor\u003e} if {@code descriptors} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * If {@code descriptors} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * {@code Set\u003cDescriptor\u003e} containing zero descriptors."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if descriptors specified is not a valid descriptor."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Optional\u003cSet\u003cDescriptor\u003e\u003e parseDescriptorsForEdit(Collection\u003cString\u003e descriptors) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assert descriptors !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (descriptors.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Collection\u003cString\u003e descriptorSet \u003d descriptors.size() \u003d\u003d 1 \u0026\u0026 descriptors.contains(\"\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                : descriptors;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return Optional.of(parseDescriptors(descriptorSet));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 76,
      "shawn-nyk": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/find/FindApplicationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getTrimmedArgsKeywords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindApplicationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationNameContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindApplicationCommandParser implements Parser\u003cFindApplicationCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public FindApplicationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, FindApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] jobTitleKeywords \u003d getTrimmedArgsKeywords(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ApplicationNameContainsKeyWordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            new ApplicationNameContainsKeyWordsPredicate(Arrays.asList(jobTitleKeywords));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new FindApplicationCommand(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/find/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getCommandDetails;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getItemType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String itemType \u003d getItemType(args, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String commandDetails \u003d getCommandDetails(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new FindCompanyCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new FindApplicationCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new FindProfileCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // Invalid item type"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "seanjyjy": 41,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/find/FindCompanyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getTrimmedArgsKeywords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.find.FindCompanyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyNameContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class FindCompanyCommandParser implements Parser\u003cFindCompanyCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public FindCompanyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, FindCompanyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String[] companyNameKeywords \u003d getTrimmedArgsKeywords(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyNameContainsKeyWordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                new CompanyNameContainsKeyWordsPredicate(Arrays.asList(companyNameKeywords));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new FindCompanyCommand(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/find/FindProfileCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getTrimmedArgsKeywords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.find.FindProfileCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class FindProfileCommandParser implements Parser\u003cFindProfileCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public FindProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, FindProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String[] profileItemTitleKeywords \u003d getTrimmedArgsKeywords(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new ProfileItemContainsKeywordPredicate(Arrays.asList(profileItemTitleKeywords));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new FindProfileCommand(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/list/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getItemType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListApplicationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.list.ListCompanyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.list.ListProfileCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String itemType \u003d getItemType(args, ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkIfHaveExcessMessage(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new ListCompanyCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ListApplicationCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new ListProfileCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // Invalid item type"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo javadocs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void checkIfHaveExcessMessage(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // allows white space behind the list ITEM TYPE."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // Strictly no other extra words behind list ITEM TYPE."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] argsArray \u003d args.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (argsArray.length \u003e 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.EXCESS_MESSAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 2,
      "seanjyjy": 54,
      "shawn-nyk": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/switchparser/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.switchparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.util.TabParserUtil.parseTab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * and returns a SwitchCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName tabName \u003d parseTab(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new SwitchCommand(tabName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ApplicationParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * ApplicationParserUtil class which parses all the fields in an ApplicationItem."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class ApplicationParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses a {@code String status} into a {@code Status}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Status.isValidStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Status.valueOf(trimmedStatus.toUpperCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses a {@code String statusDate} into a {@code StatusDate}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code StatusDate} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static StatusDate parseStatusDate(String statusDate) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(statusDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String trimmedStatusDate \u003d statusDate.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!StatusDate.isValidDate(trimmedStatusDate)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(StatusDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDateTime localDateTime \u003d DateUtil.convertToDateTime(trimmedStatusDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new StatusDate(localDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 50,
      "orzymandias": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/CompanyParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes. todo javadocs (shawn)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static CompanyName parseCompanyName(String companyName) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(companyName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedName \u003d companyName.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!CompanyName.isValidCompanyName(trimmedName)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new CompanyName(trimmedName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Industry parseIndustry(String industry) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(industry);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedIndustry \u003d industry.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!Industry.isValidIndustryName(trimmedIndustry)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(Industry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new Industry(trimmedIndustry);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Set\u003cIndustry\u003e parseIndustries(Collection\u003cString\u003e industries) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(industries);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        final Set\u003cIndustry\u003e industrySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (String industryName : industries) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            industrySet.add(parseIndustry(industryName));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return industrySet;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "-": 65,
      "shawn-nyk": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/GeneralParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the general parsing of all commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * TODO: Javadocs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class GeneralParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int ITEM_TYPE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int COMMAND_DETAILS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int NUMBER_OF_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Checks if the arguments provided by the user are valid. Arguments are valid if prefixes are all present and a"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * preamble is present when {@code isPreambleNeeded} is true, or that a preamble is absent when"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code isPreambleNeeded} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param isPreambleNeeded Indicates if there should be a preamble or not."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param argumentMultimap Argument multimap."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param prefixes Prefixes required in the multimap."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if the prefixes are valid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean argumentsAreValid(boolean isPreambleNeeded, ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                                            Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean prefixesArePresent \u003d arePrefixesPresent(argumentMultimap, prefixes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean preambleIsEmpty \u003d isPreambleEmpty(argumentMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return prefixesArePresent \u0026\u0026 (preambleIsEmpty !\u003d isPreambleNeeded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the preamble of this argument multimap is empty."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param argumentMultimap Argument multimap."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if preamble of this argument multimap is empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean isPreambleEmpty(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return argumentMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static Index getIndexInPreamble(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if item type is present. If item type is not present, then throw ParseException that displays"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * the correct command format to user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Arguments provided by the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param messageUsage Correct message format to display."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Item type, if it exists."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException If item type is not provided."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String getItemType(String args, String messageUsage) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] argumentTypes \u003d getArgumentsArr(args);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String itemType \u003d argumentTypes[ITEM_TYPE_INDEX];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (itemType.isBlank()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return itemType;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the command details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Arguments provided by the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Details of the command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String getCommandDetails(String args) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] argumentTypes \u003d getArgumentsArr(args);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String dummy \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argumentTypes.length \u003c NUMBER_OF_ARGUMENTS) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return dummy; // if the user only entered the command word and the item type (did not enter details),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // then provide this dummy string so that the relevant parser will show its error message."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return \" \" + argumentTypes[COMMAND_DETAILS_INDEX];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String[] getArgumentsArr(String args) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return args.strip().split(\" \", NUMBER_OF_ARGUMENTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo javadocs"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkCommandDetailsIsNotBlank(String commandDetails, String message) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (commandDetails.isBlank()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo javadocs"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static String[] getTrimmedArgsKeywords(String args) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 107,
      "shawn-nyk": 8,
      "seanjyjy": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/InternshipParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Contains utility methods used for parsing Strings to fields in a Internship Item."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class InternshipParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"Checks for status validity failed\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String title} into a {@code InternshipTitle}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static JobTitle parseJobTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!JobTitle.isValidJobTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(JobTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new JobTitle(trimmedTitle);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String period} into a {@code Period}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code period} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Period parsePeriod(String period) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedPeriod \u003d period.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Period.isValidPeriod(trimmedPeriod)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(Period.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new Period(trimmedPeriod);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String wage} into a {@code Wage}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code wage} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Wage parseWage(String wage) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(wage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedWage \u003d wage.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Wage.isValidWage(trimmedWage)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(Wage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new Wage(trimmedWage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String requirement} into a {@code Requirement}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code requirement} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Requirement parseRequirement(String requirement) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedRequirement \u003d requirement.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Requirement.isValidRequirement(trimmedRequirement)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(Requirement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new Requirement(trimmedRequirement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e requirements} into a {@code Set\u003cRequirement\u003e}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Set\u003cRequirement\u003e parseRequirements(Collection\u003cString\u003e requirements) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(requirements);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        final Set\u003cRequirement\u003e requirementSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        for (String requirement : requirements) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            requirementSet.add(parseRequirement(requirement));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return requirementSet;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "orzymandias": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ProfileParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Contains utility methods used for parsing Strings to fields in a ProfileItem."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final String INVALID_PROFILE_CATEGORY_MESSAGE \u003d \"Invalid profile item category\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Title parseTitle(String name) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedTitle \u003d name.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!Title.isValidAlphaNumericWord(trimmedTitle)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String category} into a {@code ProfileItemCategory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param category category in String form."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return ProfileItemCategory Object parsed from String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if not a valid profileItemCategory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static ProfileItemCategory parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!ProfileItemCategory.isValidProfileItemCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(ProfileItemCategory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return ProfileItemCategory.valueOf(trimmedCategory.toUpperCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String descriptor} into a {@code Descriptor}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code descriptor} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Descriptor parseDescriptor(String descriptor) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedDescriptor \u003d descriptor.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!Descriptor.isValidDescriptor(trimmedDescriptor)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new Descriptor(descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e descriptor} into a {@code Set\u003cDescriptor\u003e}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException for invalid descriptors in descriptorSet."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Set\u003cDescriptor\u003e parseDescriptors(Collection\u003cString\u003e descriptors) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(descriptors);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        final Set\u003cDescriptor\u003e descriptorSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        for (String descriptor : descriptors) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            descriptorSet.add(parseDescriptor(descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return descriptorSet;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/TabParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.util.TabUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TabParserUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Parses {@code selectedTab} into a {@code TabName} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws ParseException if the specified selectedTab is invalid (not com or int or me)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TabName parseTab(String selectedTab) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(selectedTab);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String tab \u003d selectedTab.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (tab.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] tabArray \u003d tab.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (tabArray.length \u003e 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(SwitchCommand.EXCESS_MESSAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return TabUtil.getSwitchTabName(tab);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/view/ViewApplicationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.view.ViewApplicationCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.util.GeneralParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new ViewApplicationCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ViewApplicationCommandParser implements Parser\u003cViewApplicationCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewApplicationCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and returns a ViewApplicationCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Arguments to be parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return ViewApplicationCommand object for execution"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ViewApplicationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, ViewApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index index \u003d GeneralParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new ViewApplicationCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/view/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getCommandDetails;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getItemType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String MESSAGE_INVALID_ITEM_TYPE \u003d \"Item type has to be either \u0027com\u0027, \u0027app\u0027 or \u0027me\u0027\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String itemType \u003d getItemType(args, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String commandDetails \u003d getCommandDetails(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new ViewCompanyCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ViewApplicationCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new ViewProfileCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // Invalid item type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 36,
      "orzymandias": 1,
      "shawn-nyk": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/view/ViewCompanyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.argumentsAreValid;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.getIndexInPreamble;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.view.ViewCompanyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Parses input arguments and creates a new ViewCompanyCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ViewCompanyCommandParser implements Parser\u003cViewCompanyCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCompanyCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * and returns a ViewCompanyCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param args Arguments to be parsed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return ViewCompanyCommand object for execution"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ViewCompanyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!argumentsAreValid(true, argMultimap)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCompanyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Index index \u003d getIndexInPreamble(argMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new ViewCompanyCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/view/ViewProfileCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.GeneralParserUtil.checkCommandDetailsIsNotBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.view.ViewProfileCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.GeneralParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Parses input arguments and creates a new ViewProfileCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ViewProfileCommandParser implements Parser\u003cViewProfileCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewProfileCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns a ViewProfileCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param args Arguments to be parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return ViewProfileCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ViewProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        checkCommandDetailsIsNotBlank(args, ViewProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index index \u003d GeneralParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new ViewProfileCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FilterableItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public interface FilterableItemList\u003cT extends Item\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Replaces item list data with the data in {@code itemList}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void setItemList(ItemList\u003cT\u003e itemList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the ItemList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ItemList\u003cT\u003e getUnfilteredItemList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns true if a Item with the same identity as {@code Item} exists in the item list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    boolean hasItem(T item);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Deletes the given Item."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The Item must exist in the item list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void deleteItem(T target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deletes the given Item according to the weaker notion of equality."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The Item may not necessarily exist in the item list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    void deleteSameItem(T target);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Adds the given Item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * {@code Item} must not already exist in the item list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void addItem(T item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Replaces the given Item {@code target} with {@code editedItem}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The Item identity of {@code editedItem} must not be the same as another existing Item in the item list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void setItem(T target, T editedItem);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns an unmodifiable view of the filtered Item list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ObservableList\u003cT\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /** Returns an Item from the filtered Item list */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    T getItemFromFilteredItemList(int index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Returns the observable Item List */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    ObservableList\u003cT\u003e getItemList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Updates the filter of the filtered Item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void updateFilteredItemList(Predicate\u003c? super T\u003e predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** Retrieves the size of the list. */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    int getSize();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19,
      "ZoroarkDarkrai": 50,
      "orzymandias": 4,
      "seanjyjy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class ItemListManager\u003cT extends Item\u003e implements FilterableItemList\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private ItemList\u003cT\u003e itemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final FilteredList\u003cT\u003e filteredItems;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Initializes ItemListManager with the given itemList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemList initial item list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemListManager(ItemList\u003cT\u003e itemList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.itemList \u003d itemList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Creates an empty item list manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemListManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.itemList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setItemList(ItemList\u003cT\u003e itemList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.itemList.resetData(itemList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemList\u003cT\u003e getUnfilteredItemList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ObservableList\u003cT\u003e getItemList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return itemList.getItemList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public boolean hasItem(T item) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList.hasItem(item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void deleteItem(T target) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        itemList.removeItem(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void deleteSameItem(T target) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        itemList.removeSameItem(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void addItem(T item) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        itemList.addItem(item);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        itemList.setItem(target, editedItem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * {@code versionedItemList}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ObservableList\u003cT\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return filteredItems;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the size of the filterable item list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return the size of the filterable item list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return filteredItems.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns an {@code Item} from filteredItems."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param index of item to be returned."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return Item at index specified."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public T getItemFromFilteredItemList(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return filteredItems.get(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003c? super T\u003e predicate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!(obj instanceof ItemListManager)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemListManager other \u003d (ItemListManager) obj;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList.equals(other.itemList)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 filteredItems.equals(other.filteredItems);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 11,
      "ZoroarkDarkrai": 102,
      "orzymandias": 11,
      "seanjyjy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the person list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */ //todo: remove when possible"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    FilterableItemList\u003cPerson\u003e getAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the company list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */ // todo: remove if ultimately not needed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    FilterableItemList\u003cCompanyItem\u003e getCompanyList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the filtered company list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    ObservableList\u003cCompanyItem\u003e getFilteredCompanyList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the unfiltered company list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    ItemList\u003cCompanyItem\u003e getUnfilteredCompanyList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the company item list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    ObservableList\u003cCompanyItem\u003e getCompanyItemList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a Company with the same identity as {@code companyItem} exists in the company list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    boolean hasCompany(CompanyItem companyItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Deletes the given Company."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The Company must exist in the company list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void deleteCompany(CompanyItem target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Adds the given Company."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code companyItem} must not already exist in the company list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void addCompany(CompanyItem companyItem);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Replaces the given Company {@code target} with {@code editedCompanyItem}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code target} must exist in the company list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The Company identity of {@code editedCompanyItem} must not be the same as another existing Company in the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * company list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void setCompany(CompanyItem target, CompanyItem editedCompanyItem);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Updates the filter of the filtered Company list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void updateFilteredCompanyList(Predicate\u003c? super CompanyItem\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Replaces company list data with the data in {@code companyList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void setCompanyList(ItemList\u003cCompanyItem\u003e companyList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the application list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */ // todo: remove if ultimately not needed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    FilterableItemList\u003cApplicationItem\u003e getApplicationList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the filtered application list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    ObservableList\u003cApplicationItem\u003e getFilteredApplicationList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the unfiltered application list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    ItemList\u003cApplicationItem\u003e getUnfilteredApplicationList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if an Application with the same identity as {@code applicationItem} exists in the application list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    boolean hasApplication(ApplicationItem applicationItem);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Deletes the given Application."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The Application must exist in the application list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void deleteApplication(ApplicationItem target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Deletes the given Application according to the weaker notion of equality."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The Application may not necessarily exist in the application list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void deleteSameApplication(ApplicationItem target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Adds the given Application."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code applicationItem} must not already exist in the application list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void addApplication(ApplicationItem applicationItem);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Replaces the given Application {@code target} with {@code editedApplicationItem}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code target} must exist in the application list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The Application identity of {@code editedApplicationItem} must not be the same as another existing Application"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * in the application list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void setApplication(ApplicationItem target, ApplicationItem editedApplicationItem);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Updates the filter of the filtered Application list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void updateFilteredApplicationList(Predicate\u003c? super ApplicationItem\u003e predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Replaces application list data with the data in {@code applicationList}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void setApplicationList(ItemList\u003cApplicationItem\u003e applicationList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the profile list"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */ // todo: remove if ultimately not needed"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    FilterableItemList\u003cProfileItem\u003e getProfileList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the filtered profile list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    ObservableList\u003cProfileItem\u003e getFilteredProfileList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the unfiltered profile list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    ItemList\u003cProfileItem\u003e getUnfilteredProfileList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the profile item list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    ObservableList\u003cProfileItem\u003e getProfileItemList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a Profile item with the same identity as {@code profileItem} exists in the profile list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    boolean hasProfileItem(ProfileItem profileItem);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Deletes the given Profile item."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The Profile item must exist in the profile list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void deleteProfileItem(ProfileItem target);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Adds the given Profile item."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code profileItem} must not already exist in the profile list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void addProfileItem(ProfileItem profileItem);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Replaces the given Profile item {@code target} with {@code editedProfileItem}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * {@code target} must exist in the profile list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The Profile item identity of {@code editedProfileItem} must not be the same as another existing Profile item in"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * the profile list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void setProfileItem(ProfileItem target, ProfileItem editedProfileItem);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Updates the filter of the filtered Profile list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void updateFilteredProfileList(Predicate\u003c? super ProfileItem\u003e predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Replaces profile list data with the data in {@code profileList}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    void setProfileList(ItemList\u003cProfileItem\u003e profileList);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current tab name with {@code tabName}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setTabName(TabName tabName);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current tab name"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    TabName getTabName();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current company view index with {@code index}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setCompanyViewIndex(Index index);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current application view index with {@code index}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setApplicationViewIndex(Index index);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current profile view index with {@code index}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setProfileViewIndex(Index index);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current company view Index."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getCompanyViewIndex();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current application view Index."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getApplicationViewIndex();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current profile view Index."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getProfileViewIndex();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Gets ProfileItem from Filtered Profile list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    ProfileItem getProfileItemFromFilteredList(int index);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Gets CompanyItem from Filtered Company list."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    CompanyItem getCompanyItemFromFilteredList(int index);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Gets ApplicationItem from Filtered Application list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    ApplicationItem getApplicationItemFromFilteredList(int index);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Gets the size of the filtered company list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    int getFilteredCompanyListSize();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Gets the size of the filtered application list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    int getFilteredApplicationListSize();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Gets the size of the filtered profile list."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    int getFilteredProfileListSize();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 5,
      "ZoroarkDarkrai": 34,
      "orzymandias": 16,
      "-": 68,
      "seanjyjy": 57,
      "shawn-nyk": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.tab.Tab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.tab.TabManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.view.View;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.view.ViewManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents the in-memory model of the InternHunter app data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final FilterableItemList\u003cPerson\u003e addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final FilterableItemList\u003cCompanyItem\u003e companyList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final FilterableItemList\u003cApplicationItem\u003e applicationList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final FilterableItemList\u003cProfileItem\u003e profileList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Tab tabControl;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final View viewControl;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ModelManager("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ReadOnlyItemList\u003cPerson\u003e addressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ReadOnlyItemList\u003cCompanyItem\u003e companyList,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ReadOnlyItemList\u003cApplicationItem\u003e applicationList,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ReadOnlyItemList\u003cProfileItem\u003e profileList,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireAllNonNull(addressBook, companyList, applicationList, profileList, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                + \" and company list \" + companyList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \" and application list \" + applicationList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \" and profile list \" + profileList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.addressBook \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(addressBook));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.companyList \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(companyList));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.applicationList \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(applicationList));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileList \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(profileList));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.tabControl \u003d new TabManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.viewControl \u003d new ViewManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Models Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public FilterableItemList\u003cPerson\u003e getAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Company Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public FilterableItemList\u003cCompanyItem\u003e getCompanyList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ObservableList\u003cCompanyItem\u003e getFilteredCompanyList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyList.getFilteredItemList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getFilteredCompanyListSize() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return companyList.getSize();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ItemList\u003cCompanyItem\u003e getUnfilteredCompanyList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyList.getUnfilteredItemList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the company item list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ObservableList\u003cCompanyItem\u003e getCompanyItemList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyList.getItemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean hasCompany(CompanyItem companyItem) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyList.hasItem(companyItem);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void deleteCompany(CompanyItem target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        companyList.deleteItem(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void addCompany(CompanyItem companyItem) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        companyList.addItem(companyItem);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setCompany(CompanyItem target, CompanyItem editedCompanyItem) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        companyList.setItem(target, editedCompanyItem);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void updateFilteredCompanyList(Predicate\u003c? super CompanyItem\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        companyList.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setCompanyList(ItemList\u003cCompanyItem\u003e companyList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.companyList.setItemList(companyList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Gets CompanyItem from Filtered Company list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param index of item in filtered company list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CompanyItem getCompanyItemFromFilteredList(int index) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return companyList.getItemFromFilteredItemList(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Application Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public FilterableItemList\u003cApplicationItem\u003e getApplicationList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return applicationList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ObservableList\u003cApplicationItem\u003e getFilteredApplicationList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return applicationList.getFilteredItemList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getFilteredApplicationListSize() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return applicationList.getSize();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ItemList\u003cApplicationItem\u003e getUnfilteredApplicationList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return applicationList.getUnfilteredItemList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean hasApplication(ApplicationItem applicationItem) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return applicationList.hasItem(applicationItem);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void deleteApplication(ApplicationItem target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        applicationList.deleteItem(target);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void deleteSameApplication(ApplicationItem target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        applicationList.deleteSameItem(target);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void addApplication(ApplicationItem applicationItem) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        applicationList.addItem(applicationItem);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setApplication(ApplicationItem target, ApplicationItem editedApplicationItem) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        applicationList.setItem(target, editedApplicationItem);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void updateFilteredApplicationList(Predicate\u003c? super ApplicationItem\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        applicationList.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setApplicationList(ItemList\u003cApplicationItem\u003e applicationList) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.applicationList.setItemList(applicationList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Gets ApplicationItem from Filtered Application list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param index of item in filtered application list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ApplicationItem getApplicationItemFromFilteredList(int index) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return applicationList.getItemFromFilteredItemList(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Profile Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public FilterableItemList\u003cProfileItem\u003e getProfileList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileList;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ObservableList\u003cProfileItem\u003e getFilteredProfileList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return profileList.getFilteredItemList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getFilteredProfileListSize() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return profileList.getSize();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ItemList\u003cProfileItem\u003e getUnfilteredProfileList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return profileList.getUnfilteredItemList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the profile item list"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ObservableList\u003cProfileItem\u003e getProfileItemList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return profileList.getItemList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean hasProfileItem(ProfileItem profileItem) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return profileList.hasItem(profileItem);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void deleteProfileItem(ProfileItem target) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        profileList.deleteItem(target);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void addProfileItem(ProfileItem profileItem) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        profileList.addItem(profileItem);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setProfileItem(ProfileItem target, ProfileItem editedProfileItem) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        profileList.setItem(target, editedProfileItem);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void updateFilteredProfileList(Predicate\u003c? super ProfileItem\u003e predicate) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        profileList.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setProfileList(ItemList\u003cProfileItem\u003e profileList) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.profileList.setItemList(profileList);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Gets ProfileItem from Filtered Profile list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param index of item in filtered profile list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItem getProfileItemFromFilteredList(int index) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return profileList.getItemFromFilteredItemList(index);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tab Control Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Retrieves the current tab name."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public TabName getTabName() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return tabControl.getTabName();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Sets the current tab name with {@code tabName}."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setTabName(TabName tabName) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        tabControl.setTabName(tabName);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d View Control Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current index of company view."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getCompanyViewIndex() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return viewControl.getCompanyViewIndex();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current index of application view."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getApplicationViewIndex() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return viewControl.getApplicationViewIndex();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current index of profile view."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getProfileViewIndex() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return viewControl.getProfileViewIndex();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current company view index with {@code index}."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setCompanyViewIndex(Index index) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewControl.setCompanyViewIndex(index);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current application view index with {@code index}."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setApplicationViewIndex(Index index) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewControl.setApplicationViewIndex(index);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current profile view index with {@code index}."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setProfileViewIndex(Index index) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewControl.setProfileViewIndex(index);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 companyList.equals(other.companyList)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 applicationList.equals(other.applicationList)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 profileList.equals(other.profileList)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 tabControl.equals(other.tabControl)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 viewControl.equals(other.viewControl);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 25,
      "ZoroarkDarkrai": 31,
      "orzymandias": 30,
      "-": 115,
      "seanjyjy": 57,
      "shawn-nyk": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getApplicationItemListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getCompanyItemListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getProfileItemListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 5,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path applicationItemListFilePath \u003d Paths.get(\"data\", \"applicationitemlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path companyItemListFilePath \u003d Paths.get(\"data\", \"companyitemlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path profileItemListFilePath \u003d Paths.get(\"data\", \"profileitemlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        setApplicationItemListFilePath(newUserPrefs.getApplicationItemListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        setCompanyItemListFilePath(newUserPrefs.getCompanyItemListFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        setProfileItemListFilePath(newUserPrefs.getProfileItemListFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getApplicationItemListFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return applicationItemListFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setApplicationItemListFilePath(Path applicationItemListFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(applicationItemListFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.applicationItemListFilePath \u003d applicationItemListFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getCompanyItemListFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return companyItemListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setCompanyItemListFilePath(Path companyItemListFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(companyItemListFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyItemListFilePath \u003d companyItemListFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getProfileItemListFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileItemListFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setProfileItemListFilePath(Path profileItemListFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(profileItemListFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileItemListFilePath \u003d profileItemListFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 applicationItemListFilePath.equals(o.applicationItemListFilePath)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 companyItemListFilePath.equals(o.companyItemListFilePath)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 profileItemListFilePath.equals(o.profileItemListFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return Objects.hash(guiSettings, applicationItemListFilePath, companyItemListFilePath, profileItemListFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return \"Gui Settings : \" + guiSettings"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \"\\nLocal application item list data file location : \" + applicationItemListFilePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \"\\nLocal company item list data file location : \" + companyItemListFilePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \"\\nLocal profile item list data file location : \" + profileItemListFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 43,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/application/ApplicationItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ApplicationItemUtil.DATE_OUTPUT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ApplicationItemUtil.STATUS_OUTPUT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.DATE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.STATUS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an ApplicationItem in the InternHunter application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationItem extends Item {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final InternshipItem internshipItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final StatusDate statusDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param internshipItem Internship item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param status Status."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate Status date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ApplicationItem(InternshipItem internshipItem, Status status, StatusDate statusDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(internshipItem, status, statusDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipItem \u003d internshipItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an application item using the internship item."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructor is used to match internships with their application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param internshipItem Internship item."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ApplicationItem(InternshipItem internshipItem) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(internshipItem);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipItem \u003d internshipItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.status \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d new StatusDate(LocalDateTime.now());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the InternshipItem of this ApplicationItem."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return InternshipItem of this ApplicationItem."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItem getInternshipItem() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internshipItem;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Retrieves the JobTitle of the InternshipItem of this ApplicationItem."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return InternshipItem of this ApplicationItem."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public JobTitle getJobTitleOfInternshipItem() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return internshipItem.getJobTitle();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the status of this ApplicationItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Status of this ApplicationItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the status in string representation."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Status in string representation."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getStatusString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return status.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the status date of this ApplicationItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Status date of this ApplicationItem."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public StatusDate getStatusDate() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return statusDate;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the status date in string representation."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Status date in string representation."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getStatusDateString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return statusDate.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the internship job title in string representation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Internship job title in string representation."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getInternshipJobTitleValue() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return internshipItem.getJobTitleValue();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the name of the ApplicationItem."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return ApplicationItem name."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return APPLICATION_NAME;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Mapping of field names to fields for the ApplicationItem object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d internshipItem.getMapping();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(STATUS_DISPLAY_NAME, status);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(DATE_DISPLAY_NAME, statusDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both Applications have the {@code InternshipItem}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a weaker notion of equality between two ApplicationItem objects."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherItem Other ApplicationItem to compare to."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if the 2 Applications have the same identity field."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(otherItem instanceof ApplicationItem)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem otherApplication \u003d (ApplicationItem) otherItem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherApplication.getInternshipItem().equals(getInternshipItem());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both ApplicationItems have the same data fields."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a stronger notion of equality between two ApplicationItem objects."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param other Object object to compare to."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other ApplicationItem object has the same identity and data fields as this one."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof ApplicationItem)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem otherApplication \u003d (ApplicationItem) other;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherApplication.getInternshipItem().equals(getInternshipItem())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherApplication.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherApplication.getStatusDate().equals(getStatusDate());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the hashcode of this ApplicationItem object, which is the hashcode of its fields."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Hashcode of this ApplicationItem object."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Objects.hash(internshipItem, status, statusDate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the string representation of this ApplicationItem object."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of this ApplicationItem object."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(getInternshipItem())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(STATUS_OUTPUT_NAME)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(DATE_OUTPUT_NAME)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getStatusDate());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the json adapted version of this ApplicationItem."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Json adapted ApplicationItem."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedApplicationItem(this);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 191,
      "orzymandias": 10,
      "ZoroarkDarkrai": 8,
      "seanjyjy": 3,
      "shawn-nyk": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/application/ApplicationNameContainsKeyWordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Tests that a {@code ApplicationItem}\u0027s {@code JobTitle} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ApplicationNameContainsKeyWordsPredicate implements Predicate\u003cApplicationItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ApplicationNameContainsKeyWordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean test(ApplicationItem applicationItem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                applicationItem.getInternshipJobTitleValue(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            || (other instanceof ApplicationNameContainsKeyWordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u0026\u0026 keywords.equals(((ApplicationNameContainsKeyWordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 30,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/application/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Status class which contains the valid statuses for an internship application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    APPLIED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    INTERVIEW,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    WAITING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    REJECTED,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    OFFERED,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    ACCEPTED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \"Application status can only be applied, interview, waiting, rejected, offered or accepted.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the given status is valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param status Input status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if status is valid, false otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidStatus(String status) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Status.valueOf(status.toUpperCase());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns a string representation of the {@code Status}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the {@code Status}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return StringUtil.toTitleCase(super.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/application/StatusDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.DATE_TIME_LONG_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.formatterDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.isValidDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.isValidDateTimeFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents the date of the Application status update."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StatusDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Status date should be in the format of d-M-yy or d-M-yy HHmm\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"and set in the future\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final LocalDateTime statusDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs an {@code StatusDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate A valid statusDate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public StatusDate(LocalDateTime statusDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(statusDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the given statusDate is valid. Status date must be in the future and have the right format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate Input statusDate."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if statusDate has a valid input format, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidDate(String statusDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isValidDateFormat(statusDate) || isValidDateTimeFormat(statusDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the otherDate has the same statusDate as this StatusDate object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Two LocalDateTime objects have ths same date if are on the same day in the same year."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherDate Date of the other task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other task has the same statusDate."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean sameDate(LocalDateTime otherDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean sameYear \u003d statusDate.getYear() \u003d\u003d otherDate.getYear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean sameDay \u003d statusDate.getDayOfYear() \u003d\u003d otherDate.getDayOfYear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return sameYear \u0026\u0026 sameDay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both StatusDates have the same year and day."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param other Object object to compare to."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other StatusDate object has the same year and day as this one."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof StatusDate // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 sameDate(((StatusDate) other).statusDate)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the hashcode of this StatusDate object, which is the hashcode of its statusDate field."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Hashcode of this StatusDate object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return statusDate.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the string representation of this StatusDate object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of this StatusDate object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return statusDate.format(formatterDateTime(DATE_TIME_LONG_FORMAT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.NonEmptyString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person\u0027s address in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNonEmptyString(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Address extends NonEmptyString {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(address, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidAddress(String address) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isValidNonEmptyString(address);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 6,
      "shawn-nyk": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/CompanyItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.CompanyItemUtil.ADDRESS_OUTPUT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.CompanyItemUtil.EMAIL_OUTPUT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.CompanyItemUtil.INDUSTRIES_OUTPUT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.CompanyItemUtil.INTERNSHIPS_OUTPUT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.CompanyItemUtil.PHONE_OUTPUT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.ADDRESS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.COMPANY_DISPLAY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.EMAIL_DISPLAY_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INDUSTRIES_DISPLAY_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INTERNSHIPS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.PHONE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person in the address book. todo javadocs (shawn)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyItem extends Item {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final CompanyName companyName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Set\u003cIndustry\u003e industries \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final ObservableList\u003cInternshipItem\u003e internships \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CompanyItem(CompanyName companyName, Phone phone, Email email, Address address, Set\u003cIndustry\u003e industries) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireAllNonNull(companyName, phone, email, address, industries);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.industries.addAll(industries);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public CompanyItem(CompanyName companyName, Phone phone, Email email, Address address, Set\u003cIndustry\u003e industries,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            List\u003cInternshipItem\u003e internships) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireAllNonNull(companyName, phone, email, address, industries, internships);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.industries.addAll(industries);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CompanyName getCompanyName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getCompanyNameValue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyName.getValue();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getPhoneValue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return phone.getValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getEmailValue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return email.getValue();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getAddressValue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return address.getValue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Set\u003cIndustry\u003e getIndustries() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return Collections.unmodifiableSet(industries);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * todo javadocs (shawn)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public List\u003cInternshipItem\u003e getInternships() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return Collections.unmodifiableList(internships);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * todo javadocs (shawn)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public InternshipItem getInternship(Index internshipIndex) throws CommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (internshipIndex.getZeroBased() \u003e\u003d internships.size()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, INTERNSHIP_NAME));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return internships.get(internshipIndex.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * todo javadocs (shawn)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void addInternship(InternshipItem internship) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internships.add(internship);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn) */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void removeInternship(Index internshipIndex) throws CommandException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (internshipIndex.getZeroBased() \u003e\u003d internships.size()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, INTERNSHIP_NAME));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internships.remove(internshipIndex.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn) */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void updateAllInternshipsCompanyName() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (InternshipItem internship : internships) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            internship.setCompanyName(companyName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn) */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int getNumberOfInternships() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return internships.size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Checks if matching internship has same identity fields."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param internshipItem to check against."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return true if {@code internshipItem} exists in company."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean containsInternship(InternshipItem internshipItem) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internships.stream().anyMatch(x -\u003e x.isSameItem(internshipItem));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (this \u003d\u003d otherItem) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!(otherItem instanceof CompanyItem)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem otherCompanyItem \u003d (CompanyItem) otherItem;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return otherCompanyItem !\u003d null"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!(other instanceof CompanyItem)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem otherCompanyItem \u003d (CompanyItem) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherCompanyItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getIndustries().equals(getIndustries())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getInternships().equals(getInternships());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Objects.hash(companyName, phone, email, address, industries, internships);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(getCompanyName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(PHONE_OUTPUT_NAME)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(EMAIL_OUTPUT_NAME)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(ADDRESS_OUTPUT_NAME)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(INDUSTRIES_OUTPUT_NAME)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getIndustries().isEmpty() ? \"-\" : getIndustries())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(INTERNSHIPS_OUTPUT_NAME)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getInternships().isEmpty() ? \"-\" : getInternships());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return COMPANY_NAME;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(COMPANY_DISPLAY_NAME, companyName);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(PHONE_DISPLAY_NAME, phone);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(EMAIL_DISPLAY_NAME, email);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(ADDRESS_DISPLAY_NAME, address);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(INDUSTRIES_DISPLAY_NAME, industries);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(INTERNSHIPS_DISPLAY_NAME, internships);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedCompanyItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedCompanyItem(this);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 12,
      "ZoroarkDarkrai": 28,
      "orzymandias": 6,
      "shawn-nyk": 198,
      "seanjyjy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/CompanyName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a name of a field in an Item. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CompanyName extends AlphaNumericWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \"Company names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code CompanyName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param companyName A valid company name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CompanyName(String companyName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(companyName, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a given string is a valid company name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidCompanyName(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return isValidAlphaNumericWord(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 23,
      "shawn-nyk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/CompanyNameContainsKeyWordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyNameContainsKeyWordsPredicate implements Predicate\u003cCompanyItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CompanyNameContainsKeyWordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean test(CompanyItem companyItem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        companyItem.getCompanyNameValue(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof CompanyNameContainsKeyWordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 keywords.equals(((CompanyNameContainsKeyWordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person\u0027s email in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Industry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Tag in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Industry extends AlphaNumericWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Industry types should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code Industry}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param industryType A valid industry type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Industry(String industryType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(industryType, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a given string is a valid industry name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidIndustryName(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return isValidAlphaNumericWord(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 5,
      "shawn-nyk": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person\u0027s phone number in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/InternshipItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.COMPANY_OUTPUT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.PERIOD_OUTPUT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.REQUIREMENTS_OUTPUT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.WAGE_OUTPUT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.COMPANY_DISPLAY_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.JOB_TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.PERIOD_DISPLAY_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.REQUIREMENTS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.WAGE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an InternshipItem in the InternHunter application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipItem extends Item {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private CompanyName companyName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private JobTitle jobTitle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Period period;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Wage wage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Set\u003cRequirement\u003e requirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs an InternshipItem object. Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param companyName Company name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param jobTitle Job title."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param period Period."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param wage Wage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param requirements Requirements."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public InternshipItem(CompanyName companyName, JobTitle jobTitle, Period period, Wage wage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Set\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireAllNonNull(companyName, jobTitle, period, wage, requirements);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.wage \u003d wage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.requirements.addAll(requirements);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the company name of this InternshipItem."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Company name of this InternshipItem."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CompanyName getCompanyName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getCompanyNameValue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyName.getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the company name of this InternshipItem."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param companyName Company name to set."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setCompanyName(CompanyName companyName) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(companyName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the job title of this InternshipItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Job Title of this InternshipItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public JobTitle getJobTitle() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return jobTitle;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getJobTitleValue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return jobTitle.getValue();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the job title of this InternshipItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param jobTitle Job title to set."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setJobTitle(JobTitle jobTitle) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(jobTitle);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the period of this InternshipItem."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Period of this InternshipItem."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Period getPeriod() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getPeriodValue() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return period.getValue();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the period of this InternshipItem."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param period Job title to set."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setPeriod(Period period) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the wage of this InternshipItem."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Wage of this InternshipItem."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Wage getWage() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return wage;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getWageValue() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return wage.getValue();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the wage of this InternshipItem."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param wage Wage to set."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setWage(Wage wage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(wage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.wage \u003d wage;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns an immutable requirement set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Immutable requirement set."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Set\u003cRequirement\u003e getRequirements() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Collections.unmodifiableSet(requirements);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the requirements of this InternshipItem."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param requirements Requirements to set."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setRequirements(Set\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(requirements);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.requirements \u003d requirements;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the skill list provided matches this internship item. A match is found when any skill in"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * the skill list is found in the list of requirements of this internship."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param skillList List of skills to check."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the skill list provided matches the internship item, false otherwise."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean matches(List\u003cString\u003e skillList) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert skillList !\u003d null;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return requirements.stream().anyMatch(requirement -\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                skillList.stream().anyMatch(skill -\u003e skill.equalsIgnoreCase(requirement.toString())));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the name of this InternshipItem."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return InternshipItem name."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields in an InternshipItem object."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Mapping of field names to fields for the InternshipItem."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        mapping.put(JOB_TITLE_DISPLAY_NAME, jobTitle);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(COMPANY_DISPLAY_NAME, companyName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(PERIOD_DISPLAY_NAME, period);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(WAGE_DISPLAY_NAME, wage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(REQUIREMENTS_DISPLAY_NAME, requirements);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both InternshipItems have the same jobTitle and period."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a weaker notion of equality between two InternshipItems."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherItem Other InternshipItem to compare to."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if the 2 InternshipItems have the same identity fields."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(otherItem instanceof InternshipItem)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem otherInternshipItem \u003d (InternshipItem) otherItem;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherInternshipItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getJobTitle().equals(getJobTitle())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getPeriod().equals(getPeriod());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both InternshipItems have the same identity and data fields."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a stronger notion of equality between two InternshipItems."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param other Object object to compare to."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other InternshipItem object has the same identity and data fields as this one."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof InternshipItem)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem otherInternshipItem \u003d (InternshipItem) other;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherInternshipItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getJobTitle().equals(getJobTitle())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getPeriod().equals(getPeriod())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getWage().equals(getWage())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getRequirements().equals(getRequirements());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the hashcode of this InternshipItem object, which is the hashcode of its fields."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Hashcode of this InternshipItem object."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return Objects.hash(companyName, jobTitle, period, wage, requirements);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the string representation of this InternshipItem object."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of this InternshipItem object."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(getJobTitle())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(COMPANY_OUTPUT_NAME)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getCompanyName())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(PERIOD_OUTPUT_NAME)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getPeriod())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(WAGE_OUTPUT_NAME)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getWage())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(REQUIREMENTS_OUTPUT_NAME)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(getRequirements().isEmpty() ? \"-\" : getRequirements())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the json adapted version of this InternshipItem."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Json adapted InternshipItem."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedInternshipItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedInternshipItem(this);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 238,
      "ZoroarkDarkrai": 7,
      "orzymandias": 9,
      "seanjyjy": 10,
      "shawn-nyk": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/JobTitle.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an InternshipItem\u0027s job title."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidJobTitle(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class JobTitle extends AlphaNumericWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \"Job titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code JobTitle}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param jobTitle A valid job title."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public JobTitle(String jobTitle) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(jobTitle, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is a valid job title."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param jobTitle String to test."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the given string is a valid job title, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidJobTitle(String jobTitle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isValidAlphaNumericWord(jobTitle);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Period.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.NonEmptyString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an InternshipItem\u0027s period."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPeriod(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Period extends NonEmptyString {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Periods should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code Period}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param period A valid period."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Period(String period) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(period, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is a valid period."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param period String to test."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the given string is a valid period, false otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidPeriod(String period) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isValidNonEmptyString(period);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Requirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.NonEmptyString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Requirement is an optional field in an InternshipItem."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRequirement(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Requirement extends NonEmptyString {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Requirements should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code Requirement}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param requirement A valid requirement."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Requirement(String requirement) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(requirement, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is a valid requirement."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param requirement String to test."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the given string is a valid requirement, false otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidRequirement(String requirement) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isValidNonEmptyString(requirement);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Wage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an InternshipItem\u0027s wage. TODO: Javadocs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWage(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Wage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String WAGE_SYMBOL \u003d \"$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Wage should only contain a positive number\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9]\\\\d*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code Wage}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param wage A valid wage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Wage(String wage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(wage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkArgument(isValidWage(wage), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        value \u003d wage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is a valid wage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param test String to test."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the given string is a valid wage, false otherwise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidWage(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the string representation of this wage object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of this wage object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return WAGE_SYMBOL + value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof Wage // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 value.equals(((Wage) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/exceptions/InconsistentInternshipException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.model.internship.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Signals that an application has an internship that does not exist in any company\u0027s list of internships."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InconsistentInternshipException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String MESSAGE \u003d \"Applications\u0027 internships do not match with the ones in the companies\u0027\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"lists.\\nStarting from an empty company and application list.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public InconsistentInternshipException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 5,
      "ZoroarkDarkrai": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an Item in the InternHunter application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * There are 4 types of items, CompanyItem, InternshipItem, ApplicationItem, ProfileItem."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Item {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both items are the have the same identity fields."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a weaker notion of equality between two {@code Items}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherItem Other item to compare to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if the 2 items have the same identity fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract boolean isSameItem(Item otherItem);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the name of the item."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract String getItemName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Mapping of field names to fields for the item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract LinkedHashMap\u003cString, Object\u003e getMapping();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the json adapted version of item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return json adapted item."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public abstract JsonAdaptedItem getJsonAdaptedItem();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 34,
      "ZoroarkDarkrai": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Wraps all item data at the macro level."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Duplicates are not allowed (by .isSameItem comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ItemList\u003cT extends Item\u003e implements ReadOnlyItemList\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final UniqueItemList\u003cT\u003e items;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ItemList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an ItemList using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ItemList(ReadOnlyItemList\u003cT\u003e toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.items.setItems(items);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Resets the existing data of this {@code ItemList} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void resetData(ReadOnlyItemList\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        setItems(newData.getItemList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //// item-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if an item with the same identity as {@code item} exists in the item list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean hasItem(T item) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds an item to the item list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item must not already exist in the item list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void addItem(T p) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.add(p);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the given item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * item list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(editedItem);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.setItem(target, editedItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes {@code key} from this {@code ItemList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code key} must exist in the item list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void removeItem(T key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes {@code key} from this {@code ItemList}, removing the object based on the weaker notion of equality."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code key} need not be in this item list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void removeSameItem(T key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.removeSameItem(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.asUnmodifiableObservableList().size() + \" items\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ObservableList\u003cT\u003e getItemList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof ItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 items.equals(((ItemList) other).items));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ReadOnlyItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Unmodifiable view of a list of items."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public interface ReadOnlyItemList\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns an unmodifiable view of the Item list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This list will not contain any duplicate Items."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    ObservableList\u003cT\u003e getItemList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A item is considered unique by comparing using {@code Item#isSameItem(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * items uses Item#isSameItem(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of a item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * @see T#isSameItem(T)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class UniqueItemList\u003cT extends Item\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameItem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a item to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new DuplicateItemException(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ItemNotFoundException(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!target.isSameItem(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new DuplicateItemException(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ItemNotFoundException(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes the equivalent item from the list, based on the weaker notion of equality between 2 items."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void removeSameItem(T toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        internalList.removeIf(item -\u003e item.isSameItem(toRemove));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItems(UniqueItemList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new DuplicateItemException(items.get(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean itemsAreUnique(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                if (items.get(i).isSameItem(items.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 144,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/DuplicateItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DuplicateItemException(Item item) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"Operation would result in duplicate %s items\", item.getItemName()));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14,
      "ZoroarkDarkrai": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ItemNotFoundException(Item item) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"Not able to find this %s item\", item.getItemName()));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a name of a field in an Item."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class Person extends Item {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (this \u003d\u003d otherItem) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!(otherItem instanceof Person)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person otherPerson \u003d (Person) otherItem;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return \"person\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Name\", name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Phone\", phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Email\", email);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Address\", address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Tags\", tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 34,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Descriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Represents a descriptor in the profile item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Guarantees: immutable; non-empty; descriptor is valid as declared in {@link #isValidDescriptor(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class Descriptor {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"descriptors should be alphanumeric and non-empty,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        + \"punctuations limited to .,?!:;+#%\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Za-z0-9 .,!?:;+#%]+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public final String descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Constructs a {@code Descriptor}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param descriptor A valid descriptor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public Descriptor(String descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        checkArgument(isValidDescriptor(descriptor), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if a given string is a valid descriptor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static boolean isValidDescriptor(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof Descriptor// instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 descriptor.equals(((Descriptor) other).descriptor)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return descriptor.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Format descriptor as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/ProfileItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.DESCRIPTORS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.TYPE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Represents a Profile Item in the UserProfile."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileItem extends Item {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final ProfileItemCategory category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Set\u003cDescriptor\u003e descriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItem(Title title, ProfileItemCategory category, Set\u003cDescriptor\u003e descriptors) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireAllNonNull(category, title, descriptors);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.descriptors.addAll(descriptors);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getTitleValue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return title.getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemCategory getCategory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getCategoryString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return category.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public Set\u003cDescriptor\u003e getDescriptors() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return Collections.unmodifiableSet(descriptors);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if both items are the have the same name and category."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * This defines a weaker notion of equality between two ProfileItemObjects."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param otherItem item to compare to."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return True if and only if the 2 items have the same identity fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!(otherItem instanceof ProfileItem)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem otherProfileItem \u003d (ProfileItem) otherItem;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 otherProfileItem.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 (otherProfileItem.getTitle().equals(getTitle()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if both profile item have the same data fields and descriptors."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * This defines a stronger notion of equality between two ProfileItem objects."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!(other instanceof ProfileItem)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem otherProfileItem \u003d (ProfileItem) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return otherProfileItem !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 otherProfileItem.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 (otherProfileItem.getTitle().equals(getTitle()))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 (otherProfileItem.getDescriptors().equals(getDescriptors()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return Objects.hash(title, category, descriptors);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .append(\" Descriptors: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        getDescriptors().forEach(builder::append);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Obtains the name of the item."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return PROFILE_NAME;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return Mapping of field names to fields for the ProfileItem."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(TITLE_DISPLAY_NAME, title);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        mapping.put(TYPE_DISPLAY_NAME, category);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mapping.put(DESCRIPTORS_DISPLAY_NAME, descriptors);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedProfileItem(this);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 3,
      "orzymandias": 132,
      "ZoroarkDarkrai": 9,
      "seanjyjy": 5,
      "shawn-nyk": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/ProfileItemCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * UserProfileCategory class contains the valid category for user profile."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public enum ProfileItemCategory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    EXPERIENCE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    ACHIEVEMENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    SKILL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            \"ProfileItem category c/ can only be experience, achievement or skill\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if the profile item category is valid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param profileItemCategory Input category as String."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return True if status is valid, false otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static boolean isValidProfileItemCategory(String profileItemCategory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        profileItemCategory \u003d profileItemCategory.toUpperCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return profileItemCategory.equals(EXPERIENCE.toString())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || profileItemCategory.equals(ACHIEVEMENT.toString())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || profileItemCategory.equals(SKILL.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/ProfileItemContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Tests that a {@code ProfileItems}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileItemContainsKeywordPredicate implements Predicate\u003cProfileItem\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean test(ProfileItem profileItem) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(profileItem);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        profileItem.getTitleValue(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof ProfileItemContainsKeywordPredicate// instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 keywords.equals(((ProfileItemContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Represents a title of a field in a {@code ProfileItem}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class Title extends AlphaNumericWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            \"Profile Item Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Constructs a {@code Title} for the {@code ProfileItem}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param title A valid title for the profile item."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        super(title, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tab/Tab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * The API of the Tab component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public interface Tab {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current tab name with {@code tabName}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setTabName(TabName tabName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current tab name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    TabName getTabName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tab/TabManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadoc"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TabManager implements Tab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TabName tabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initializes TabManger which controls the current {@code tabName}. By default, it is always Company tab."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TabManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabName \u003d TabName.COMPANY; // default tab that is displayed to user each time the app is opened."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current {@code tabName}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TabName getTabName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces {@code this.tabName} with {@code tabName}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName(TabName tabName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(tabName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!(obj instanceof TabManager)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager other \u003d (TabManager) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tabName.equals(other.tabName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "seanjyjy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ApplicationItemUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains strings used in the ApplicationItem."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationItemUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String STATUS_OUTPUT_NAME \u003d \"Status: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_OUTPUT_NAME \u003d \" Date: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/CompanyItemUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyItemUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String PHONE_OUTPUT_NAME \u003d \" Phone: \";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String EMAIL_OUTPUT_NAME \u003d \" Email: \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String ADDRESS_OUTPUT_NAME \u003d \" Address: \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String INDUSTRIES_OUTPUT_NAME \u003d \" Industries: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String INTERNSHIPS_OUTPUT_NAME \u003d \" Internships: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * DateUtil class which provides the input and output formats for all dates, as well as methods for date format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * matching."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class DateUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Output date formats"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_TIME_LONG_FORMAT \u003d \"d MMM yyyy @ h.mm a\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Input date formats"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_INPUT_FORMAT \u003d \"d-M-yy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_TIME_INPUT_FORMAT \u003d \"d-M-yy HHmm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Default timing if user does not input a time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"23:59\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"Checks for status date validity failed\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given matches the d-M-yy HHmm format and is a dateTime that is not before the current"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * dateTime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the date and time format, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidDateTimeFormat(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDateTime inputDateTime \u003d LocalDateTime.parse(input, formatterDateTime(DATE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return !inputDateTime.isBefore(currentDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given matches the d-M-yy format and is a date that is not before the current date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the date format, false otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidDateFormat(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDate inputDate \u003d LocalDate.parse(input, formatterDateTime(DATE_INPUT_FORMAT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return !inputDate.isBefore(currentDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a LocalDateTime object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param date Input date from user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return A LocalDate object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime formatDate(String date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date, formatterDateTime(DATE_INPUT_FORMAT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalTime currentTime \u003d LocalTime.parse(DEFAULT_TIME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.of(localDate, currentTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a LocalDateTime object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param dateAndTime Input date and time from user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted date and time."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime formatDateTime(String dateAndTime) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.parse(dateAndTime, formatterDateTime(DATE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the input status date from user to a LocalDateTime object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate Input status date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return LocalDateTime object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static LocalDateTime convertToDateTime(String statusDate) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(statusDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (isValidDateTimeFormat(statusDate)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return formatDateTime(statusDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isValidDateFormat(statusDate)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return formatDate(statusDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assert false : ERROR_MESSAGE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains a LocalDateTime object of today\u0027s date and time of 2359."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return LocalDateTime object of today\u0027s date and time of 2359."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static LocalDateTime getTodayDate() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalTime defaultTime \u003d LocalTime.parse(DEFAULT_TIME);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.of(todayDate, defaultTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the string status date output format to a LocalDateTime object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate Input status date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return LocalDateTime object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static LocalDateTime convertOutputFormat(String statusDate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(statusDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.parse(statusDate, formatterDateTime(DATE_TIME_LONG_FORMAT));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given matches the d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the valid output date format, false otherwise."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidOutputDate(String input) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDateTime.parse(input, formatterDateTime(DATE_TIME_LONG_FORMAT));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a DateTimeFormatter using the input pattern, set to Locale.English."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param pattern String pattern."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return The DateTimeFormatter based the pattern."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static DateTimeFormatter formatterDateTime(String pattern) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(pattern);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return DateTimeFormatter.ofPattern(pattern, Locale.ENGLISH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static String extractDayAndMonth(String... dateInformation) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return dateInformation[0] + \" \" + dateInformation[1];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 153,
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/InternshipItemUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains strings used in the InternshipItem."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipItemUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMPANY_OUTPUT_NAME \u003d \" Company Name: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PERIOD_OUTPUT_NAME \u003d \" Period: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String WAGE_OUTPUT_NAME \u003d \" Wage: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String REQUIREMENTS_OUTPUT_NAME \u003d \" Requirements: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ItemUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * ItemUtil class which provides the alias for all items."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ItemUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMPANY_ALIAS \u003d \"com\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INTERNSHIP_ALIAS \u003d \"int\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String APPLICATION_ALIAS \u003d \"app\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PROFILE_ALIAS \u003d \"me\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMPANY_NAME \u003d \"company\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INTERNSHIP_NAME \u003d \"internship\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String APPLICATION_NAME \u003d \"application\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PROFILE_NAME \u003d \"profile\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String PROFILE_ITEM_NAME \u003d \"profile item\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ProfileItemCategoryUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileItemCategoryUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String EXPERIENCE_KEYWORD \u003d \"experience\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String ACHIEVEMENT_KEYWORD \u003d \"achievement\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String SKILL_KEYWORD \u003d \"skill\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "orzymandias": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ItemList\u003cPerson\u003e getSampleAddressBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e sampleAb \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            sampleAb.addItem(samplePerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/StatusUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * StatusUtil class which provides the available statuses for an internship application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StatusUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String APPLIED_KEYWORD \u003d \"Applied\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INTERVIEW_KEYWORD \u003d \"Interview\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String WAITING_KEYWORD \u003d \"Waiting\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String REJECTED_KEYWORD \u003d \"Rejected\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String OFFERED_KEYWORD \u003d \"Offered\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String ACCEPTED_KEYWORD \u003d \"Accepted\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/view/View.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * The API of the Tab component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public interface View {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current {@code companyIndex} with {@code index}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setCompanyViewIndex(Index index);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current {@code applicationIndex} with {@code index}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setApplicationViewIndex(Index index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current {@code profileIndex} with {@code index}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setProfileViewIndex(Index index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current Index of company."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getCompanyViewIndex();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current Index of application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getApplicationViewIndex();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current Index of profile."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Index getProfileViewIndex();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/view/ViewManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadoc"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ViewManager implements View {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Index companyIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Index applicationIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Index profileIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initializes ViewManger which controls the current {@code index}. By default, it is always of Index 1."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ViewManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyIndex \u003d Index.fromOneBased(1); // default Index is 1 which is 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationIndex \u003d Index.fromOneBased(1); // default Index is 1 which is 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileIndex \u003d Index.fromOneBased(1); // default Index is 1 which is 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces {@code companyIndex} with {@code index}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setCompanyViewIndex(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyIndex \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces {@code companyIndex} with {@code index}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setApplicationViewIndex(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationIndex \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces {@code companyIndex} with {@code index}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setProfileViewIndex(Index index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileIndex \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getCompanyViewIndex() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return companyIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current {@code index}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getApplicationViewIndex() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return applicationIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current {@code index}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Index getProfileViewIndex() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return profileIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!(obj instanceof ViewManager)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ViewManager other \u003d (ViewManager) obj;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return companyIndex.equals(other.companyIndex)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 applicationIndex.equals(other.applicationIndex)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 profileIndex.equals(other.profileIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wrapper/AlphaNumericWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a alphanumeric word object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class AlphaNumericWord {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code AlphaNumericWord}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param alphaNumericWord A valid word consisting of only alphanumeric characters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param messageConstraints Message constraint to produce if given string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AlphaNumericWord(String alphaNumericWord, String messageConstraints) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(alphaNumericWord);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkArgument(isValidAlphaNumericWord(alphaNumericWord), messageConstraints);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        value \u003d alphaNumericWord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the AlphaNumericWord string value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String value in AlphaNumericWord."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string only consists of alphanumeric characters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param test String to test."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the given string consists of only alphanumeric characters, false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidAlphaNumericWord(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the string representation of this AlphaNumericWord object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of this AlphaNumericWord object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the other AlphaNumericWord object have the same value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param other Object object to compare to."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other AlphaNumericWord object has the same value as this object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof AlphaNumericWord // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 value.equals(((AlphaNumericWord) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the hashcode of this AlphaNumericWord object, which is the hashcode of the value."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Hashcode of this AlphaNumericWord object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wrapper/NonEmptyString.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a non empty string object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNonEmptyString(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class NonEmptyString {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Represents a string that contains at least one non-space character."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code AlNumWord}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param nonEmptyString A valid word that has at least one non-space character."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public NonEmptyString(String nonEmptyString, String messageConstraints) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(nonEmptyString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkArgument(isValidNonEmptyString(nonEmptyString), messageConstraints);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        value \u003d nonEmptyString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the NonEmptyString string value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String value in NonEmptyString."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is not empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param test String to test."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the given string is not empty, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidNonEmptyString(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the string representation of this NonEmptyString object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of this NonEmptyString object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the other NonEmptyString object have the same value."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param other Object object to compare to."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other NonEmptyString object has the same value as this object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof NonEmptyString // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 value.equals(((NonEmptyString) other).value)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the hashcode of this NonEmptyString object, which is the hashcode of the value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Hashcode of this NonEmptyString object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 81,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ItemListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Represents a storage for {@link seedu.address.model.item.ItemList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public interface ItemListStorage\u003cT extends Item, U extends JsonAdaptedItem\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns ItemList data as a {@link ItemList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #getItemListFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Saves the given {@link ItemList} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveItemList(ReadOnlyItemList\u003cT\u003e itemList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #saveItemList(ReadOnlyItemList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveItemList(ReadOnlyItemList\u003cT\u003e itemList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonItemListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * A class to access ItemList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonItemListStorage\u003cT extends Item, U extends JsonAdaptedItem\u003e implements ItemListStorage\u003cT, U\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItemListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Class\u003cT\u003e contentClass;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Class\u003cU\u003e jsonClass;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Initializes the json item list storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param filePath     path of the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param contentClass item class saved in the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param jsonClass    json adapted class of the item."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonItemListStorage(Path filePath, Class\u003cT\u003e contentClass, Class\u003cU\u003e jsonClass) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.contentClass \u003d contentClass;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.jsonClass \u003d jsonClass;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList() throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return readItemList(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Similar to {@link #readItemList()}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Optional\u003cJsonSerializableItemList\u003cT, U\u003e\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                filePath, contentClass, jsonClass);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (jsonAddressBook.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveItemList(ReadOnlyItemList\u003cT\u003e itemList) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Similar to {@link #saveItemList(ReadOnlyItemList)}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveItemList(ReadOnlyItemList\u003cT\u003e itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(itemList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableItemList\u003cT, U\u003e(itemList), filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 39,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * An Immutable Item List that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonSerializableItemList\u003cT extends Item, U extends JsonAdaptedItem\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Item list contains duplicate item(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final List\u003cU\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonSerializableItemList} with the given items."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonSerializableItemList(@JsonProperty(\"items\") List\u003cU\u003e items) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.items.addAll(items);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code ReadOnlyItemList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableItemList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonSerializableItemList(ReadOnlyItemList\u003cT\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        items.addAll(source.getItemList().stream().map(item -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                (U) item.getJsonAdaptedItem()).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this item list into the model\u0027s {@code ItemList\u003cT\u003e} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemList\u003cT\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cT\u003e itemList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (U jsonAdaptedItem : items) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            T item \u003d (T) jsonAdaptedItem.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (itemList.hasItem(item)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemList.addItem(item);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public interface Storage extends UserPrefsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the file path of the application data file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getApplicationItemListFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns application ItemList data as a {@link ItemList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cApplicationItem\u003e\u003e readApplicationItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #getApplicationItemListFilePath()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cApplicationItem\u003e\u003e readApplicationItemList("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Saves the given {@link ItemList} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemList cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveApplicationItemList(ReadOnlyItemList\u003cApplicationItem\u003e itemList) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #saveApplicationItemList(ReadOnlyItemList)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveApplicationItemList(ReadOnlyItemList\u003cApplicationItem\u003e itemList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the file path of the company data file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getCompanyItemListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns company ItemList data as a {@link ItemList}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cCompanyItem\u003e\u003e readCompanyItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #getCompanyItemListFilePath()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cCompanyItem\u003e\u003e readCompanyItemList("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Saves the given {@link ItemList} to the storage."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemList cannot be null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveCompanyItemList(ReadOnlyItemList\u003cCompanyItem\u003e itemList) throws IOException;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #saveCompanyItemList(ReadOnlyItemList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveCompanyItemList(ReadOnlyItemList\u003cCompanyItem\u003e itemList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the file path of the profile data file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getProfileItemListFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns profile ItemList data as a {@link ItemList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cProfileItem\u003e\u003e readProfileItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #getProfileItemListFilePath()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cProfileItem\u003e\u003e readProfileItemList("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Saves the given {@link ItemList} to the storage."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemList cannot be null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveProfileItemList(ReadOnlyItemList\u003cProfileItem\u003e itemList) throws IOException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #saveProfileItemList(ReadOnlyItemList)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveProfileItemList(ReadOnlyItemList\u003cProfileItem\u003e itemList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 101,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Manages storage of ItemList data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ItemListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public StorageManager(ItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.applicationItemListStorage \u003d applicationItemListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyItemListStorage \u003d companyItemListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileItemListStorage \u003d profileItemListStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item List Storage \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getApplicationItemListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing application item list storage\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return applicationItemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cApplicationItem\u003e\u003e readApplicationItemList()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing application item list storage\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return applicationItemListStorage.readItemList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cApplicationItem\u003e\u003e readApplicationItemList("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing application item list storage\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return applicationItemListStorage.readItemList(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveApplicationItemList(ReadOnlyItemList\u003cApplicationItem\u003e itemList) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing application item list storage\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        applicationItemListStorage.saveItemList(itemList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveApplicationItemList(ReadOnlyItemList\u003cApplicationItem\u003e itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing application item list storage\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        applicationItemListStorage.saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getCompanyItemListFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing company item list storage\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return companyItemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cCompanyItem\u003e\u003e readCompanyItemList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing company item list storage\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return companyItemListStorage.readItemList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cCompanyItem\u003e\u003e readCompanyItemList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return companyItemListStorage.readItemList(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveCompanyItemList(ReadOnlyItemList\u003cCompanyItem\u003e itemList) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing company item list storage\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        companyItemListStorage.saveItemList(itemList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveCompanyItemList(ReadOnlyItemList\u003cCompanyItem\u003e itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing company item list storage\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        companyItemListStorage.saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getProfileItemListFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing profile item list storage\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileItemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cProfileItem\u003e\u003e readProfileItemList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing profile item list storage\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileItemListStorage.readItemList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cProfileItem\u003e\u003e readProfileItemList("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing profile item list storage\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileItemListStorage.readItemList(filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveProfileItemList(ReadOnlyItemList\u003cProfileItem\u003e itemList) throws IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing profile item list storage\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        profileItemListStorage.saveItemList(itemList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveProfileItemList(ReadOnlyItemList\u003cProfileItem\u003e itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Accessing profile item list storage\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        profileItemListStorage.saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 88,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/application/JsonAdaptedApplicationItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link ApplicationItem}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedApplicationItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Application item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String statusDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final JsonAdaptedInternshipItem internshipItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedApplicationItem} with the given application item details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedApplicationItem(@JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"statusDate\") String statusDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"internshipItem\") JsonAdaptedInternshipItem internshipItem) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.internshipItem \u003d internshipItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code ApplicationItem} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedApplicationItem(ApplicationItem source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assert source !\u003d null : JsonAdaptedItem.NULL_SOURCE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        status \u003d source.getStatusString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        statusDate \u003d source.getStatusDateString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        internshipItem \u003d new JsonAdaptedInternshipItem(source.getInternshipItem());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted internship item object into the model\u0027s {@code ApplicationItem} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted application item."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ApplicationItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (internshipItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    InternshipItem.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final InternshipItem itemInternship \u003d internshipItem.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Status itemStatus \u003d Status.valueOf(status.toUpperCase());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (statusDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    StatusDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!DateUtil.isValidOutputDate(statusDate)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(StatusDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StatusDate itemStatusDate \u003d new StatusDate(DateUtil.convertOutputFormat(statusDate));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ApplicationItem(itemInternship, itemStatus, itemStatusDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 3,
      "ZoroarkDarkrai": 79,
      "shawn-nyk": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/company/JsonAdaptedCompanyItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link CompanyItem}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedCompanyItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Company item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String companyName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Set\u003cJsonAdaptedIndustry\u003e industries \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final List\u003cJsonAdaptedInternshipItem\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompanyItem} with the given company item details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedCompanyItem(@JsonProperty(\"companyName\") String companyName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"address\") String address, @JsonProperty(\"industries\") Set\u003cJsonAdaptedIndustry\u003e industries,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"internships\") List\u003cJsonAdaptedInternshipItem\u003e internships) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.industries.addAll(industries);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code CompanyItem} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedCompanyItem(CompanyItem source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assert source !\u003d null : JsonAdaptedItem.NULL_SOURCE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        companyName \u003d source.getCompanyNameValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        phone \u003d source.getPhoneValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        email \u003d source.getEmailValue();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        address \u003d source.getAddressValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        industries.addAll(source.getIndustries().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedIndustry::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        internships.addAll(source.getInternships().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedInternshipItem::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted company item object into the model\u0027s {@code CompanyItem} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted company item."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public CompanyItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (companyName \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    CompanyName.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!CompanyName.isValidAlphaNumericWord(companyName)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final CompanyName itemCompanyName \u003d new CompanyName(companyName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Phone itemPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Email itemEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Address itemAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Set\u003cIndustry\u003e itemIndustries \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedIndustry industry : industries) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemIndustries.add(industry.toModelType());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final List\u003cInternshipItem\u003e itemInternships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedInternshipItem internship : internships) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemInternships.add(internship.toModelType());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new CompanyItem(itemCompanyName, itemPhone, itemEmail, itemAddress, itemIndustries, itemInternships);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 123,
      "shawn-nyk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/company/JsonAdaptedIndustry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link Industry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "class JsonAdaptedIndustry {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String industryType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedIndustry} with the given {@code industry}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedIndustry(String industryType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.industryType \u003d industryType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code Industry} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedIndustry(Industry source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        industryType \u003d source.getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getIndustryName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return industryType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted industry object into the model\u0027s {@code Industry} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted industry."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Industry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Industry.isValidAlphaNumericWord(industryType)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Industry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new Industry(industryType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "ZoroarkDarkrai": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/internship/JsonAdaptedInternshipItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link InternshipItem}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedInternshipItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Internship item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String companyName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String jobTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String period;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String wage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Set\u003cJsonAdaptedRequirement\u003e requirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedInternshipItem} with the given internship item details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedInternshipItem(@JsonProperty(\"companyName\") String companyName,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"jobTitle\") String jobTitle, @JsonProperty(\"period\") String period,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"wage\") String wage, @JsonProperty(\"requirements\") Set\u003cJsonAdaptedRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.wage \u003d wage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (requirements !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            this.requirements.addAll(requirements);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code InternshipItem} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedInternshipItem(InternshipItem source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assert source !\u003d null : JsonAdaptedItem.NULL_SOURCE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        companyName \u003d source.getCompanyNameValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        jobTitle \u003d source.getJobTitleValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        period \u003d source.getPeriodValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        wage \u003d source.getWageValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requirements.addAll(source.getRequirements().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedRequirement::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted internship item object into the model\u0027s {@code InternshipItem} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted internship item."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public InternshipItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (companyName \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    CompanyName.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!CompanyName.isValidAlphaNumericWord(companyName)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final CompanyName itemCompanyName \u003d new CompanyName(companyName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (jobTitle \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    JobTitle.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!JobTitle.isValidJobTitle(jobTitle)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(JobTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final JobTitle itemJobTitle \u003d new JobTitle(jobTitle);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Period.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Period.isValidPeriod(period)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Period.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Period itemPeriod \u003d new Period(period);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (wage \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Wage.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Wage.isValidWage(wage)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Wage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Wage itemWage \u003d new Wage(wage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Set\u003cRequirement\u003e itemRequirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedRequirement requirement : requirements) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemRequirements.add(requirement.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new InternshipItem(itemCompanyName, itemJobTitle, itemPeriod, itemWage, itemRequirements);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 3,
      "ZoroarkDarkrai": 105,
      "shawn-nyk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/internship/JsonAdaptedRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link Requirement}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedRequirement {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String requirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedRequirement} with the given {@code requirement}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedRequirement(String requirement) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.requirement \u003d requirement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code Requirement} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedRequirement(Requirement source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requirement \u003d source.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getRequirementName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return requirement;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted requirement object into the model\u0027s {@code Requirement} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted requirement."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Requirement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Requirement.isValidRequirement(requirement)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Requirement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new Requirement(requirement);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "ZoroarkDarkrai": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/item/JsonAdaptedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Represents a Jackson-friendly version  of an item."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public abstract class JsonAdaptedItem {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String NULL_SOURCE_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"A JsonAdaptedItem should never be created from a null object\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public abstract Item toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/profile/JsonAdaptedDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link Descriptor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedDescriptor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedDescriptor} with the given {@code descriptor}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedDescriptor(String descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code Descriptor} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedDescriptor(Descriptor source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        descriptor \u003d source.descriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getDescriptorName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted industry object into the model\u0027s {@code Descriptor} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted industry."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Descriptor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Descriptor.isValidDescriptor(descriptor)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new Descriptor(descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/profile/JsonAdaptedProfileItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link ProfileItem}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedProfileItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Profile item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String profileType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Set\u003cJsonAdaptedDescriptor\u003e descriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedProfileItem} with the given profile item details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedProfileItem(@JsonProperty(\"title\") String title, @JsonProperty(\"profileType\") String profileType,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"descriptors\") Set\u003cJsonAdaptedDescriptor\u003e descriptors) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileType \u003d profileType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.descriptors.addAll(descriptors);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code ProfileItem} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedProfileItem(ProfileItem source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assert source !\u003d null : JsonAdaptedItem.NULL_SOURCE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        title \u003d source.getTitleValue();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        profileType \u003d source.getCategory().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        descriptors.addAll(source.getDescriptors().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedDescriptor::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted profile item object into the model\u0027s {@code ProfileItem} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted company item."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ProfileItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Title.isValidAlphaNumericWord(title)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Title itemTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (profileType \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    ProfileItemCategory.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!ProfileItemCategory.isValidProfileItemCategory(profileType)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(ProfileItemCategory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        final ProfileItemCategory itemProfileType \u003d ProfileItemCategory.valueOf(profileType.toUpperCase());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Set\u003cDescriptor\u003e itemDescriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedDescriptor descriptor : descriptors) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemDescriptors.add(descriptor.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ProfileItem(itemTitle, itemProfileType, itemDescriptors);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 80,
      "orzymandias": 1,
      "shawn-nyk": 1,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Style class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Image Link"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ARROW_IMAGE_LINK \u003d \"/images/sendarrow.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView buttonImage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param commandExecutor A function that executes the command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setCommandTextFieldProperties();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setSendButtonProperties();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Loads the arrow image and set the image as the button icon."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setSendButtonIcon() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image arrow \u003d new Image(this.getClass().getResourceAsStream(ARROW_IMAGE_LINK));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        buttonImage.setImage(arrow);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the button style."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setSendButtonProperties() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        HBox.setHgrow(sendButton, Priority.ALWAYS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setSendButtonIcon();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the command text field style."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setCommandTextFieldProperties() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        HBox.setHgrow(commandTextField, Priority.ALWAYS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         * @param commandText The text that the user input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         * @return A command result which contains the result of executing the text input."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         * @throws CommandException thrown when there is an invalid command inputted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         * @throws ParseException thrown when there is an invalid text to be parsed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "seanjyjy": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExitDialog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.scene.control.Dialog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Controller for a exit page."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Any opened windows from InternHunter will also be closed when InternHunter is closed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class ExitDialog extends UiPart\u003cDialogPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final String FXML \u003d \"ExitDialog.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private DialogPane dialogPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Button yesButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Button noButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Dialog\u003cBoolean\u003e dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private WindowEvent event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private InternshipsWindow internshipsWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Creates a new Exit dialog."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param event event that triggers the creation of exit dialog."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ExitDialog(WindowEvent event, HelpWindow helpWindow, InternshipsWindow internshipsWindow) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog \u003d new Dialog\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.setDialogPane(dialogPane);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Window window \u003d dialog.getDialogPane().getScene().getWindow();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        window.setOnCloseRequest((e) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            dialog.hide();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            event.consume();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.helpWindow \u003d helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipsWindow \u003d internshipsWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.showAndWait();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private boolean confirmExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.setResult(Boolean.TRUE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.hide();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internshipsWindow.hide();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private boolean cancelExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.setResult(Boolean.TRUE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.hide();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "ZoroarkDarkrai": 65,
      "seanjyjy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GuardClauseUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.BiPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.InformationDisplay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.ListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Contains the predicate and function checks for ui."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class GuardClauseUi {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks if the given string is an empty representation of a list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final Predicate\u003cString\u003e IS_EMPTY_LIST_STRING \u003d string -\u003e string !\u003d null \u0026\u0026 string.equals(\"[]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks if the given data list is empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final Predicate\u003cObservableList\u003c? extends Item\u003e\u003e IS_EMPTY_DATA_LIST \u003d list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        -\u003e list !\u003d null \u0026\u0026 list.size() \u003c\u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks if the given display is empty"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final Predicate\u003cOptional\u003cInformationDisplay\u003c? extends Item\u003e\u003e\u003e IS_EMPTY_DISPLAY \u003d Optional::isEmpty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks if the given list panel is empty"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final Predicate\u003cOptional\u003cListPanel\u003c? extends Item\u003e\u003e\u003e IS_EMPTY_LIST_PANEL \u003d Optional::isEmpty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks if the given string is empty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final Predicate\u003cString\u003e IS_EMPTY_STRING \u003d string -\u003e string !\u003d null \u0026\u0026 string.length() \u003c\u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks if both strings are equal"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final BiPredicate\u003cString, String\u003e IS_SAME_STRING \u003d (string1, string2)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        -\u003e (string1 !\u003d null) \u0026\u0026 (string2 !\u003d null) \u0026\u0026 string1.equals(string2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Controller for the help window."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class HelpWindow extends PopupWindow {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t15-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(FXML, new Stage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super.show();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 7,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InternshipsWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.getNumberedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Controller for the InternshipsWindow page."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipsWindow extends PopupWindow {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InternshipsWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String FXML \u003d \"InternshipsWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private TextArea matchingInternships;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a new InternshipsWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipsWindow() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(FXML, new Stage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Shows the matching internships window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        logger.fine(\"Showing list of matching internships.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super.show();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the internship list for display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param internshipList List of internships."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setInternshipList(List\u003cInternshipItem\u003e internshipList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String displayText \u003d getNumberedList(internshipList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        matchingInternships.setText(displayText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_DATA_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_DISPLAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_LIST_PANEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.tabs.TabName.APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.tabs.TabName.COMPANY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.tabs.TabName.PROFILE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.ApplicationDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.CompanyDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.InformationDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.ProfileDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.ApplicationListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.CompanyListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.ListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.ProfileListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.Tabs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int PERSON_LIST_HEIGHT_SHRINK \u003d 255;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int RESULT_HEIGHT_SHRINK \u003d 350;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // data portion"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cCompanyItem\u003e companyItems;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cApplicationItem\u003e applicationItems;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cProfileItem\u003e profileItems;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private InternshipsWindow internshipsWindow;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Tabs tabs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox cardList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox display;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ScrollPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox commandBoxPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox tabsContainer;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param logic The logic unit of the app."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeUi(primaryStage, logic);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // linking to logic"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyItems \u003d logic.getFilteredCompanyItemList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationItems \u003d logic.getFilteredApplicationItemList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileItems \u003d logic.getFilteredProfileItemList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the primary stage."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return the {@code primaryStage} of the main window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets up the GUI properties in the {@code primaryStage} using the stored user settings in {@code logic}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param logic The logic unit of the app."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeUi(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        bindHeights(primaryStage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internshipsWindow \u003d new InternshipsWindow();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        primaryStage.setOnCloseRequest(event -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ExitDialog exitDialog \u003d new ExitDialog(event, helpWindow, internshipsWindow);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            exitDialog.show();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Binds the height of {@code personList} and {@code resultDisplayPlaceHolder} in the {@code primaryStage}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void bindHeights(Stage primaryStage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        cardList.prefWidthProperty().bind(primaryStage.widthProperty().subtract(PERSON_LIST_HEIGHT_SHRINK));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplayPlaceholder.prefWidthProperty().bind(primaryStage.widthProperty().subtract(RESULT_HEIGHT_SHRINK));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param guiSettings The stored GUI settings of the app."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addResultDisplay();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addListPanel();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addCommandBox();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addInformationDisplay();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addTabs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the tab display to the {@code MainWindow}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void addTabs() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabs \u003d Tabs.getTabs(this, logic);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabsContainer.getChildren().add(tabs);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the result display to the {@code MainWindow}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void addResultDisplay() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplayPlaceholder.setContent(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the information display to the {@code MainWindow}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void addInformationDisplay() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        changeDisplay();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the command box display to the {@code MainWindow}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void addCommandBox() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the list panel display to the {@code MainWindow}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void addListPanel() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        changeListPanelView(COMPANY);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        handlePopupWindow(helpWindow);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Opens the internships window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void handleMatchingInternships(List\u003cInternshipItem\u003e internshipList) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internshipsWindow.setInternshipList(internshipList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        handlePopupWindow(internshipsWindow);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Opens the popup window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param popupWindow Popup window."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void handlePopupWindow(PopupWindow popupWindow) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!popupWindow.isShowing()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            popupWindow.show();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            popupWindow.focus();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Displays the GUI."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        primaryStage.fireEvent(new WindowEvent(primaryStage, WindowEvent.WINDOW_CLOSE_REQUEST));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Switch the tabs of the application to {@code tabName}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tabName The tab to be switched to."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void switchTab(TabName tabName) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(tabName);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabs.switchTab(tabName);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param commandText The text that the user input."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A command result which contains the result of executing the text input."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws CommandException thrown when there is an invalid command inputted."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws ParseException thrown when there is an invalid text to be parsed."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (commandResult.isShowMatchingInternships()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                handleMatchingInternships(commandResult.getMatchingInternships());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (commandResult.isSwitchTab()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                switchTab(logic.getTabName());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                changeListPanelView(logic.getTabName());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (commandResult.isSwitchDisplay()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                changeDisplay();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Changes the display of screen, depending on {@code tabName}, in the {@code primaryStage}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tabName The tab to be switched to."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void changeListPanelView(TabName tabName) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert (tabName.equals(APPLICATION) || tabName.equals(COMPANY) || tabName.equals(PROFILE));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Optional\u003cListPanel\u003c? extends Item\u003e\u003e newListPanel \u003d Optional.empty();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tabName) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newListPanel \u003d getCompanyTabView();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newListPanel \u003d setApplicationTabView();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newListPanel \u003d setProfileTabView();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        changeDisplay();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_LIST_PANEL.test(newListPanel)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            listPanelPlaceholder.getChildren().add(newListPanel.get().getRoot());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the list of cards that displays a list of company information."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An Optional value containing the company list panel."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Optional\u003cListPanel\u003c? extends Item\u003e\u003e getCompanyTabView() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Optional.of(new CompanyListPanel(companyItems));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the list of cards that displays a list of application information."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An Optional value containing the application list panel."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Optional\u003cListPanel\u003c? extends Item\u003e\u003e setApplicationTabView() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Optional.of(new ApplicationListPanel(applicationItems));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the list of cards that displays a list of profile information."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An Optional value containing the profile list panel."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Optional\u003cListPanel\u003c? extends Item\u003e\u003e setProfileTabView() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Optional.of(new ProfileListPanel(profileItems));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Switches the display based on the {@code index} and {@code tabName}."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void changeDisplay() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName tabName \u003d logic.getTabName();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Optional\u003cInformationDisplay\u003c? extends Item\u003e\u003e newInformationDisplay \u003d Optional.empty();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tabName) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            index \u003d logic.getCompanyViewIndex().getZeroBased();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newInformationDisplay \u003d getCompanyDisplay(index);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            index \u003d logic.getApplicationViewIndex().getZeroBased();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newInformationDisplay \u003d getApplicationDisplay(index);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            index \u003d logic.getProfileViewIndex().getZeroBased();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newInformationDisplay \u003d getProfileDisplay(index);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        display.getChildren().clear();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_DISPLAY.test(newInformationDisplay)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            display.getChildren().add(newInformationDisplay.get().getRoot());"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the particular company item\u0027s information at that index."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param index The Index of the display to be displayed."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An Optional containing the display information of the company at that particular Index."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Optional\u003cInformationDisplay\u003c? extends Item\u003e\u003e getCompanyDisplay(int index) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_DATA_LIST.test(companyItems)) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return Optional.of(CompanyDisplay.getCompanyDisplay(primaryStage, companyItems.get(index)));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the particular application item\u0027s information at that index."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param index The Index of the display to be displayed."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An Optional containing the display information of the Application at that particular Index."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Optional\u003cInformationDisplay\u003c? extends Item\u003e\u003e getApplicationDisplay(int index) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_DATA_LIST.test(applicationItems)) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return Optional.of(ApplicationDisplay.getApplicationDisplay(primaryStage, applicationItems.get(index)));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the particular profile item\u0027s information at that index."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param index The Index of the display to be displayed."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An Optional containing the display information of the profile at that particular Index."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Optional\u003cInformationDisplay\u003c? extends Item\u003e\u003e getProfileDisplay(int index) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_DATA_LIST.test(profileItems)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return Optional.of(ProfileDisplay.getProfileDisplay(primaryStage, profileItems.get(index)));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 29,
      "ZoroarkDarkrai": 8,
      "-": 134,
      "seanjyjy": 259
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PopupWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Controller for PopupWindow."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class PopupWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param fxmlFileName String representation of the fxml file name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param root The root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public PopupWindow(String fxmlFileName, Stage root) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(fxmlFileName, root);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        addCloseWindowOnEsc(root);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Shows the secondary window."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return A boolean value representing whether a help window is being shown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Closes the help window when the escape button is pressed and released."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param stage Current stage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static void addCloseWindowOnEsc(Stage stage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        stage.addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (KeyCode.ESCAPE \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                stage.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // FXML properties"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COLOR \u003d \"#5A4DEB\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_FONT \u003d \"Nunito\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow resultDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a display containing the results of the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Displays the {@code feedbackToUser} in {@code resultDisplay}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param feedbackToUser The feedback message to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text text \u003d new Text(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        clearHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setNewText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the color and font of the {@code text}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text The text to be styled."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setTextStyle(Text text) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFill(Color.web(TEXT_COLOR));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFont(Font.font(TEXT_FONT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Clears any old text in {@code resultDisplay}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void clearHistory() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Displays the {@code text} in {@code resultDisplay}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text The new text to be displayed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setNewText(Text text) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextStyle(text);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplay.getChildren().add(text);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "seanjyjy": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/InternHunterLogo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param logic The logic unit of the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the image from the image path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param imagePath A String representing the path of the image."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return an Image that is from the {@code imagePath}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters at the given {@code primaryStage}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The alert type."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title The title for the alert."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param headerText The header for the text."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param contentText The content for the text."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param owner The main stage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The alert type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title The title for the alert."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param headerText The header for the text."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param contentText The content for the text."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/MainWindow.css\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title The error message title."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param e The information of the error."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "seanjyjy": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param fxmlFileUrl A URL representation of the fxml file url."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param fxmlFileName String representation of the fxml file name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param fxmlFileUrl A URL representation of the fxml file url."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param root The root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param fxmlFileName String representation of the fxml file name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param root The root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Converts the String fxml file name into an URL."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param fxmlFileName The String representing the fxml file name directory."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return the URL of the fxml file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "seanjyjy": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ApplicationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.extractDayAndMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.APPLIED_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.INTERVIEW_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.OFFERED_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.WAITING_KEYWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_LIST_STRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.COMPANY_DISPLAY_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.DATE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.JOB_TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.PERIOD_DISPLAY_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.REQUIREMENTS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.STATUS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.WAGE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays some information of a {@code ApplicationItem}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ApplicationCard extends Card\u003cApplicationItem\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //Image Link"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String CALENDAR_IMAGE_LINK \u003d \"/images/calendar.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String MIN_WIDTH_STATUS_BOX \u003d \" -fx-min-width: 60;\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String MAX_WIDTH_STATUS_BOX \u003d \" -fx-max-width: 60;\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String MIN_HEIGHT_STATUS_BOX \u003d \" -fx-min-height: 20;\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String MAX_HEIGHT_STATUS_BOX \u003d \" -fx-max-height: 20;\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TRANSLATE_Y_STATUS_BOX \u003d \"-fx-translate-y: 5;\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ALIGNMENT_STATUS_BOX \u003d \"-fx-alignment: center;\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DEFAULT_STATUS_BOX \u003d MIN_WIDTH_STATUS_BOX + MIN_HEIGHT_STATUS_BOX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + MAX_HEIGHT_STATUS_BOX + MAX_WIDTH_STATUS_BOX + TRANSLATE_Y_STATUS_BOX + ALIGNMENT_STATUS_BOX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ACCEPTED_COLOR \u003d \"-fx-background-color: #3ADB9D;\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String WAITING_COLOR \u003d \"-fx-background-color: #F4D014;\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String REJECTED_COLOR \u003d \"-fx-background-color: #F02E62;\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String APPLIED_COLOR \u003d \"-fx-background-color: #399fd2;\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String INTERVIEW_COLOR \u003d \"-fx-background-color: #f86a23;\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String OFFERED_COLOR \u003d \"-fx-background-color: #0e2578;\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int IMAGE_HEIGHT_WIDTH \u003d 23;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a card display with information of {@code ApplicationItem} and with a index of {@code displayIndex}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param applicationItem The application item to be displayed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayedIndex The index of the profile item."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ApplicationCard(ApplicationItem applicationItem, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(applicationItem, displayedIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeInternshipCardGui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the id, name, requirements, status, period, wages, company name, date on the card."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeInternshipCardGui() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setId(displayedIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setRequirements();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setStatus();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setPeriod();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setWage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setCompanyName();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the name on the card."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object jobTitle \u003d mapping.get(JOB_TITLE_DISPLAY_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setName(jobTitle.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the requirements on the card."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setRequirements() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object requirements \u003d mapping.get(REQUIREMENTS_DISPLAY_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_LIST_STRING.test(requirements.toString())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setTags(requirements.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the status on the card."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setStatus() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object status \u003d mapping.get(STATUS_DISPLAY_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_LIST_STRING.test(status.toString())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setStatusStyle(status.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the style of the status depending on {@code statusType}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param statusType The type of status the user inputted in."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setStatusStyle(String statusType) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String updatedStatusBoxStyle \u003d DEFAULT_STATUS_BOX;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (statusType) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (APPLIED_KEYWORD):"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(APPLIED_KEYWORD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            updatedStatusBoxStyle +\u003d APPLIED_COLOR;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (INTERVIEW_KEYWORD):"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(INTERVIEW_KEYWORD);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            updatedStatusBoxStyle +\u003d INTERVIEW_COLOR;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (WAITING_KEYWORD):"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(WAITING_KEYWORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            updatedStatusBoxStyle +\u003d WAITING_COLOR;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (REJECTED_KEYWORD):"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(REJECTED_KEYWORD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            updatedStatusBoxStyle +\u003d REJECTED_COLOR;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (OFFERED_KEYWORD):"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(OFFERED_KEYWORD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            updatedStatusBoxStyle +\u003d OFFERED_COLOR;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (ACCEPTED_KEYWORD):"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(ACCEPTED_KEYWORD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            updatedStatusBoxStyle +\u003d ACCEPTED_COLOR;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        statusBox.setStyle(updatedStatusBoxStyle);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the company name on the card."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setCompanyName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object companyName \u003d mapping.get(COMPANY_DISPLAY_NAME);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextAt(COMPANY_DISPLAY_NAME, companyName.toString(), LineNumber.L1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the wages on the card."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setWage() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object wage \u003d mapping.get(WAGE_DISPLAY_NAME);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextAt(WAGE_DISPLAY_NAME, wage.toString(), LineNumber.L2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the period on the card."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setPeriod() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object period \u003d mapping.get(PERIOD_DISPLAY_NAME);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextAt(PERIOD_DISPLAY_NAME, period.toString(), LineNumber.L3);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the date and image on the card."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setDate() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image calendarIcon \u003d new Image(this.getClass().getResourceAsStream(CALENDAR_IMAGE_LINK));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        imageView.setImage(calendarIcon);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setImageStyling();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object dateInformation \u003d mapping.get(DATE_DISPLAY_NAME);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] dateInformationArray \u003d dateInformation.toString().split(\" \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.setText(extractDayAndMonth(dateInformationArray));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the image styling on card."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setImageStyling() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        imageView.setFitHeight(IMAGE_HEIGHT_WIDTH);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        imageView.setFitWidth(IMAGE_HEIGHT_WIDTH);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "seanjyjy": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.textstyle.TitleDescription.createTitleDescription;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.textstyle.TitleDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays some information of a {@code Item}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class Card\u003cT extends Item\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"Card.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected T item;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected int displayedIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected LinkedHashMap\u003cString, Object\u003e mapping;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected VBox statusBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected Label status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected ImageView imageView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected Label date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow l1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow l2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow l3;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a card with information regarding {@code item} with index of {@code displayedIndex}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param item The item to be displayed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayedIndex The index of the item."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Card(T item, int displayedIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.mapping \u003d item.getMapping();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the item in the card."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return The item in the card."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected T getItem() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the name on the card."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param cardName The name of card."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setName(String cardName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        name.setText(cardName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the tags on the card."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tagNames A string containing all the tag names."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setTags(String tagNames) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // to ensure that we can use the methods without errors."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(tagNames);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] tagList \u003d generateTags(tagNames);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setAllTags(tagList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Formats the {@code tagNames} into a list of tag names."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tagNames A string containing all the tag names."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An array that contains a list of tag names."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String[] generateTags(String tagNames) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int length \u003d tagNames.length();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tagNames.substring(1, length - 1).split(\",\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets each tag with a particular tag name."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tagList A list of tag names."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setAllTags(String ... tagList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (String tag : tagList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Label label \u003d new Label(tag); // figure out how to text align"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tags.getChildren().add(label);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the id of the card with {@code displayIndex}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayedIndex The index of the card."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setId(int displayedIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the information of the card with {@code title} and {@code description} in the position depending"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * on the {@code lineNumber}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title The title of the information."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description The description of the information."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param lineNumber The linenumber to denote the position of the information."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setTextAt(String title, String description, LineNumber lineNumber) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TitleDescription titleDescription \u003d createTitleDescription(title + \": \", description);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledTitle \u003d titleDescription.getTitle();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledDescription \u003d titleDescription.getDescription();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch(lineNumber) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case L1:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setLineText(l1, styledTitle, styledDescription);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case L2:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setLineText(l2, styledTitle, styledDescription);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case L3:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setLineText(l3, styledTitle, styledDescription);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the {@code styledTitle} and {@code styledDescription} at {@code textFlow}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param textFlow The text flow to be displayed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param styledTitle A text containing the styled title."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param styledDescription A text containing the styled description."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param \u003cK\u003e The type of text flow."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private \u003cK extends Pane\u003e void setLineText(K textFlow, Text styledTitle, Text styledDescription) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        textFlow.getChildren().addAll(styledTitle, styledDescription);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Card\u003c? extends Item\u003e card \u003d (Card\u003c? extends Item\u003e) other;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "seanjyjy": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/CompanyCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_LIST_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.ADDRESS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.COMPANY_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.EMAIL_DISPLAY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INDUSTRIES_DISPLAY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.PHONE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays some information of a {@code CompanyItem}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class CompanyCard extends Card\u003cCompanyItem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a card display with information of {@code companyItem} and with a index of {@code displayIndex}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param companyItem The company item to be displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayedIndex The index of the profile item."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CompanyCard(CompanyItem companyItem, int displayedIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(companyItem, displayedIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeCompanyCardGui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the id, name, industries, phone, email, address on the card."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeCompanyCardGui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setId(displayedIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setIndustries();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setPhone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setEmail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setAddress();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the name on the card."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object companyName \u003d mapping.get(COMPANY_DISPLAY_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setName(companyName.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the industries information on the card."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setIndustries() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object industries \u003d mapping.get(INDUSTRIES_DISPLAY_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!IS_EMPTY_LIST_STRING.test(industries.toString())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setTags(industries.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the phone information on the card."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setPhone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object phone \u003d mapping.get(PHONE_DISPLAY_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextAt(PHONE_DISPLAY_NAME, phone.toString(), LineNumber.L1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the email on the card."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setEmail() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object email \u003d mapping.get(EMAIL_DISPLAY_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextAt(EMAIL_DISPLAY_NAME, email.toString(), LineNumber.L2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the address on the card."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setAddress() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object address \u003d mapping.get(ADDRESS_DISPLAY_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextAt(ADDRESS_DISPLAY_NAME, address.toString(), LineNumber.L3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/LineNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Represents the line number on the card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public enum LineNumber {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    L1, L2, L3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ProfileCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.transform.Translate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays some information of a {@code ProfileItem}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ProfileCard extends Card\u003cProfileItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //Image Link"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ACHIEVEMENT_IMAGE_LINK \u003d \"/images/achievement.png\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EXPERIENCE_IMAGE_LINK \u003d \"/images/experience.png\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String SKILLS_IMAGE_LINK \u003d \"/images/skills.png\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int IMAGE_HEIGHT_WIDTH \u003d 60;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int IMAGE_TRANSLATE_Y \u003d -25;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a card display with information of {@code profileItem} and with a index of {@code displayIndex}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param profileItem The profile item to be displayed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayedIndex The index of the profile item."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ProfileCard(ProfileItem profileItem, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(profileItem, displayedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeUserCardGui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the id, name and image on the card."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeUserCardGui() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setId(displayedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setImageType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the name on the card."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object title \u003d mapping.get(TITLE_DISPLAY_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setName(title.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the image on the card."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setImageType() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        switch (getItem().getCategory()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case ACHIEVEMENT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            image \u003d new Image(this.getClass().getResourceAsStream(ACHIEVEMENT_IMAGE_LINK));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case EXPERIENCE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            image \u003d new Image(this.getClass().getResourceAsStream(EXPERIENCE_IMAGE_LINK));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case SKILL:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            image \u003d new Image(this.getClass().getResourceAsStream(SKILLS_IMAGE_LINK));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            image \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false : \"NO SUCH TYPE EXISTS\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setImageStyling();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        imageView.setImage(image);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the image styling on the card."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setImageStyling() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        imageView.setFitHeight(IMAGE_HEIGHT_WIDTH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        imageView.setFitWidth(IMAGE_HEIGHT_WIDTH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Translate translate \u003d new Translate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        translate.setY(IMAGE_TRANSLATE_Y);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        imageView.getTransforms().addAll(translate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "seanjyjy": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/ApplicationDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.display.DisplayKeyList.APPLICATION_DISPLAY_KEY_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.JOB_TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.REQUIREMENTS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays all the information of a {@code ApplicationItem}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ApplicationDisplay extends InformationDisplay\u003cApplicationItem\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A predicate that checks whether the current key is requirements."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Predicate\u003cString\u003e isRequirements \u003d key -\u003e key.equals(REQUIREMENTS_DISPLAY_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A function that returns back the same string. Mainly for polymorphism usage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Function\u003cString, String\u003e returnSameString \u003d string -\u003e string;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code ApplicationDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param applicationItem The application item to be displayed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ApplicationDisplay(Stage primaryStage, ApplicationItem applicationItem) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(primaryStage, applicationItem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeApplicationDisplayGui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code ApplicationDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param applicationItem The application item to be displayed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An Application Display with information of the {@code applicationItem} in {@code primaryStage}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static ApplicationDisplay getApplicationDisplay(Stage primaryStage, ApplicationItem applicationItem) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new ApplicationDisplay(primaryStage, applicationItem);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the title and information of the {@code applicationItem} for display."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeApplicationDisplayGui() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setJobTitle();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setApplicationInformation();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the title of the {@code applicationItem} for display."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setJobTitle() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object jobTitle \u003d mapping.get(JOB_TITLE_DISPLAY_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformationTitle(jobTitle.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the information of the {@code applicationItem} for display."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setApplicationInformation() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformation(editString, returnSameString, isRequirements, TabName.APPLICATION, APPLICATION_DISPLAY_KEY_LIST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/CompanyDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.display.DisplayKeyList.COMPANY_DISPLAY_KEY_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.COMPANY_DISPLAY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INDUSTRIES_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INTERNSHIPS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays all the information of a {@code CompanyItem}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class CompanyDisplay extends InformationDisplay\u003cCompanyItem\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A Predicate that checks if the current key in the key list is of industries or internships."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Predicate\u003cString\u003e isIndustriesOrInternship \u003d key -\u003e key.equals(INDUSTRIES_DISPLAY_NAME)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        || key.equals(INTERNSHIPS_DISPLAY_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A function that takes in a string containing information of the internship and formats it with bullet"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * points and new line for each attributes in the internship information."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Function\u003cString, String\u003e formatInternshipDetail \u003d string -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String s \u003d string.substring(0, string.length() - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        s \u003d s.replaceAll(\"\\n, \", \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        StringBuffer buffer \u003d new StringBuffer(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        buffer.insert(0, 1 + \". \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        formatNumbering(buffer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return formatBulletPoints(buffer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code CompanyDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param companyItem The company item to be displayed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CompanyDisplay(Stage primaryStage, CompanyItem companyItem) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(primaryStage, companyItem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeCompanyDisplayGui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code CompanyDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param companyItem The company item to be displayed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A company display that contains information of the {@code companyItem} in {@code primaryStage}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static CompanyDisplay getCompanyDisplay(Stage primaryStage, CompanyItem companyItem) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new CompanyDisplay(primaryStage, companyItem);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the title and information of the {@code companyItem} for display."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeCompanyDisplayGui() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setCompanyName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setCompanyInformation();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the title of the {@code companyItem} for display."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setCompanyName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object jobTitle \u003d mapping.get(COMPANY_DISPLAY_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformationTitle(jobTitle.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the information of the {@code companyItem} for display."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setCompanyInformation() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformation(editString, formatInternshipDetail, isIndustriesOrInternship, TabName.COMPANY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            COMPANY_DISPLAY_KEY_LIST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Formats the {@code buffer} to number the internships."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param buffer A stringbuffer containing information of the internships."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void formatNumbering(StringBuffer buffer) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int index \u003d buffer.indexOf(\"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int counter \u003d 2;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (index !\u003d -1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String replacement \u003d \"\\n\" + counter + \". \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            buffer.replace(index, index + 1, replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            index +\u003d replacement.length();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            index \u003d buffer.indexOf(\"\\n\", index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Formats the {@code buffer} to have bullet points for each attributes."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param buffer A stringbuffer containing information of the internship."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string that is formatted with bullet points."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String formatBulletPoints(StringBuffer buffer) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String string \u003d buffer.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        string \u003d string.replaceAll(COMMA_TWO_SPACE, \"\\n\" + BULLET_WITH_TWO_SPACE_FRONT_ONE_BACK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/DisplayKeyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.ADDRESS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.COMPANY_DISPLAY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.DATE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.DESCRIPTORS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.EMAIL_DISPLAY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INDUSTRIES_DISPLAY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INTERNSHIPS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.PERIOD_DISPLAY_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.PHONE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.REQUIREMENTS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.STATUS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.TYPE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.WAGE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A class that contains the key list to access the information in a particular order."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DisplayKeyList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A fix order for the key list to access the application display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String[] APPLICATION_DISPLAY_KEY_LIST \u003d {COMPANY_DISPLAY_NAME, PERIOD_DISPLAY_NAME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        WAGE_DISPLAY_NAME, REQUIREMENTS_DISPLAY_NAME, STATUS_DISPLAY_NAME, DATE_DISPLAY_NAME"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A fix order for the key list to access the company display."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String[] COMPANY_DISPLAY_KEY_LIST \u003d {COMPANY_DISPLAY_NAME, PHONE_DISPLAY_NAME,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        EMAIL_DISPLAY_NAME, ADDRESS_DISPLAY_NAME, INDUSTRIES_DISPLAY_NAME, INTERNSHIPS_DISPLAY_NAME"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A fix order for the key list to access the profile display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String[] PROFILE_DISPLAY_KEY_LIST \u003d {TITLE_DISPLAY_NAME, TYPE_DISPLAY_NAME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        DESCRIPTORS_DISPLAY_NAME"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/InformationDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_SAME_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.DESCRIPTORS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.INTERNSHIPS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays all information of a {@code Item}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class InformationDisplay\u003cT extends Item\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected static final String BULLET_WITH_ONE_SPACE \u003d \"\\u2022 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected static final String BULLET_WITH_TWO_SPACE_FRONT_ONE_BACK \u003d \"  \\u2022 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected static final String COMMA_TWO_SPACE \u003d \", {2}\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"InformationDisplay.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int INFORMATION_HEIGHT_SHRINK \u003d 175;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int INFORMATION_WIDTH_SHRINK \u003d 100;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected T item;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected LinkedHashMap\u003cString, Object\u003e mapping;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A function that removes the bracket in the string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected final Function\u003cString, String\u003e editString \u003d string -\u003e string.substring(1, string.length() - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ScrollPane scrollableInformationDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private HBox nameBar;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Label informationTitle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox information;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox informationDisplay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox informationDisplayContainer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code InformationDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param item The item to be displayed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InformationDisplay(Stage primaryStage, T item) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeInformationDisplay(primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.mapping \u003d item.getMapping();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the size of {@code InformationDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeInformationDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        scrollableInformationDisplay.prefHeightProperty()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            .bind(primaryStage.heightProperty().subtract(INFORMATION_HEIGHT_SHRINK));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        nameBar.maxWidthProperty().bind(informationDisplay.widthProperty().subtract(INFORMATION_WIDTH_SHRINK));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds {@code titleDescriptionDisplay} into {@code InformationDisplay}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param titleDescriptionDisplay A display that contains a title and description."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void addInformation(TitleDescriptionDisplay titleDescriptionDisplay) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        information.getChildren().addAll(titleDescriptionDisplay);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds {@code title} into {@code InformationDisplay}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title A string representing the title for the display."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setInformationTitle(String title) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        informationTitle.setText(title);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the information onto the display in {@code MainWindow}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param editString A function that removes the brackets of the string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param formatString A function that formats the string depending the the {@code tabName}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param haveBrackets A predicate that checks if the string has brackets."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tabName The tab that will be displayed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayKeyList A pre-fixed order of keys to access the display depending on the {@code tabName}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void setInformation(Function\u003cString, String\u003e editString, Function\u003cString, String\u003e formatString,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Predicate\u003cString\u003e haveBrackets, TabName tabName, String ... displayKeyList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (String key : displayKeyList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Object object \u003d mapping.get(key);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String detail \u003d object.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (haveBrackets.test(key)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                detail \u003d editString.apply(detail);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (IS_SAME_STRING.test(key, INTERNSHIPS_DISPLAY_NAME) \u0026\u0026 !IS_EMPTY_STRING.test(detail)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                detail \u003d formatString.apply(detail);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (IS_SAME_STRING.test(key, DESCRIPTORS_DISPLAY_NAME) \u0026\u0026 !IS_EMPTY_STRING.test(detail)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                detail \u003d formatString.apply(detail);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (IS_EMPTY_STRING.test(detail)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                detail \u003d \"-\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            addInformation(TitleDescriptionDisplay.addTitleDescriptionDisplay(key, detail, tabName));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/ProfileDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.display.DisplayKeyList.PROFILE_DISPLAY_KEY_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.DESCRIPTORS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.panel.PanelDisplayKeyword.TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays all the information of a {@code ProfileItem}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ProfileDisplay extends InformationDisplay\u003cProfileItem\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A function that removes the bracket of the string and indent each attribute."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Function\u003cString, String\u003e editString \u003d string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        -\u003e string.substring(1, string.length() - 1).replaceAll(\", \", \"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A predicate that checks if the current key is a descriptor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Predicate\u003cString\u003e isDescriptors \u003d key -\u003e key.equals(DESCRIPTORS_DISPLAY_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A function that formats the information of the profile with bullet points."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Function\u003cString, String\u003e formatProfileDetail \u003d string -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        string \u003d BULLET_WITH_ONE_SPACE + string;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return string.replaceAll(\"\\n\", \"\\n\" + BULLET_WITH_ONE_SPACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code ProfileDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param profileItem The profile item to be displayed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ProfileDisplay(Stage primaryStage, ProfileItem profileItem) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(primaryStage, profileItem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeProfileDisplayGui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code ProfileDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param primaryStage The main stage of the app."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param profileItem The profile item to be displayed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A Profile Display with information of the {@code profileItem} in {@code primaryStage}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static ProfileDisplay getProfileDisplay(Stage primaryStage, ProfileItem profileItem) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new ProfileDisplay(primaryStage, profileItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the title and information of the {@code profileItem} for display."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeProfileDisplayGui() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setDisplayName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setProfileInformation();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the title of the {@code profileItem} for display."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setDisplayName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Object jobTitle \u003d mapping.get(TITLE_DISPLAY_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformationTitle(jobTitle.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the information of the {@code profileItem} for display."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setProfileInformation() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformation(editString, formatProfileDetail, isDescriptors, TabName.PROFILE, PROFILE_DISPLAY_KEY_LIST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/TitleDescriptionDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.textstyle.TitleDescription.createTitleDescription;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.textstyle.TitleDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays the {@code title} and {@code description} of an {@code Item}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TitleDescriptionDisplay extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"/view/TitleDescriptionDisplay.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String PROFILE_INFORMATION_WIDTH \u003d \"-fx-min-width: 95\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String COMPANY_AND_APPLICATION_INFORMATION_WIDTH \u003d \"-fx-min-width: 105\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox titleInformation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox descriptionInformation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code TitleDescriptionDisplay} with {@code displayTitle}, {@code displayDescription} for"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@code tab} display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayTitle A string representing the title for the display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayDescription A string representing the description for the display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tab The tab that this displayed should be shown at."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TitleDescriptionDisplay(String displayTitle, String displayDescription, TabName tab) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addDisplayInformation(displayTitle, displayDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setWidth(tab);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * An accessor to add a {@code TitleDescriptionDisplay} with {@code displayTitle}, {@code displayDescription} for"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@code tab} display."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayTitle A string representing the title for the display."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayDescription A string representing the description for the display."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tab The tab that this displayed should be shown at."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A TitleDescriptionDisplay."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TitleDescriptionDisplay addTitleDescriptionDisplay(String displayTitle, String displayDescription,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName tab) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new TitleDescriptionDisplay(displayTitle, displayDescription, tab);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds a title and description into the {@code TitleDescriptionDisplay}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayTitle A string representing the title for the display."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayDescription A string representing the description for the display."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void addDisplayInformation(String displayTitle, String displayDescription) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(displayDescription, displayDescription);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TitleDescription titleDescription \u003d createTitleDescription(displayTitle, displayDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        title.getChildren().addAll(titleDescription.getTitle());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.getChildren().addAll(titleDescription.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adjusts the width of the title based on which {@code tab} display."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tab The tab that the display is currently at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setWidth(TabName tab) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert (tab.equals(TabName.PROFILE) || tab.equals(TabName.APPLICATION) || tab.equals(TabName.COMPANY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            titleInformation.setStyle(COMPANY_AND_APPLICATION_INFORMATION_WIDTH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            titleInformation.setStyle(PROFILE_INFORMATION_WIDTH);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/ApplicationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.cards.ApplicationCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that contains all the information of {@code ApplicationItem} and displays it"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * as a scrollable list of cards."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ApplicationListPanel extends ListPanel\u003cApplicationItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a scrollable list panel with information of {@code ApplicationItem}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param applicationItemList List containing all the application item in the storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ApplicationListPanel(ObservableList\u003cApplicationItem\u003e applicationItemList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(applicationItemList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ApplicationListViewCell());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates each cell in the list panel with information of {@code ApplicationItem}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    static class ApplicationListViewCell extends ListCell\u003cApplicationItem\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        protected void updateItem(ApplicationItem applicationItem, boolean empty) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            super.updateItem(applicationItem, empty);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (empty || applicationItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(new ApplicationCard(applicationItem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/CompanyListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.cards.CompanyCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that contains all the information of {@code CompanyItem} and displays it"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * as a scrollable list of cards."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class CompanyListPanel extends ListPanel\u003cCompanyItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a scrollable list panel with information of {@code CompanyItem}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param companyItemList List containing all the company item in the storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CompanyListPanel(ObservableList\u003cCompanyItem\u003e companyItemList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(companyItemList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new CompanyListViewCell());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates each cell in the list panel with information of {@code CompanyItem}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    static class CompanyListViewCell extends ListCell\u003cCompanyItem\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        protected void updateItem(CompanyItem companyItem, boolean empty) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            super.updateItem(companyItem, empty);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (empty || companyItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(new CompanyCard(companyItem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/ListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A generic UI component that contains all the information of {@code Item} and displays it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * as a scrollable list of cards."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class ListPanel\u003cT extends Item\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected ListView\u003cT\u003e itemListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a scrollable list panel with information of {@code Item}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param itemList List containing all the item in the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ListPanel(ObservableList\u003cT\u003e itemList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        itemListView.addEventFilter(MouseEvent.MOUSE_PRESSED, (EventHandler\u003cEvent\u003e) Event::consume);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/PanelDisplayKeyword.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Holds all magic strings related to the UI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class PanelDisplayKeyword {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** Internship display names */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String JOB_TITLE_DISPLAY_NAME \u003d \"Job title\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String PERIOD_DISPLAY_NAME \u003d \"Period\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String WAGE_DISPLAY_NAME \u003d \"Wage\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String REQUIREMENTS_DISPLAY_NAME \u003d \"Requirements\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** Application display names */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String STATUS_DISPLAY_NAME \u003d \"Status\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String DATE_DISPLAY_NAME \u003d \"Date\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** Company display names */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String COMPANY_DISPLAY_NAME \u003d \"Company name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String PHONE_DISPLAY_NAME \u003d \"Phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String EMAIL_DISPLAY_NAME \u003d \"Email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String ADDRESS_DISPLAY_NAME \u003d \"Address\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String INDUSTRIES_DISPLAY_NAME \u003d \"Industries\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String INTERNSHIPS_DISPLAY_NAME \u003d \"Internships\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** Profile display names */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String TITLE_DISPLAY_NAME \u003d \"Title\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String TYPE_DISPLAY_NAME \u003d \"Type\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String DESCRIPTORS_DISPLAY_NAME \u003d \"Descriptors\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/ProfileListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.cards.ProfileCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that contains all the information of {@code ProfileItem} and displays it"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * as a scrollable list of cards."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ProfileListPanel extends ListPanel\u003cProfileItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a scrollable list panel with information of {@code ProfileItem}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param profileItemsList List containing all the profile item in the storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ProfileListPanel(ObservableList\u003cProfileItem\u003e profileItemsList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(profileItemsList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ProfileListViewCell());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates each cell in the list panel with information of {@code ProfileItem}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    static class ProfileListViewCell extends ListCell\u003cProfileItem\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        protected void updateItem(ProfileItem profileItem, boolean empty) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            super.updateItem(profileItem, empty);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (empty || profileItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(new ProfileCard(profileItem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tabs/TabName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.tabs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Type of Tabs available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public enum TabName {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    APPLICATION, COMPANY, PROFILE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a string representation of the {@code TabName}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return String representation of the {@code TabName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return StringUtil.toTitleCase(super.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tabs/Tabs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.tabs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Tabs which allow switching of screens for different information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Tabs extends VBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"/view/Tabs.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TRANSPARENT \u003d \"-fx-background-color: transparent;\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TAB_COLOR \u003d \"-fx-background-color: #BED0F7;\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String APPLICATION_Y_TRANSLATE \u003d \"-fx-translate-y: -13.5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String COMPANY_Y_TRANSLATE \u003d \"-fx-translate-y: 0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String PROFILE_Y_TRANSLATE \u003d \"-fx-translate-y: -27\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Image links"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String APPLICATION_IMAGE_LINK \u003d \"/images/application.png\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String COMPANY_IMAGE_LINK \u003d \"/images/company.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String PROFILE_IMAGE_LINK \u003d \"/images/profile.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button applicationButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button companyButton;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button profileButton;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox company;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox profile;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView applicationIcon;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView companyIcon;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView profileIcon;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates the {@code Tabs} in the given {@code primaryStage} of the {@code mainWindow}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param mainWindow The Main Window of the app."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param logic The logic unit of the app."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Tabs(MainWindow mainWindow, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // Loading the information of the GUI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // initialize the GUI of the tabs."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            company.setStyle(TAB_COLOR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setTabIcons();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates the {@code Tabs} information in the {@code primaryStage} of the {@code mainWindow}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param mainWindow The Main Window of the app."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param logic The logic unit of the app."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A tab display."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static Tabs getTabs(MainWindow mainWindow, Logic logic) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new Tabs(mainWindow, logic);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Switches the tab display depending on {@code tabName}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tabName The tab to be switched to."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void switchTab(TabName tabName) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tabName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setTabToCompany();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setTabToApplication();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setTabToProfile();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets up the tab icons in GUI of {@code MainWindow}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setTabIcons() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image applicationIconImage \u003d new Image(getClass().getResourceAsStream(APPLICATION_IMAGE_LINK));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationIcon.setImage(applicationIconImage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image companyIconPicture \u003d new Image(getClass().getResourceAsStream(COMPANY_IMAGE_LINK));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyIcon.setImage(companyIconPicture);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image profileIconPicture \u003d new Image(getClass().getResourceAsStream(PROFILE_IMAGE_LINK));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileIcon.setImage(profileIconPicture);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the tab to be of {@code application} in the {@code stage}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setTabToApplication() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust tab bar position"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setColor(application, APPLICATION_Y_TRANSLATE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(company, COMPANY_Y_TRANSLATE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(profile, PROFILE_Y_TRANSLATE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the tab to be of {@code company} in the {@code stage}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setTabToCompany() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust tab bar position"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(application, APPLICATION_Y_TRANSLATE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setColor(company, COMPANY_Y_TRANSLATE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(profile, PROFILE_Y_TRANSLATE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the tab to be of {@code profile} in the {@code stage}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setTabToProfile() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust tab bar position"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(application, APPLICATION_Y_TRANSLATE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(company, COMPANY_Y_TRANSLATE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setColor(profile, PROFILE_Y_TRANSLATE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the color of the {@code scene} to be transparent."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param scene The scene to be changed in color."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param distance The distance of the scene in the {@code mainWindow}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param \u003cT\u003e The type of scene."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private \u003cT extends Pane\u003e void setTransparent(T scene, String distance) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        scene.setStyle(TRANSPARENT + distance);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the color of the {@code scene} to be of its own {@code TAB_COLOR}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param scene The scene to be changed in color."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param distance The distance of the scene in the {@code mainWindow}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param \u003cT\u003e The type of scene."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private \u003cT extends Pane\u003e void setColor(T scene, String distance) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        scene.setStyle(TAB_COLOR + distance);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 179
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/textstyle/TitleDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.textstyle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Contains a {@code tile} and a {@code description}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TitleDescription {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DISPLAY_FONT \u003d \"Nunito\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int DISPLAY_SIZE \u003d 12;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TITLE_COLOR \u003d \"#363F80\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DESCRIPTION_COLOR \u003d \"#8E8FB5\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Text title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Text description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code TitleDescription} containing a title and a description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title The title of the information to be styled."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description The description of the information to be styled."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TitleDescription(Text title, Text description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return The styled {@code title};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Text getTitle() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the description."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return The styled {@code description};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Text getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a {@code TitleDescription} that contains both the styled title and the styled description."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayTitle The title of the information."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param displayDescription The description of the information."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A titleDescription object that contains a styled title and a styled description."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TitleDescription createTitleDescription(String displayTitle, String displayDescription) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireAllNonNull(displayDescription, displayTitle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledTitle \u003d new Text(displayTitle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledDescription \u003d new Text(displayDescription);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextStyle(styledTitle, Color.web(TITLE_COLOR));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextStyle(styledDescription, Color.web(DESCRIPTION_COLOR));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new TitleDescription(styledTitle, styledDescription);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets a text with a pre-defined font and its {@code color}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text The text to be styled."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param color The color of the text."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static void setTextStyle(Text text, Color color) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireAllNonNull(text, color);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFont(Font.font(DISPLAY_FONT, FontWeight.BOLD, DISPLAY_SIZE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFill(color);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!(obj instanceof TitleDescription)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TitleDescription other \u003d (TitleDescription) obj;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return title.toString().equals(other.title.toString())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 description.toString().equals(other.description.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 94
    }
  },
  {
    "path": "src/main/resources/view/Card.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cTextFlow fx:id\u003d\"l1\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cTextFlow fx:id\u003d\"l2\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cTextFlow fx:id\u003d\"l3\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cVBox styleClass\u003d\"cell_right_portion\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cVBox fx:id\u003d\"statusBox\" styleClass\u003d\"cell_status_box_label\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_status_label\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cImageView fx:id\u003d\"imageView\" translateY\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_date_label\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "seanjyjy": 13
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cTextField focusTraversable\u003d\"false\" maxWidth\u003d\"Infinity\" styleClass\u003d\"text_field_style\" fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cButton styleClass\u003d\"button_style\" fx:id\u003d\"sendButton\" onAction\u003d\"#handleCommandEntered\" mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" fx:id\u003d\"buttonImage\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "seanjyjy": 11
    }
  },
  {
    "path": "src/main/resources/view/ExitDialog.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.DialogPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003cDialogPane fx:id\u003d\"dialogPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            prefHeight\u003d\"144.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \u003cheader\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        \u003cLabel text\u003d\"Confirm Exit\" textFill\u003d\"#363f80\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003cFont name\u003d\"Nunito Bold\" size\u003d\"13.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \u003c/header\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        \u003cVBox spacing\u003d\"20.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003cLabel text\u003d\"Are you sure you want to exit?\" textFill\u003d\"#8e8fb5\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003cButtonBar\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    \u003cbuttons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        \u003cButton id\u003d\"yesButton\" fx:id\u003d\"yesButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                                onAction\u003d\"#confirmExit\" stylesheets\u003d\"@ExitDialog.css\" text\u003d\"Yes\" textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        \u003cButton id\u003d\"noButton\" fx:id\u003d\"noButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                                onAction\u003d\"#cancelExit\" stylesheets\u003d\"@ExitDialog.css\" text\u003d\"No\" textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    \u003c/buttons\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        \u003cInsets top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c/DialogPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 44
    }
  },
  {
    "path": "src/main/resources/view/InformationDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cScrollPane fx:id\u003d\"scrollableInformationDisplay\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"information_display_container_scrollable\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox fx:id\u003d\"informationDisplay\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"information_display\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox fx:id\u003d\"informationDisplayContainer\"  styleClass\u003d\"information_display_container\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cLabel fx:id\u003d\"informationTitle\" styleClass\u003d\"information_display_title\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cHBox fx:id\u003d\"nameBar\" styleClass\u003d\"information_display_bar\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox fx:id\u003d\"information\" styleClass\u003d\"information_container\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 20
    }
  },
  {
    "path": "src/main/resources/view/InternshipsWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         minWidth\u003d\"600\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cScene stylesheets\u003d\"@MainWindow.css\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cTextArea fx:id\u003d\"matchingInternships\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                  editable\u003d\"false\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                  wrapText\u003d\"true\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                  VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                  styleClass\u003d\"windowTextDisplay\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 23
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" title\u003d\"InternHunter\" minWidth\u003d\"932\" minHeight\u003d\"743\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cURL value\u003d\"@MainWindow.css\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cAnchorPane styleClass\u003d\"main_background_style\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "          \u003cGridPane styleClass\u003d\"main_background_style\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cRowConstraints vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox GridPane.columnIndex\u003d\"0\" GridPane.columnSpan\u003d\"1\" GridPane.rowIndex\u003d\"0\" GridPane.rowSpan\u003d\"5\" styleClass\u003d\"tabs_background_style\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox fx:id\u003d\"tabsContainer\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"tabs_container_style\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cScrollPane fx:id\u003d\"resultDisplayPlaceholder\" AnchorPane.bottomAnchor\u003d\"1.0\" GridPane.columnIndex\u003d\"1\" GridPane.columnSpan\u003d\"5\" GridPane.rowIndex\u003d\"3\" GridPane.valignment\u003d\"CENTER\" styleClass\u003d\"result_display_style\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox fillWidth\u003d\"true\" VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" AnchorPane.bottomAnchor\u003d\"1.0\" GridPane.columnIndex\u003d\"1\" GridPane.columnSpan\u003d\"5\" GridPane.rowIndex\u003d\"4\" GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox maxHeight\u003d\"Infinity\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"4\" styleClass\u003d\"cards_container_style\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox fx:id\u003d\"cardList\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"cards_container_inner_style\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox fx:id\u003d\"display\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"0\" styleClass\u003d\"display_container_style\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "          \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "seanjyjy": 33
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cTextFlow fx:id\u003d\"resultDisplay\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/resources/view/Tabs.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"100.0\" prefWidth\u003d\"95.0\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cHBox styleClass\u003d\"tab_parameter_style\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cButton fx:id\u003d\"companyButton\" mnemonicParsing\u003d\"false\" styleClass\u003d\"tab_button_style\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox styleClass\u003d\"tab_container_style\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"26.0\" fitWidth\u003d\"26.0\" fx:id\u003d\"companyIcon\" translateY\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cLabel text\u003d\"Company\" styleClass\u003d\"tab_label_style\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cHBox styleClass\u003d\"tab_line_style\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox fx:id\u003d\"company\" styleClass\u003d\"tab_bar_style\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cHBox styleClass\u003d\"tab_parameter_style\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cButton translateY \u003d \"-13.5\" fx:id\u003d\"applicationButton\" mnemonicParsing\u003d\"false\" styleClass\u003d\"tab_button_style\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox styleClass\u003d\"tab_container_style\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"27.0\" fitWidth\u003d\"27.0\" fx:id\u003d\"applicationIcon\" translateY\u003d\"10\" translateX\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cLabel text\u003d\"Application\" styleClass\u003d\"tab_label_style\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cHBox styleClass\u003d\"tab_line_style\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox fx:id\u003d\"application\" styleClass\u003d\"tab_bar_style\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cHBox styleClass\u003d\"tab_parameter_style\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cButton translateY \u003d \"-27\" fx:id\u003d\"profileButton\" mnemonicParsing\u003d\"false\" styleClass\u003d\"tab_button_style\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox  styleClass\u003d\"tab_container_style\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"23.0\" fitWidth\u003d\"23.0\" fx:id\u003d\"profileIcon\" translateY\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cLabel text\u003d\"Profile\" styleClass\u003d\"tab_label_style\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cHBox styleClass\u003d\"tab_line_style\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox fx:id\u003d\"profile\" styleClass\u003d\"tab_bar_style\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 44
    }
  },
  {
    "path": "src/main/resources/view/TitleDescriptionDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"title_description_container\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cVBox fx:id\u003d\"titleInformation\" styleClass\u003d\"title_information\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cTextFlow fx:id\u003d\"title\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cVBox fx:id\u003d\"descriptionInformation\" styleClass\u003d\"description_information\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cTextFlow fx:id\u003d\"description\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ParametersStub parametersStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private AppParameters expected;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(expected.equals(expected));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(expected.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(expected.equals(0.5f));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hashCode_equalHashCode_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // set json"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(expected.hashCode(), AppParameters.parse(parametersStub).hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hashCode_unEqualHashCode_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // set json"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config123.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(expected.hashCode(), AppParameters.parse(parametersStub).hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "seanjyjy": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SAME_SCREEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"applicationitemlist.json\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ApplicationItem.class, JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"companyitemlist.json\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        CompanyItem.class, JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"profileitemlist.json\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ProfileItem.class, JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(applicationItemListStorage, companyItemListStorage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                profileItemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String deleteCommand \u003d DeleteCommand.COMMAND_WORD + \" \" + APPLICATION_ALIAS + \" 9\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertCommandException(deleteCommand, String.format(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, APPLICATION_NAME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String switchCommand \u003d SwitchCommand.COMMAND_WORD + \" \" + COMPANY_ALIAS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertCommandSuccess(switchCommand, String.format(MESSAGE_SAME_SCREEN, TabName.COMPANY), model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Setup LogicManager with JsonItemListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"applicationitemlist.json\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ApplicationItem.class, JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"companyitemlist.json\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        CompanyItem.class, JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"profileitemlist.json\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ProfileItem.class, JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(applicationItemListStorage, companyItemListStorage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                profileItemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" int \" + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().addItem(expectedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // Todo: Update testcase for expected model"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredApplicationItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredApplicationItemList().remove(0));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredProfileItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredProfileItemList().remove(0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredCompanyItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCompanyItemList().remove(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getProfileViewIndex_equals_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getProfileViewIndex(), Index.fromOneBased(1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getCompanyViewIndex_equals_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getCompanyViewIndex(), Index.fromOneBased(1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getApplicationViewIndex_equals_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getApplicationViewIndex(), Index.fromOneBased(1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setProfileViewIndex_equals_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        logic.setProfileViewIndex(Index.fromOneBased(10));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getProfileViewIndex(), Index.fromOneBased(10));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setCompanyViewIndex_equals_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        logic.setCompanyViewIndex(Index.fromOneBased(10));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getCompanyViewIndex(), Index.fromOneBased(10));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setApplicationViewIndex_equals_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        logic.setApplicationViewIndex(Index.fromOneBased(10));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getApplicationViewIndex(), Index.fromOneBased(10));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getTabName_equals_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getTabName(), TabName.COMPANY);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName_changeTabNameToCompanyTestEquals_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        logic.setTabName(TabName.COMPANY);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getTabName(), TabName.COMPANY);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName_changeTabNameToApplicationTestEquals_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        logic.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getTabName(), TabName.APPLICATION);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName_changeTabNameToProfileTestEquals_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        logic.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(logic.getTabName(), TabName.PROFILE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static class JsonItemListIoExceptionThrowingStub extends"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        private JsonItemListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            super(filePath, ApplicationItem.class, JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public void saveItemList(ReadOnlyItemList\u003cApplicationItem\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "ZoroarkDarkrai": 56,
      "orzymandias": 4,
      "-": 135,
      "seanjyjy": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().addItem(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getUnfilteredItemList().getItemList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "ZoroarkDarkrai": 7,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.getSampleApplicationItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model model \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), getSampleApplicationItemList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), getSampleApplicationItemList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.setApplicationList(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 6,
      "-": 27,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FEEDBACK \u003d \"feedback\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DIFFERENT \u003d \"different\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResultWithDefaultValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResultDifferentValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResultIsShowHelpTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResultIsExitTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResultIsSwitchTabTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResultIsSwitchDisplayFalse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResult \u003d new CommandResult(FEEDBACK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResultWithDefaultValue \u003d new CommandResult(FEEDBACK, false, false, false, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResultDifferentValue \u003d new CommandResult(DIFFERENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResultIsShowHelpTrue \u003d new CommandResult(FEEDBACK, true, false, false, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResultIsExitTrue \u003d new CommandResult(FEEDBACK, false, true, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResultIsSwitchTabTrue \u003d new CommandResult(FEEDBACK, false, false, true, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResultIsSwitchDisplayFalse \u003d new CommandResult(FEEDBACK, false, false, false, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(FEEDBACK)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResult.equals(commandResultWithDefaultValue));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.equals(commandResultDifferentValue));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isShowHelp value -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.equals(commandResultIsShowHelpTrue));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isExit value -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.equals(commandResultIsExitTrue));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isShowTab value -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.equals(commandResultIsSwitchTabTrue));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchDisplay value -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.equals(commandResultIsSwitchDisplayFalse));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(FEEDBACK).hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), commandResultDifferentValue.hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isShowHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), commandResultIsShowHelpTrue.hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isExit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), commandResultIsExitTrue.hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchTab value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), commandResultIsSwitchTabTrue.hashCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchDisplay value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), commandResultIsSwitchDisplayFalse.hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isShowHelp_false_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values inputted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultWithDefaultValue.isShowHelp());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isExit value"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsExitTrue.isShowHelp());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchTab value"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsSwitchTabTrue.isShowHelp());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchDisplay value"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsSwitchDisplayFalse.isShowHelp());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isShowHelp_true_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResultIsShowHelpTrue.isShowHelp());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isShowExit_false_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.isExit());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values inputted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultWithDefaultValue.isExit());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isShowHelp value"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsShowHelpTrue.isExit());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchTab value"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsSwitchTabTrue.isExit());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchDisplay value"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsSwitchDisplayFalse.isExit());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isShowExit_true_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResultIsExitTrue.isExit());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isSwitchTab_false_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.isSwitchTab());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values inputted"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultWithDefaultValue.isSwitchTab());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isShowHelp value"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsShowHelpTrue.isSwitchTab());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isExit value"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsExitTrue.isSwitchTab());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchDisplay value"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsSwitchDisplayFalse.isSwitchTab());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isSwitchTab_true_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResultIsSwitchTabTrue.isSwitchTab());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isSwitchDisplay_false_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isShowHelp value"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsShowHelpTrue.isSwitchDisplay());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isExit value"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsExitTrue.isSwitchDisplay());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchTab value"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsSwitchTabTrue.isSwitchDisplay());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different isSwitchDisplay value"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResultIsSwitchDisplayFalse.isSwitchDisplay());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isSwitchDisplay_true_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResult.isSwitchDisplay());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default values inputted"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResultWithDefaultValue.isSwitchDisplay());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "seanjyjy": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationNameContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemContainsKeywordPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY_RANDOM \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PREAMBLE_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid indexes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String VALID_INDEX_ONE \u003d \" \" + PREFIX_INDEX + INDEX_FIRST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String VALID_INDEX_TWO \u003d \" \" + PREFIX_INDEX + INDEX_SECOND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid indexes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_INDEX_RANDOM_STRING \u003d \" \" + PREFIX_INDEX + \"random\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e expectedAddressBook \u003d new ItemList\u003c\u003e(actualModel.getAddressBook().getUnfilteredItemList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getAddressBook().getFilteredItemList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook().getUnfilteredItemList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getAddressBook().getFilteredItemList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Todo: remove"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param targetIndex"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person person \u003d model.getAddressBook().getFilteredItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(1, model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the profileItem at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * {@code model}\u0027s profile list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static void showProfileItemAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProfileList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem profileItem \u003d model.getProfileItemFromFilteredList(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        final String[] splitTitle \u003d profileItem.getTitle().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.updateFilteredProfileList(new ProfileItemContainsKeywordPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(1, model.getFilteredProfileListSize());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the application at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@code model}\u0027s application list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void showApplicationAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredApplicationList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ApplicationItem applicationItem \u003d model.getApplicationItemFromFilteredList("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        final String[] splitJobTitle \u003d applicationItem.getJobTitleOfInternshipItem().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.updateFilteredApplicationList("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                new ApplicationNameContainsKeyWordsPredicate(Arrays.asList(splitJobTitle[0])));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(1, model.getFilteredApplicationListSize());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 11,
      "orzymandias": 29,
      "ZoroarkDarkrai": 9,
      "-": 101,
      "seanjyjy": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Person personToDelete \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().deleteItem(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAddressBook().getFilteredItemList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Person personToDelete \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().deleteItem(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003c model.getAddressBook().getUnfilteredItemList().getItemList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(deleteFirstCommandCopy, deleteFirstCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(deleteSecondCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(model.getAddressBook().getFilteredItemList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19,
      "orzymandias": 1,
      "ZoroarkDarkrai": 13,
      "-": 80,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().setItem(model.getAddressBook().getFilteredItemList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person lastPerson \u003d model.getAddressBook().getFilteredItemList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().setItem(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Person editedPerson \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personInFilteredList \u003d model.getAddressBook().getFilteredItemList()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().setItem(model.getAddressBook().getFilteredItemList().get(0), editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Person firstPerson \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getUnfilteredItemList().getItemList()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAddressBook().getFilteredItemList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getUnfilteredItemList()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .getItemList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(commandWithSameValues, standardCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(standardCommand, null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(new ClearCommand(), standardCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(new EditCommand(INDEX_SECOND, DESC_AMY), standardCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(new EditCommand(INDEX_FIRST, DESC_BOB), standardCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 25,
      "orzymandias": 3,
      "ZoroarkDarkrai": 20,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "-": 17,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "-": 17,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Default screen is Internship."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String SAME_SCREEN_TEXT \u003d \"Already in %s tab\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String SWITCHED_SCREEN_TEXT \u003d \"Switching to %s tab\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_companySwitchToProfileTab_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SWITCHED_SCREEN_TEXT, TabName.PROFILE.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.PROFILE), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_companySwitchToCompanyTab_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SAME_SCREEN_TEXT, TabName.COMPANY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, false, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.COMPANY), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_companySwitchToApplicationTab_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SWITCHED_SCREEN_TEXT, TabName.APPLICATION.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.APPLICATION), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_applicationSwitchToCompanyTab_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SWITCHED_SCREEN_TEXT, TabName.COMPANY.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.COMPANY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.COMPANY), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_applicationSwitchToApplicationTab_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SAME_SCREEN_TEXT, TabName.APPLICATION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, false, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.APPLICATION), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_applicationSwitchToProfileTab_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SWITCHED_SCREEN_TEXT, TabName.PROFILE.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.PROFILE), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_profileSwitchToCompanyTab_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SWITCHED_SCREEN_TEXT, TabName.COMPANY.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.COMPANY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.COMPANY), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_profileSwitchToApplicationTab_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SWITCHED_SCREEN_TEXT, TabName.APPLICATION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, true, true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.APPLICATION), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_profileSwitchToProfileTab_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String message \u003d String.format(SAME_SCREEN_TEXT, TabName.PROFILE.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(message, false, false, false, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.PROFILE), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(TabName.COMPANY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(switchCommand.equals(new SwitchCommand(TabName.COMPANY)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(switchCommand.equals(switchCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(switchCommand.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(switchCommand.equals(0.5f));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different values (Profile tab) -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(switchCommand.equals(new SwitchCommand(TabName.PROFILE)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different values (Application tab) -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(switchCommand.equals(new SwitchCommand(TabName.APPLICATION)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/find/FindApplicationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FIND_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.SHOPEE_OFFERED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.getSampleApplicationItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationNameContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindApplicationCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), getSampleApplicationItemList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            model.getApplicationList().getUnfilteredItemList(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ApplicationNameContainsKeyWordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            new ApplicationNameContainsKeyWordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ApplicationNameContainsKeyWordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            new ApplicationNameContainsKeyWordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand findApplicationFirstCommand \u003d new FindApplicationCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand findApplicationSecondCommand \u003d new FindApplicationCommand(secondPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(findApplicationFirstCommand.equals(findApplicationFirstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(findApplicationSecondCommand.equals(findApplicationSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand findApplicationFirstCommandCopy \u003d new FindApplicationCommand(firstPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(findApplicationFirstCommand.equals(findApplicationFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand findApplicationSecondCommandCopy \u003d new FindApplicationCommand(secondPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(findApplicationSecondCommand.equals(findApplicationSecondCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(findApplicationFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(findApplicationSecondCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(findApplicationFirstCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(findApplicationSecondCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(findApplicationFirstCommand.equals(findApplicationSecondCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_zeroKeywords_noApplicationFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FIND_SUCCESS, 0, APPLICATION_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(expectedMessage, false, false, true, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ApplicationNameContainsKeyWordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand command \u003d new FindApplicationCommand(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // update for expected model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.getApplicationList().updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setApplicationViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.APPLICATION); // default is Company"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(command, model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getApplicationList().getFilteredItemList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_multipleKeywords_multipleApplicationFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FIND_SUCCESS, 1, APPLICATION_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(expectedMessage, false, false, true, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ApplicationNameContainsKeyWordsPredicate predicate \u003d preparePredicate(\"Software\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand command \u003d new FindApplicationCommand(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // update for expected model"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.getApplicationList().updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setApplicationViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.APPLICATION); // default is Company"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(command, model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(Arrays.asList(SHOPEE_OFFERED), model.getApplicationList().getFilteredItemList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ApplicationNameContainsKeyWordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new ApplicationNameContainsKeyWordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/find/FindProfileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FIND_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.GOVTECH_EXPERIENCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.getSampleProfileItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemContainsKeywordPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "class FindProfileCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e() ,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            getSampleProfileItemList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            model.getUnfilteredProfileList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemContainsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new ProfileItemContainsKeywordPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemContainsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new ProfileItemContainsKeywordPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        FindProfileCommand findProfileFirstCommand \u003d new FindProfileCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        FindProfileCommand findProfileSecondCommand \u003d new FindProfileCommand(secondPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(findProfileFirstCommand.equals(findProfileFirstCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(findProfileSecondCommand.equals(findProfileSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        FindProfileCommand findProfileFirstCommandCopy \u003d new FindProfileCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(findProfileFirstCommand.equals(findProfileFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        FindProfileCommand findProfileSecondCommandCopy \u003d new FindProfileCommand(secondPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(findProfileSecondCommand.equals(findProfileSecondCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(findProfileFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(findProfileSecondCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(findProfileFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(findProfileSecondCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(findProfileFirstCommand.equals(findProfileSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void execute_zeroKeywords_noApplicationFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FIND_SUCCESS, 0, PROFILE_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(expectedMessage, false, false, true, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemContainsKeywordPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        FindProfileCommand command \u003d new FindProfileCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // update for expected model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.updateFilteredProfileList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setProfileViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setTabName(TabName.PROFILE); // default is Company"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertCommandSuccess(command, model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredProfileList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void execute_multipleKeywords_multipleApplicationFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FIND_SUCCESS, 1, PROFILE_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(expectedMessage, false, false, true, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemContainsKeywordPredicate predicate \u003d preparePredicate(\"Internship\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        FindProfileCommand command \u003d new FindProfileCommand(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // update for expected model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.updateFilteredProfileList(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setProfileViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setTabName(TabName.PROFILE); // default is Company"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertCommandSuccess(command, model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(Arrays.asList(GOVTECH_EXPERIENCE), model.getFilteredProfileList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private ProfileItemContainsKeywordPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new ProfileItemContainsKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/list/ListApplicationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showApplicationAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.getSampleApplicationItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ListApplicationCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), getSampleApplicationItemList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            model.getUnfilteredApplicationList(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        commandResult \u003d new CommandResult(ListApplicationCommand.MESSAGE_SUCCESS, false, false, true, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_listApplicationIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setApplicationViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.APPLICATION); // default is Company"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new ListApplicationCommand(), model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_listApplicationIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        showApplicationAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setApplicationViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        expectedModel.setTabName(TabName.APPLICATION); // default is Company"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new ListApplicationCommand(), model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "seanjyjy": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/list/ListProfileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProfileItemAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.getSampleProfileItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListProfileCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "class ListProfileCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), getSampleProfileItemList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                model.getUnfilteredProfileList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        commandResult \u003d new CommandResult(ListProfileCommand.MESSAGE_SUCCESS, false, false, true, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void execute_listProfileIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setProfileViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setTabName(TabName.PROFILE); // default is Company"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertCommandSuccess(new ListProfileCommand(), model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void execute_listProfileIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        showProfileItemAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setProfileViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedModel.setTabName(TabName.PROFILE); // default is Company"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertCommandSuccess(new ListProfileCommand(), model, commandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/util/CommandUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class CommandUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FEEDBACK \u003d \"feedback\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getCommandResult4Parameters_dontSwitchTab_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expected \u003d new CommandResult(FEEDBACK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult result \u003d getCommandResult(model, FEEDBACK, TabName.COMPANY, TabName.COMPANY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Index.fromOneBased(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getCommandResult4Parameters_switchTabCompanyToProfile_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expected \u003d new CommandResult(FEEDBACK, false, false, true, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult result \u003d getCommandResult(model, FEEDBACK, TabName.COMPANY, TabName.PROFILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Index.fromOneBased(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getCommandResult4Parameters_switchTabCompanyToApplication_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expected \u003d new CommandResult(FEEDBACK, false, false, true, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult result \u003d getCommandResult(model, FEEDBACK, TabName.COMPANY, TabName.APPLICATION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Index.fromOneBased(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getCommandResult4Parameters_switchDisplay_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expected \u003d new CommandResult(FEEDBACK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setCompanyViewIndex(Index.fromOneBased(3));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult result \u003d getCommandResult(model, FEEDBACK, TabName.COMPANY, TabName.COMPANY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Index.fromOneBased(3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/util/application/ApplicationCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.util.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.INVALID_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.INVALID_STATUS_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2022;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationCommandTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String APPLICATION_ALIAS_DESC \u003d \" \" + APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid Statuses"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String STATUS_DESC_ACCEPTED \u003d \" \" + PREFIX_STATUS + ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String STATUS_DESC_REJECTED \u003d \" \" + PREFIX_STATUS + REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid status"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + INVALID_STATUS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid Status dates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String STATUS_DATE_DESC_JUNE_2021 \u003d \" \" + PREFIX_STATUS_DATE + STATUS_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String STATUS_DATE_DESC_JUNE_2022 \u003d \" \" + PREFIX_STATUS_DATE + STATUS_DATE_JUNE_2022;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid status dates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String INVALID_STATUS_DATE_DESC \u003d \" \" + PREFIX_STATUS_DATE + INVALID_STATUS_DATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 24,
      "orzymandias": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/util/internship/InternshipCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.util.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_REQUIREMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_WAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_JOB_TITLE_DASH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_PERIOD_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_REQUIREMENT_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_WAGE_ZERO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_FE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_SWE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_THREE_MONTHS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_TWO_MONTHS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_R;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_VUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_2000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_3000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipCommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String INTERNSHIP_ALIAS_DESC \u003d \" \" + INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid job titles"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String JOB_TITLE_DESC_SWE \u003d \" \" + PREFIX_JOB_TITLE + VALID_JOB_TITLE_SWE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String JOB_TITLE_DESC_FE \u003d \" \" + PREFIX_JOB_TITLE + VALID_JOB_TITLE_FE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid job title"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String INVALID_JOB_TITLE_DESC \u003d \" \" + PREFIX_JOB_TITLE + INVALID_JOB_TITLE_DASH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid wages"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String WAGE_DESC_SWE \u003d \" \" + PREFIX_WAGE + VALID_WAGE_2000;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String WAGE_DESC_FE \u003d \" \" + PREFIX_WAGE + VALID_WAGE_3000;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid wage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String INVALID_WAGE_DESC \u003d \" \" + PREFIX_WAGE + INVALID_WAGE_ZERO;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid periods"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String PERIOD_DESC_TWO_MONTHS \u003d \" \" + PREFIX_PERIOD + VALID_PERIOD_TWO_MONTHS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String PERIOD_DESC_THREE_MONTHS \u003d \" \" + PREFIX_PERIOD + VALID_PERIOD_THREE_MONTHS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid period"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String INVALID_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD + INVALID_PERIOD_EMPTY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid requirements"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String REQUIREMENT_DESC_VUE \u003d \" \" + PREFIX_REQUIREMENT + VALID_REQUIREMENT_VUE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String REQUIREMENT_DESC_R \u003d \" \" + PREFIX_REQUIREMENT + VALID_REQUIREMENT_R;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid requirement"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String INVALID_REQUIREMENT_DESC \u003d \" \" + PREFIX_REQUIREMENT + INVALID_REQUIREMENT_EMPTY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 40,
      "seanjyjy": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/util/profile/ProfileCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.util.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileCommandTestUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_TITLE_HTML \u003d \"Learn HTML\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_TITLE_INTERNSHIP \u003d \"Data Analyst Internship at ByteDance\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_TITLE_COMPETITION \u003d \"Winner of Special Recognition in Orbital\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_CATEGORY_SKILL \u003d \"skill\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_CATEGORY_EXPERIENCE \u003d \"experience\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_CATEGORY_ACHIEVEMENT \u003d \"achievement\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_DESCRIPTOR_IMPLEMENT \u003d \"Implement automated tool to boost productivity by 15%\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALID_DESCRIPTOR_LEARN \u003d \"Learn how to run a cron job\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Valid parameters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String TITLE_DESC_HTML \u003d \" \" + PREFIX_TITLE + VALID_TITLE_HTML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String TITLE_DESC_INTERNSHIP \u003d \" \" + PREFIX_TITLE + VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String TITLE_DESC_COMPETITION \u003d \" \" + PREFIX_TITLE + VALID_TITLE_COMPETITION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String CATEGORY_DESC_SKILL \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_SKILL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String CATEGORY_DESC_ACHIEVEMENT \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_ACHIEVEMENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String CATEGORY_DESC_EXPERIENCE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_EXPERIENCE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String DESCRIPTOR_DESC_IMPLEMENT \u003d \" \" + PREFIX_DESCRIPTOR + VALID_DESCRIPTOR_IMPLEMENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String DESCRIPTOR_DESC_LEARN \u003d \" \" + PREFIX_DESCRIPTOR + VALID_DESCRIPTOR_LEARN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Invalid parameters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Internship at cre@tive\"; // \u0027@\u0027 is not a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"awards\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String INVALID_DESCRIPTOR_DESC \u003d \" \" + PREFIX_DESCRIPTOR + \"hubby*\"; //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.delete.DeleteCommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // todo: change the test case to use the currently commented-out line when all 3 delete command parsers for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        //  individual items have been implemented"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"a\", Messages.MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 3,
      "-": 22,
      "shawn-nyk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MainParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE_ABRIDGED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.APPLICATION_ALIAS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DESC_ACCEPTED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.internship.InternshipCommandTestUtil.INTERNSHIP_ALIAS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.internship.InternshipCommandTestUtil.JOB_TITLE_DESC_SWE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommandAbstract;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindApplicationCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindCompanyCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindProfileCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListApplicationCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListCompanyCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListProfileCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class MainParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final MainParser parser \u003d new MainParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // Todo: Update test cases after add commands are added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // todo: add delete test (Issac)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //     DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //             DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //     assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // todo: When com, profile has their prefixes and syntax ready"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // assertTrue(parser.parseCommand(EditCommandAbstract.COMMAND_WORD + INTERNSHIP_ALIAS_DESC + SPACE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        //         + INDEX_FIRST.getOneBased() + JOB_TITLE_DESC_SWE) instanceof EditCommandAbstract);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(EditCommandAbstract.COMMAND_WORD + INTERNSHIP_ALIAS_DESC + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + INDEX_FIRST.getOneBased() + VALID_INDEX_ONE + JOB_TITLE_DESC_SWE) instanceof EditCommandAbstract);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(EditCommandAbstract.COMMAND_WORD + APPLICATION_ALIAS_DESC + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + INDEX_FIRST.getOneBased() + STATUS_DESC_ACCEPTED) instanceof EditCommandAbstract);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // assertTrue(parser.parseCommand(EditCommandAbstract.COMMAND_WORD + INTERNSHIP_ALIAS_DESC + SPACE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        //         + INDEX_FIRST.getOneBased() + JOB_TITLE_DESC_SWE) instanceof EditCommandAbstract);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // todo: When com, profile has their prefixes and syntax ready"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseCommand_view_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD +  + SPACE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        //         + INDEX_FIRST.getOneBased()) instanceof ViewCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD + APPLICATION_ALIAS_DESC + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + INDEX_FIRST.getOneBased()) instanceof ViewCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD + SPACE + PROFILE_ALIAS + SPACE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        //         + INDEX_FIRST.getOneBased()) instanceof ViewCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"clear\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"clear 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseCommand_match_success() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"match\") instanceof MatchCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"match 3\") instanceof MatchCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class MainParserToFindParserTest {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_findValidTypes_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"find me software\") instanceof FindProfileCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"find me 3\") instanceof FindProfileCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"find com hardware\") instanceof FindCompanyCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"find com 4\") instanceof FindCompanyCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"find app developers\") instanceof FindApplicationCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"find app 2\") instanceof FindApplicationCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_findMissingTypes_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String invalidMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, invalidMessage, () -\u003e parser.parseCommand(\"find\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, invalidMessage, () -\u003e parser.parseCommand(\"find \"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_findInvalidTypes_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"find Com\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"find App\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"find Me\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"find Hello\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"find 1\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_missingDescription_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // missing description for app"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String appMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, appMessage, () -\u003e parser.parseCommand(\"find app \"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, appMessage, () -\u003e parser.parseCommand(\"find app\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // missing description for com"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String comMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCompanyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, comMessage, () -\u003e parser.parseCommand(\"find com \"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, comMessage, () -\u003e parser.parseCommand(\"find com\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // missing description for me"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String meMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, meMessage, () -\u003e parser.parseCommand(\"find me \"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, meMessage, () -\u003e parser.parseCommand(\"find me\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class MainParserToListParserTest {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_listValidTypes_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"list me\") instanceof ListProfileCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"list com\") instanceof ListCompanyCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"list app\") instanceof ListApplicationCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_listMissingTypes_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String invalidMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, invalidMessage, () -\u003e parser.parseCommand(\"list\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, invalidMessage, () -\u003e parser.parseCommand(\"list \"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_listInvalidTypes_throwsParseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"list Com\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"list App\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"list Me\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"list hello\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_ITEM_TYPE, () -\u003e parser.parseCommand(\"list 1\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_listExcessInput_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.EXCESS_MESSAGE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, message, () -\u003e parser.parseCommand(\"list com hello\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, message, () -\u003e parser.parseCommand(\"list app 1\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, message, () -\u003e parser.parseCommand(\"list me great\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class MainParserToSwitchParserTest {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_switchValidTypes_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"switch me\") instanceof SwitchCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"switch com\") instanceof SwitchCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertTrue(parser.parseCommand(\"switch app\") instanceof SwitchCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_switchMissingTypes_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String invalidMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class, invalidMessage, () -\u003e parser.parseCommand(\"switch\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_switchInvalidTypes_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                MESSAGE_INVALID_ITEM_TYPE_ABRIDGED, () -\u003e parser.parseCommand(\"switch hello\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                MESSAGE_INVALID_ITEM_TYPE_ABRIDGED, () -\u003e parser.parseCommand(\"switch 1\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                MESSAGE_INVALID_ITEM_TYPE_ABRIDGED, () -\u003e parser.parseCommand(\"switch Com\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                MESSAGE_INVALID_ITEM_TYPE_ABRIDGED, () -\u003e parser.parseCommand(\"switch App\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                MESSAGE_INVALID_ITEM_TYPE_ABRIDGED, () -\u003e parser.parseCommand(\"switch Me\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void parseCommand_switchExcessInput_throwsParseException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                SwitchCommand.EXCESS_MESSAGE, () -\u003e parser.parseCommand(\"switch com hello\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                SwitchCommand.EXCESS_MESSAGE, () -\u003e parser.parseCommand(\"switch app great\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                SwitchCommand.EXCESS_MESSAGE, () -\u003e parser.parseCommand(\"switch me ok\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"exit\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"exit 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"help\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(parser.parseCommand(\"help 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, errorMessage, () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 52,
      "orzymandias": 4,
      "-": 38,
      "seanjyjy": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SwitchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE_ABRIDGED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.switchparser.SwitchCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EXPECTED_MESSAGE \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        SwitchCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private SwitchCommandParser switchCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switchCommandParser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_missingTabNames_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // no tab name input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \"\", EXPECTED_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \" \", EXPECTED_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_invalidTabNames_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // invalid tab name(words)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \"hello\", MESSAGE_INVALID_ITEM_TYPE_ABRIDGED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // invalid tab name(numbers)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \"1\", MESSAGE_INVALID_ITEM_TYPE_ABRIDGED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // almost correct tab name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \"com1\", MESSAGE_INVALID_ITEM_TYPE_ABRIDGED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adopting a strict case sensitive for parsers"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \"Com\", MESSAGE_INVALID_ITEM_TYPE_ABRIDGED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adopting a strict case sensitive for parsers"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \"App\", MESSAGE_INVALID_ITEM_TYPE_ABRIDGED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adopting a strict case sensitive for parsers"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(switchCommandParser, \"Me\", MESSAGE_INVALID_ITEM_TYPE_ABRIDGED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_validTabNames_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // Valid tab name - com"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseSuccess(switchCommandParser, COMPANY_ALIAS, new SwitchCommand(TabName.COMPANY));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // valid tab name - app"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseSuccess(switchCommandParser, APPLICATION_ALIAS, new SwitchCommand(TabName.APPLICATION));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // valid tab name - me"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseSuccess(switchCommandParser, PROFILE_ALIAS, new SwitchCommand(TabName.PROFILE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/add/AddApplicationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INDEX_RANDOM_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY_RANDOM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_TWO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.INVALID_STATUS_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DATE_DESC_JUNE_2021;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DATE_DESC_JUNE_2022;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DESC_ACCEPTED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DESC_REJECTED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.APPLIED_KEYWORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.add.AddApplicationCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "class AddApplicationCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final AddApplicationCommandParser parser \u003d new AddApplicationCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    class ParseSuccess {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final Index companyIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final Index internshipIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final Status validStatus \u003d Status.valueOf(ACCEPTED_KEYWORD.toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final StatusDate validStatusDate \u003d new StatusDate(DateUtil.convertToDateTime(STATUS_DATE_JUNE_2021));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final Status defaultStatus \u003d Status.valueOf(APPLIED_KEYWORD.toUpperCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final StatusDate defaultStatusDate \u003d new StatusDate(DateUtil.getTodayDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddApplicationCommand expectedApplicationCommand \u003d new AddApplicationCommand(companyIndex, internshipIndex,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    validStatus, validStatusDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseSuccess(parser, PREAMBLE_WHITESPACE + companyIndex.getOneBased() + VALID_INDEX_TWO"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + STATUS_DESC_ACCEPTED + STATUS_DATE_DESC_JUNE_2021, expectedApplicationCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // multiple indexes - last index accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseSuccess(parser, companyIndex.getOneBased() + VALID_INDEX_ONE + VALID_INDEX_TWO"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + STATUS_DESC_ACCEPTED + STATUS_DATE_DESC_JUNE_2021, expectedApplicationCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // multiple statuses - last validStatus accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseSuccess(parser, companyIndex.getOneBased() + VALID_INDEX_TWO + STATUS_DESC_REJECTED"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + STATUS_DESC_ACCEPTED + STATUS_DATE_DESC_JUNE_2021, expectedApplicationCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // multiple validStatus dates - last validStatus date accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseSuccess(parser, companyIndex.getOneBased() + VALID_INDEX_TWO + STATUS_DESC_ACCEPTED"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + STATUS_DATE_DESC_JUNE_2022 + STATUS_DATE_DESC_JUNE_2021, expectedApplicationCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_missingAllOptionalFields_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddApplicationCommand expectedApplicationCommand \u003d new AddApplicationCommand(companyIndex, internshipIndex,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    defaultStatus, defaultStatusDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing both prefixes"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseSuccess(parser, companyIndex.getOneBased() + VALID_INDEX_TWO, expectedApplicationCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_missingStatus_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddApplicationCommand expectedApplicationCommand \u003d new AddApplicationCommand(companyIndex, internshipIndex,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    defaultStatus, validStatusDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing Status"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseSuccess(parser, INDEX_FIRST.getOneBased() + VALID_INDEX_TWO + STATUS_DATE_DESC_JUNE_2021,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    expectedApplicationCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_missingStatusDate_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddApplicationCommand expectedApplicationCommand \u003d new AddApplicationCommand(companyIndex, internshipIndex,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    validStatus, defaultStatusDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing Status date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseSuccess(parser, INDEX_FIRST.getOneBased() + VALID_INDEX_TWO + STATUS_DESC_ACCEPTED,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    expectedApplicationCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    class ParseFailure {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final String expectedMessageUsage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                AddApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing index in preamble"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, VALID_INDEX_TWO, expectedMessageUsage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing index prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, INDEX_FIRST.getOneBased() + STATUS_DESC_ACCEPTED, expectedMessageUsage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing all prefixes"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, \"\", expectedMessageUsage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // invalid index in preamble"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, PREAMBLE_NON_EMPTY_RANDOM + VALID_INDEX_TWO + STATUS_DESC_ACCEPTED"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + STATUS_DATE_DESC_JUNE_2021, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // empty preamble"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, PREAMBLE_EMPTY + VALID_INDEX_TWO + STATUS_DESC_ACCEPTED"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + STATUS_DATE_DESC_JUNE_2021, expectedMessageUsage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // invalid index in prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, INDEX_FIRST.getOneBased() + INVALID_INDEX_RANDOM_STRING + STATUS_DESC_ACCEPTED,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // invalid status"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, INDEX_FIRST.getOneBased() + VALID_INDEX_TWO + INVALID_STATUS_DESC"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + STATUS_DATE_DESC_JUNE_2021, Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // invalid status date"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, INDEX_FIRST.getOneBased() + VALID_INDEX_TWO + STATUS_DESC_ACCEPTED"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + INVALID_STATUS_DATE_DESC, StatusDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // all invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, INDEX_FIRST.getOneBased() + INVALID_INDEX_RANDOM_STRING + INVALID_STATUS_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    + INVALID_STATUS_DATE_DESC, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/add/AddProfileCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY_RANDOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.CATEGORY_DESC_ACHIEVEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.CATEGORY_DESC_EXPERIENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.CATEGORY_DESC_SKILL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.DESCRIPTOR_DESC_IMPLEMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.DESCRIPTOR_DESC_LEARN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.INVALID_DESCRIPTOR_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.TITLE_DESC_COMPETITION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.TITLE_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_ACHIEVEMENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_DESCRIPTOR_IMPLEMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_DESCRIPTOR_LEARN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_COMPETITION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.BYTEDANCE_INTERN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.ORBITAL_ACHIEVEMENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddProfileCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.testutil.profile.ProfileItemBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "class AddProfileCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private AddProfileCommandParser parser \u003d new AddProfileCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem expectedProfileItem \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new ProfileItemBuilder(BYTEDANCE_INTERN).withDescriptors(VALID_DESCRIPTOR_LEARN).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_INTERNSHIP + CATEGORY_DESC_EXPERIENCE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + DESCRIPTOR_DESC_LEARN, new AddProfileCommand(expectedProfileItem));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // multiple title - last title accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_COMPETITION + TITLE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + CATEGORY_DESC_EXPERIENCE + DESCRIPTOR_DESC_LEARN, new AddProfileCommand(expectedProfileItem));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // multiple categories - last category accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + CATEGORY_DESC_SKILL"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + CATEGORY_DESC_EXPERIENCE + DESCRIPTOR_DESC_LEARN, new AddProfileCommand(expectedProfileItem));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // multiple descriptors - all accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem expectedProfileItemMultipleDescriptors \u003d new ProfileItemBuilder(BYTEDANCE_INTERN)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withDescriptors(VALID_DESCRIPTOR_IMPLEMENT, VALID_DESCRIPTOR_LEARN)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + CATEGORY_DESC_EXPERIENCE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_DESC_IMPLEMENT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new AddProfileCommand(expectedProfileItemMultipleDescriptors));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // zero descriptors"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem expectedProfileItem \u003d new ProfileItemBuilder(ORBITAL_ACHIEVEMENT).withDescriptors().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_COMPETITION + CATEGORY_DESC_ACHIEVEMENT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new AddProfileCommand(expectedProfileItem));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_COMPETITION + CATEGORY_DESC_EXPERIENCE + DESCRIPTOR_DESC_LEARN,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // missing category prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                TITLE_DESC_COMPETITION + VALID_CATEGORY_ACHIEVEMENT + DESCRIPTOR_DESC_LEARN,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // both prefixes missing"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                VALID_TITLE_COMPETITION + VALID_CATEGORY_ACHIEVEMENT + VALID_DESCRIPTOR_LEARN,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + CATEGORY_DESC_EXPERIENCE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_DESC_IMPLEMENT , Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_COMPETITION + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_DESC_IMPLEMENT , ProfileItemCategory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid descriptor"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_COMPETITION + CATEGORY_DESC_EXPERIENCE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + INVALID_DESCRIPTOR_DESC + DESCRIPTOR_DESC_IMPLEMENT , Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_DESC_IMPLEMENT , Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTOR_DESC_IMPLEMENT + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + DESCRIPTOR_DESC_LEARN, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY_RANDOM + TITLE_DESC_INTERNSHIP + CATEGORY_DESC_EXPERIENCE"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_DESC_IMPLEMENT ,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/delete/DeleteApplicationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteApplicationCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * outside of the DeleteApplicationCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * same path through the DeleteApplicationCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * The path variation for those two cases occur inside the GeneralParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * therefore should be covered by the GeneralParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteApplicationCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final DeleteApplicationCommandParser parser \u003d new DeleteApplicationCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_validArgs_returnsDeleteApplicationCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteApplicationCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final String messageExpected \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                DeleteApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // empty argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"\", messageExpected);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // blank argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"  \", messageExpected);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/delete/DeleteInternshipCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INDEX_RANDOM_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY_RANDOM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_TWO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteInternshipCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteInternshipCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final DeleteInternshipCommandParser parser \u003d new DeleteInternshipCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final Index companyIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final Index internshipIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteInternshipCommand expectedDeleteCommand \u003d new DeleteInternshipCommand(companyIndex, internshipIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + companyIndex.getOneBased() + VALID_INDEX_TWO,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                expectedDeleteCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // multiple indexes - last index accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, companyIndex.getOneBased() + VALID_INDEX_ONE + VALID_INDEX_TWO,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                expectedDeleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    class ParseFailure {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        private final String expectedMessageUsage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                DeleteInternshipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_missingFields_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing index in preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, VALID_INDEX_TWO, expectedMessageUsage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing index prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, INDEX_FIRST.toString(), expectedMessageUsage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // missing all prefixes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, \"\", expectedMessageUsage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // invalid index in preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, PREAMBLE_NON_EMPTY_RANDOM + VALID_INDEX_TWO, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // empty preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, PREAMBLE_EMPTY + VALID_INDEX_TWO, expectedMessageUsage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // invalid index in prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertParseFailure(parser, INDEX_FIRST.getOneBased() + INVALID_INDEX_RANDOM_STRING,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/edit/EditApplicationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.edit.EditCommandAbstract.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.INVALID_STATUS_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DATE_DESC_JUNE_2021;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DATE_DESC_JUNE_2022;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DESC_ACCEPTED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.commands.util.application.ApplicationCommandTestUtil.STATUS_DESC_REJECTED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2022;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.edit.EditApplicationCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.edit.EditApplicationCommand.EditApplicationDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.testutil.application.EditApplicationDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EditApplicationCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final EditApplicationCommandParser parser \u003d new EditApplicationCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertParseFailure(parser, STATUS_DESC_ACCEPTED, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"-5\" + STATUS_DESC_REJECTED, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"0\" + STATUS_DESC_REJECTED, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertParseFailure(parser, \"1 i/string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_invalidFields_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS); // invalid status"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATUS_DATE_DESC, StatusDate.MESSAGE_CONSTRAINTS); // invalid status"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // invalid status date followed by valid email"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATUS_DATE_DESC + STATUS_DESC_ACCEPTED,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                StatusDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Invalid status and status date, but only the status is captured"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATUS_DATE_DESC + INVALID_STATUS_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_validFieldFollowedByInvalidField_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // valid status date followed by invalid status date. The test case for invalid status date followed by valid"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // status date is tested at {@code parse_invalidFieldFollowedByValidField_success()}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseFailure(parser, \"1\" + STATUS_DESC_ACCEPTED + INVALID_STATUS_DATE_DESC,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                StatusDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STATUS_DESC_ACCEPTED + STATUS_DATE_DESC_JUNE_2021;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationDescriptor descriptor \u003d new EditApplicationDescriptorBuilder().withStatus(ACCEPTED_KEYWORD)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withStatusDate(STATUS_DATE_JUNE_2021).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationCommand expectedCommand \u003d new EditApplicationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // status"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STATUS_DESC_REJECTED;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationDescriptor descriptor \u003d new EditApplicationDescriptorBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withStatus(REJECTED_KEYWORD).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationCommand expectedCommand \u003d new EditApplicationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // status date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STATUS_DATE_DESC_JUNE_2022;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor \u003d new EditApplicationDescriptorBuilder().withStatusDate(STATUS_DATE_JUNE_2022).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        expectedCommand \u003d new EditApplicationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STATUS_DATE_DESC_JUNE_2021 + STATUS_DATE_DESC_JUNE_2022;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationDescriptor descriptor \u003d new EditApplicationDescriptorBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withStatusDate(STATUS_DATE_JUNE_2022).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationCommand expectedCommand \u003d new EditApplicationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parse_invalidFieldFollowedByValidField_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Status field only"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_STATUS_DESC + STATUS_DESC_ACCEPTED;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationDescriptor descriptor \u003d new EditApplicationDescriptorBuilder()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withStatus(ACCEPTED_KEYWORD).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EditApplicationCommand expectedCommand \u003d new EditApplicationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Both status and status date fields"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_STATUS_DESC + INVALID_STATUS_DATE_DESC + STATUS_DESC_ACCEPTED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + STATUS_DATE_DESC_JUNE_2022;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor \u003d new EditApplicationDescriptorBuilder().withStatusDate(STATUS_DATE_JUNE_2022)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withStatus(ACCEPTED_KEYWORD).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        expectedCommand \u003d new EditApplicationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 142,
      "shawn-nyk": 5,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/edit/EditProfileCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.CATEGORY_DESC_ACHIEVEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.CATEGORY_DESC_EXPERIENCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.CATEGORY_DESC_SKILL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.DESCRIPTOR_DESC_IMPLEMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.DESCRIPTOR_DESC_LEARN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.INVALID_DESCRIPTOR_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.TITLE_DESC_COMPETITION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.TITLE_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_ACHIEVEMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_EXPERIENCE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_SKILL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_DESCRIPTOR_IMPLEMENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_DESCRIPTOR_LEARN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_COMPETITION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_HTML;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTOR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditProfileCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditProfileCommand.EditProfileItemDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.testutil.profile.EditProfileItemDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class EditProfileCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final String DESCRIPTOR_EMPTY \u003d \" \" + PREFIX_DESCRIPTOR;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private EditProfileCommandParser parser \u003d new EditProfileCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_COMPETITION, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_TITLE_HTML, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_TITLE_COMPETITION, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, ProfileItemCategory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid descriptor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTOR_DESC, Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // invalid title followed by valid category"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + CATEGORY_DESC_ACHIEVEMENT, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // valid title followed by invalid title. The test case for invalid title followed by valid title"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + TITLE_DESC_COMPETITION + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // while parsing {@code PREFIX_DESCRIPTOR} alone will reset the descriptor of the {@code ProfileItem} being"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // edited,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // parsing it together with a valid descriptor results in error"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + DESCRIPTOR_DESC_IMPLEMENT + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_EMPTY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + DESCRIPTOR_DESC_IMPLEMENT + DESCRIPTOR_EMPTY + DESCRIPTOR_DESC_LEARN,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + DESCRIPTOR_EMPTY + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_DESC_IMPLEMENT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + INVALID_CATEGORY_DESC + VALID_DESCRIPTOR_IMPLEMENT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_COMPETITION"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + CATEGORY_DESC_ACHIEVEMENT + DESCRIPTOR_DESC_LEARN + DESCRIPTOR_DESC_IMPLEMENT;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileItemDescriptor descriptor \u003d new EditProfileItemDescriptorBuilder().withTitle(VALID_TITLE_COMPETITION)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        .withProfileItemCategory(VALID_CATEGORY_ACHIEVEMENT)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        .withDescriptors(VALID_DESCRIPTOR_LEARN, VALID_DESCRIPTOR_IMPLEMENT).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileCommand expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_COMPETITION + CATEGORY_DESC_ACHIEVEMENT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileItemDescriptor descriptor \u003d new EditProfileItemDescriptorBuilder().withTitle(VALID_TITLE_COMPETITION)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        .withProfileItemCategory(VALID_CATEGORY_ACHIEVEMENT).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileCommand expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_COMPETITION;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileItemDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new EditProfileItemDescriptorBuilder().withTitle(VALID_TITLE_COMPETITION).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileCommand expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // category"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_SKILL;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor \u003d new EditProfileItemDescriptorBuilder().withProfileItemCategory(VALID_CATEGORY_SKILL).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // profile descriptors"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTOR_DESC_IMPLEMENT + DESCRIPTOR_DESC_LEARN;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor \u003d new EditProfileItemDescriptorBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withDescriptors(VALID_DESCRIPTOR_IMPLEMENT, VALID_DESCRIPTOR_LEARN).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_COMPETITION + CATEGORY_DESC_ACHIEVEMENT"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + DESCRIPTOR_DESC_LEARN + TITLE_DESC_INTERNSHIP + CATEGORY_DESC_EXPERIENCE + DESCRIPTOR_DESC_LEARN"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                + DESCRIPTOR_DESC_IMPLEMENT;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileItemDescriptor descriptor \u003d new EditProfileItemDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withProfileItemCategory(VALID_CATEGORY_EXPERIENCE)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withDescriptors(VALID_DESCRIPTOR_LEARN, VALID_DESCRIPTOR_IMPLEMENT)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileCommand expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_CATEGORY_DESC + CATEGORY_DESC_ACHIEVEMENT;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileItemDescriptor descriptor \u003d new EditProfileItemDescriptorBuilder()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withProfileItemCategory(VALID_CATEGORY_ACHIEVEMENT).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileCommand expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                targetIndex.getOneBased() + INVALID_CATEGORY_DESC + DESCRIPTOR_DESC_IMPLEMENT + TITLE_DESC_COMPETITION"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        + CATEGORY_DESC_ACHIEVEMENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor \u003d new EditProfileItemDescriptorBuilder().withTitle(VALID_TITLE_COMPETITION)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withProfileItemCategory(VALID_CATEGORY_ACHIEVEMENT)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withDescriptors(VALID_DESCRIPTOR_IMPLEMENT).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_resetDescriptors_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTOR_EMPTY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileItemDescriptor descriptor \u003d new EditProfileItemDescriptorBuilder().withDescriptors().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        EditProfileCommand expectedCommand \u003d new EditProfileCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/find/FindApplicationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindApplicationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationNameContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindApplicationCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String MESSAGE \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private FindApplicationCommandParser findApplicationCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        findApplicationCommandParser \u003d new FindApplicationCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_missingDescription_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(findApplicationCommandParser, \"    \", MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseFailure(findApplicationCommandParser, \" \", MESSAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_validArguments_returnsFindApplicationCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FindApplicationCommand expectedCommand \u003d new FindApplicationCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            new ApplicationNameContainsKeyWordsPredicate(Arrays.asList(\"Software\", \"Hardware\", \"Developers\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseSuccess(findApplicationCommandParser, \"Software Hardware Developers\", expectedCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertParseSuccess(findApplicationCommandParser, \"\\n Software \\n \\t Hardware Developers\\t\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/find/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.find.FindApplicationCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.find.FindProfileCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Tests the main parser for find commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private FindCommandParser findCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        findCommandParser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // todo shawn"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Note can just write inside these 4 methods, if i do forget any test case do inform me."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_invalidTypes_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // invalid item type"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e findCommandParser.parse(\"hello\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e findCommandParser.parse(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e findCommandParser.parse(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_missingInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // missing description as input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e findCommandParser.parse(APPLICATION_ALIAS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e findCommandParser.parse(APPLICATION_ALIAS + \" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_listAppTrue_success() throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // item type app, description present -\u003e FindApplicationCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(findCommandParser.parse(APPLICATION_ALIAS + \" 3\") instanceof FindApplicationCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(findCommandParser.parse(APPLICATION_ALIAS + \" developers\") instanceof FindApplicationCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(findCommandParser.parse(PROFILE_ALIAS + \" 4\") instanceof FindProfileCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(findCommandParser.parse(PROFILE_ALIAS + \" internship html\") instanceof FindProfileCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_listAppFalse_success() throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // item type different"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertFalse(findCommandParser.parse(COMPANY_ALIAS + \" google\") instanceof FindApplicationCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(findCommandParser.parse(PROFILE_ALIAS + \" internship\") instanceof FindApplicationCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 5,
      "seanjyjy": 55,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/find/FindProfileCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.find.FindProfileCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "class FindProfileCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final String MESSAGE \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            FindProfileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private FindProfileCommandParser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        parser \u003d new FindProfileCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_missingDescription_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"    \", MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \" \", MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void parse_validArguments_returnsFindApplicationCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        FindProfileCommand expectedCommand \u003d new FindProfileCommand("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new ProfileItemContainsKeywordPredicate(Arrays.asList(\"Software\", \"Hardware\", \"Developers\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, \"Software Hardware Developers\", expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseSuccess(parser, \"\\n Software \\n \\t Hardware Developers\\t\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                expectedCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/list/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.list.ListApplicationCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ListCommandParser listCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // todo shawn"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // todo isaac"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Note can just write inside these 4 methods, if i do forget any test case do inform me."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_invalidTypes_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e listCommandParser.parse(\"hello\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e listCommandParser.parse(\"1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e listCommandParser.parse(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_listAppTrue_success() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(listCommandParser.parse(APPLICATION_ALIAS) instanceof ListApplicationCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_listAppFalse_success() throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(listCommandParser.parse(COMPANY_ALIAS) instanceof ListApplicationCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(listCommandParser.parse(PROFILE_ALIAS) instanceof ListApplicationCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void parse_listExcessInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e listCommandParser.parse(\" \" + APPLICATION_ALIAS + \"great\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e listCommandParser.parse(\" \" + APPLICATION_ALIAS + \"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/util/ApplicationParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.APPLIED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.INVALID_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.INVALID_STATUS_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_WITH_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Status EXPECTED_STATUS \u003d Status.valueOf(APPLIED_KEYWORD.toUpperCase());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final StatusDate EXPECTED_STATUS_DATE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            new StatusDate(DateUtil.convertToDateTime(STATUS_DATE_WITH_TIME));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatus_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ApplicationParserUtil.parseStatus(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatus_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ApplicationParserUtil.parseStatus(INVALID_STATUS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatus_validValueWithoutWhitespace_returnsStatus() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(EXPECTED_STATUS, ApplicationParserUtil.parseStatus(APPLIED_KEYWORD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatus_validValueWithWhitespace_returnsStatus() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String statusWithWhitespace \u003d \" \" + APPLIED_KEYWORD + \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(EXPECTED_STATUS, ApplicationParserUtil.parseStatus(statusWithWhitespace));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatusDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ApplicationParserUtil.parseStatusDate(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatusDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ApplicationParserUtil.parseStatusDate(INVALID_STATUS_DATE_TIME));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatusDate_validValueWithoutWhitespace_returnsStatusDate() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(EXPECTED_STATUS_DATE, ApplicationParserUtil.parseStatusDate(STATUS_DATE_WITH_TIME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseStatusDate_validValueWithWhitespace_returnsStatusDate() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String statusDateWithWhitespace \u003d \" \" + STATUS_DATE_WITH_TIME + \" \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(EXPECTED_STATUS_DATE, ApplicationParserUtil.parseStatusDate(statusDateWithWhitespace));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 63,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/util/GeneralParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class GeneralParserUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(INDEX_FIRST, GeneralParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(INDEX_FIRST, GeneralParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e GeneralParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e GeneralParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ItemList\u003cPerson\u003e addressBook \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getItemList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasItem(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(addressBook.hasItem(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook.addItem(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(addressBook.hasItem(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook.addItem(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(addressBook.hasItem(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getItemList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyItemList\u003cPerson\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public ObservableList\u003cPerson\u003e getItemList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 16,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.testutil.application.ApplicationItemBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.testutil.profile.ProfileItemBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // private CompanyItemBuilder companyItemBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ApplicationItemBuilder applicationItemBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ProfileItemBuilder profileItemBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cCompanyItem\u003e companyItemList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cApplicationItem\u003e applicationItemList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cProfileItem\u003e profileItemList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cCompanyItem\u003e emptyCompanyItemList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cApplicationItem\u003e emptyApplicationItemList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cProfileItem\u003e emptyProfileItemList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // companyItemBuilder \u003d new CompanyItemBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationItemBuilder \u003d new ApplicationItemBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileItemBuilder \u003d new ProfileItemBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyItemList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // companyItemList.add(companyItemBuilder.build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationItemList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationItemList.add(applicationItemBuilder.build());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileItemList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileItemList.add(profileItemBuilder.build());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        emptyProfileItemList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        emptyApplicationItemList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        emptyCompanyItemList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(new ItemListManager\u003cPerson\u003e(), modelManager.getAddressBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertEquals(new ItemListManager\u003cCompanyItem\u003e(), modelManager.getCompanyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(new ItemListManager\u003cApplicationItem\u003e(), modelManager.getApplicationList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(new ItemListManager\u003cProfileItem\u003e(), modelManager.getProfileList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setApplicationItemListFilePath(Paths.get(\"app/item/list/file/path\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setCompanyItemListFilePath(Paths.get(\"com/item/list/file/path\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setProfileItemListFilePath(Paths.get(\"app/me/list/file/path\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setApplicationItemListFilePath(Paths.get(\"new/app/item/list/file/path\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setCompanyItemListFilePath(Paths.get(\"new/com/item/list/file/path\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setProfileItemListFilePath(Paths.get(\"new/app/me/list/file/path\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasCompany_nullCompany_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCompany(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasApplication_nullApplication_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasApplication(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasProfile_nullProfile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasProfileItem(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasCompany_companyNotInCompanyList_returnsFalse() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // TODO when company item is ready"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // assertFalse(modelManager.hasCompany(companyItemBuilder.build()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasApplication_applicationNotInApplicationList_returnsFalse() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(modelManager.hasApplication(applicationItemBuilder.build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasProfileItem_profileItemNotInProfileItemList_returnsFalse() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(modelManager.hasProfileItem(profileItemBuilder.build()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void addCompany_addCompanyItemToList_returnsEquals() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // TODO when company item is ready"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.addCompany(companyItemBuilder.build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // assertEquals(modelManager.getFilteredCompanyList(), companyItems);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void addApplication_addApplicationItemToList_returnsEquals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addApplication(applicationItemBuilder.build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredApplicationList(), applicationItemList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void addProfile_addProfileItemToList_returnsEquals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addProfileItem(profileItemBuilder.build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredProfileList(), profileItemList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasCompany_companyInCompanyList_returnsTrue() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // TODO when company item is ready"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.addCompany(companyItemBuilder.build());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // assertTrue(modelManager.hasCompany(companyItemBuilder.build()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasApplication_applicationInApplicationList_returnsTrue() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addApplication(applicationItemBuilder.build());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(modelManager.hasApplication(applicationItemBuilder.build()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void hasProfileItem_profileItemInProfileItemList_returnsTrue() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addProfileItem(profileItemBuilder.build());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(modelManager.hasProfileItem(profileItemBuilder.build()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredCompanyList_modifyCompanyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCompanyList()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredApplicationList_modifyApplicationList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredApplicationList()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredProfileList_modifyProfileList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredProfileList()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredCompanyListSize_getCompanyListSize_returnsEqual() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // TODO when company item is ready"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.addCompany(companyItemBuilder.build());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // assertEquals(modelManager.getFilteredCompanyListSize(), 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredApplicationListSize_getApplicationListSize_returnsEqual() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addApplication(applicationItemBuilder.build());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredApplicationListSize(), 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getFilteredProfileListSize_getProfileListSize_returnsEqual() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addProfileItem(profileItemBuilder.build());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredProfileListSize(), 1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getCompanyList_testIfEqualCompanyList_returnsEqual() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // TODO when company item is ready"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.addCompany(companyItemBuilder.build());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // assertEquals(modelManager.getCompanyList(), companyItems);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getProfileList_testIfEqualProfileList_returnsEqual() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addProfileItem(profileItemBuilder.build());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getProfileItemList(), profileItemList);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void deleteCompany_deleteCompanyFromList_returnsEqual() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // TODO when company item is ready"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.addCompany(companyItemBuilder.build());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.deleteCompany(companyItemBuilder.build());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // assertEquals(modelManager.getFilteredCompanyList(), emptyCompanyItemList);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void deleteApplication_deleteApplicationFromList_returnsEqual() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addApplication(applicationItemBuilder.build());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.deleteApplication(applicationItemBuilder.build());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredApplicationList(), emptyApplicationItemList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void deleteProfileItem_deleteProfileItemFromList_returnsEqual() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addProfileItem(profileItemBuilder.build());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.deleteProfileItem(profileItemBuilder.build());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredProfileList(), emptyProfileItemList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setCompany_changeCompanyItem_returnsEqual() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // TODO when company item is ready"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.addCompany(companyItemList.build());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // CompanyItemBuilder secondCompanyItemBuilder \u003d new CompanyItemBuilder();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // secondCompanyItemBuilder."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // modelManager.setCompany(companyItemList.build(), secondCompanyItemBuilder.build());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // emptyCompanyItemList.add(secondCompanyItemBuilder.build());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // assertEquals(modelManager.getFilteredCompanyList(), emptyCompanyItemList);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setApplication_changeApplicationItem_returnsEqual() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addApplication(applicationItemBuilder.build());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ApplicationItemBuilder secondApplicationItemBuilder \u003d new ApplicationItemBuilder();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        secondApplicationItemBuilder.withStatus(\"Interview\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.setApplication(applicationItemBuilder.build(), secondApplicationItemBuilder.build());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        emptyApplicationItemList.add(secondApplicationItemBuilder.build());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredApplicationList(), emptyApplicationItemList);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setProfile_changeProfileItem_returnsEqual() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.addProfileItem(profileItemBuilder.build());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ProfileItemBuilder secondProfileItemBuilder \u003d new ProfileItemBuilder();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        secondProfileItemBuilder.withTitle(\"HELLO WORLD\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        modelManager.setProfileItem(profileItemBuilder.build(), secondProfileItemBuilder.build());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        emptyProfileItemList.add(secondProfileItemBuilder.build());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(modelManager.getFilteredProfileList(), emptyProfileItemList);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e differentAddressBook \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ItemList\u003cCompanyItem\u003e companyList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cInternshipItem\u003e internshipList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ItemList\u003cApplicationItem\u003e applicationList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cProfileItem\u003e profileList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, companyList, applicationList,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                profileList,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                userPrefs);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, companyList,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, userPrefs);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(modelManagerCopy, modelManager);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(modelManager, null);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(modelManager, 5);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotEquals(new ModelManager(differentAddressBook, companyList,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, userPrefs), modelManager);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager.getAddressBook()"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .updateFilteredItemList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotEquals(new ModelManager(addressBook, companyList,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, userPrefs), modelManager);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager.getAddressBook().updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        differentUserPrefs.setApplicationItemListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotEquals(new ModelManager(addressBook, companyList,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, differentUserPrefs), modelManager);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 12,
      "ZoroarkDarkrai": 26,
      "-": 97,
      "seanjyjy": 191,
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setApplicationItemListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setApplicationItemListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setCompanyItemListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCompanyItemListFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setProfileItemListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setProfileItemListFilePath(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 14,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/application/ApplicationItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ApplicationItemUtil.DATE_OUTPUT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ApplicationItemUtil.STATUS_OUTPUT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.APPLIED_KEYWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.OFFERED_KEYWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.EXPECTED_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2022;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.LAZADA_REJECTED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.SHOPEE_OFFERED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.GOLDMAN_DA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.SHOPEE_SWE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.testutil.application.ApplicationItemBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationItemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getItemName_equalityTest_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(APPLICATION_NAME, SHOPEE_OFFERED.getItemName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getMapping_size_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d SHOPEE_OFFERED.getMapping();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(7, mapping.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getMapping_correctOrdering_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d SHOPEE_OFFERED.getMapping();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Iterator\u003cObject\u003e fields \u003d mapping.values().iterator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getJobTitle(), fields.next());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getCompanyName(), fields.next());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getPeriod(), fields.next());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getWage(), fields.next());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getRequirements(), fields.next());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_OFFERED.getStatus(), fields.next());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_OFFERED.getStatusDate(), fields.next());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isSameItem_true_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_OFFERED.isSameItem(SHOPEE_OFFERED));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem editedShopeeOffered;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different object, same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeOffered \u003d new ApplicationItemBuilder(SHOPEE_OFFERED).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_OFFERED.isSameItem(editedShopeeOffered));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different status, everything else the same -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeOffered \u003d new ApplicationItemBuilder(SHOPEE_OFFERED).withStatus(APPLIED_KEYWORD).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_OFFERED.isSameItem(editedShopeeOffered));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different status date, everything else the same -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeOffered \u003d new ApplicationItemBuilder(SHOPEE_OFFERED).withStatusDate(STATUS_DATE_JUNE_2022).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_OFFERED.isSameItem(editedShopeeOffered));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isSameItem_defaultApplicationTest_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem defaultApplicationItem \u003d new ApplicationItem(SHOPEE_SWE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_OFFERED.isSameItem(defaultApplicationItem));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isSameItem_false_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_OFFERED.isSameItem(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Two different applications -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_OFFERED.isSameItem(LAZADA_REJECTED));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_OFFERED.isSameItem(SHOPEE_SWE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different internship -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem editedShopeeOffered \u003d new ApplicationItemBuilder(SHOPEE_OFFERED)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withInternshipItem(GOLDMAN_DA).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_OFFERED.isSameItem(editedShopeeOffered));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_true_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_OFFERED, SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different object, same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem shopeeOfferedCopy \u003d new ApplicationItemBuilder(SHOPEE_OFFERED).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(shopeeOfferedCopy, SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_false_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(SHOPEE_OFFERED, null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(SHOPEE_OFFERED, 5);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different items -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(SHOPEE_OFFERED, SHOPEE_SWE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different applicationItem -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(LAZADA_REJECTED, SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different internshipItem -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem editedShopeeOffered \u003d new ApplicationItemBuilder(SHOPEE_OFFERED)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withInternshipItem(GOLDMAN_DA).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeOffered, SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeOffered \u003d new ApplicationItemBuilder(SHOPEE_OFFERED).withStatus(APPLIED_KEYWORD).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeOffered, SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different status date -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeOffered \u003d new ApplicationItemBuilder(SHOPEE_OFFERED).withStatusDate(STATUS_DATE_JUNE_2022).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeOffered, SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_OFFERED.hashCode(), SHOPEE_OFFERED.hashCode());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem shopeeOfferedCopy \u003d new ApplicationItemBuilder(SHOPEE_OFFERED).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_OFFERED.hashCode(), shopeeOfferedCopy.hashCode());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_equalityTest_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(SHOPEE_OFFERED.getInternshipItem())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(STATUS_OUTPUT_NAME)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(OFFERED_KEYWORD)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(DATE_OUTPUT_NAME)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(EXPECTED_DATE_JUNE_2021);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(builder.toString(), SHOPEE_OFFERED.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getJsonAdaptedItem_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(new JsonAdaptedApplicationItem(SHOPEE_OFFERED), SHOPEE_OFFERED.getJsonAdaptedItem());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 155,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/application/StatusDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.BLANK_STATUS_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.EXPECTED_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.INVALID_STATUS_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2022;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_MAY_2021;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_WITH_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StatusDateTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final StatusDate VALID_STATUS_DATE_JUNE_2021 \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            new StatusDate(DateUtil.convertToDateTime(STATUS_DATE_JUNE_2021));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final StatusDate VALID_STATUS_DATE_MAY_2021 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            new StatusDate(DateUtil.convertToDateTime(STATUS_DATE_MAY_2021));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final StatusDate VALID_STATUS_DATE_JUNE_2022 \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            new StatusDate(DateUtil.convertToDateTime(STATUS_DATE_JUNE_2022));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StatusDate(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_invalidStatusDate_throwsAssertionError() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new StatusDate(DateUtil.convertToDateTime(BLANK_STATUS_DATE)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new StatusDate(DateUtil.convertToDateTime(INVALID_STATUS_DATE)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidDate_validFormat_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Date format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(StatusDate.isValidDate(STATUS_DATE_MAY_2021));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(StatusDate.isValidDate(STATUS_DATE_JUNE_2021));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(StatusDate.isValidDate(STATUS_DATE_JUNE_2022));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // DateTime format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(StatusDate.isValidDate(STATUS_DATE_WITH_TIME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidDate_invalidFormat_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(StatusDate.isValidDate(BLANK_STATUS_DATE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(StatusDate.isValidDate(INVALID_STATUS_DATE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_validFormat_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(EXPECTED_DATE_JUNE_2021, VALID_STATUS_DATE_JUNE_2021.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_STATUS_DATE_JUNE_2021, VALID_STATUS_DATE_JUNE_2021);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StatusDate statusDateCopy \u003d new StatusDate(DateUtil.convertToDateTime(STATUS_DATE_JUNE_2021));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_STATUS_DATE_JUNE_2021, statusDateCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Different year"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(VALID_STATUS_DATE_JUNE_2021, VALID_STATUS_DATE_JUNE_2022);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Different day in same year"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(VALID_STATUS_DATE_MAY_2021, VALID_STATUS_DATE_JUNE_2021);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_STATUS_DATE_JUNE_2021.hashCode(), VALID_STATUS_DATE_JUNE_2021.hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/application/StatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.APPLIED_KEYWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.INTERVIEW_KEYWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.OFFERED_KEYWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.WAITING_KEYWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.INVALID_STATUS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_BLANK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.VALID_STATUS_APPLIED_MIX_CASE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.VALID_STATUS_REJECTED_MIX_CASE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StatusTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Status VALID_STATUS_ONE \u003d Status.valueOf(APPLIED_KEYWORD.toUpperCase());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Status VALID_STATUS_TWO \u003d Status.valueOf(REJECTED_KEYWORD.toUpperCase());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void valueOf_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Status.valueOf(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void valueOf_invalidStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Status.valueOf(STATUS_BLANK));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Status.valueOf(INVALID_STATUS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidStatus_validFormats_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(APPLIED_KEYWORD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(INTERVIEW_KEYWORD));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(WAITING_KEYWORD));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(OFFERED_KEYWORD));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(ACCEPTED_KEYWORD));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(REJECTED_KEYWORD));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidStatus_caseInsensitivityTest_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(VALID_STATUS_APPLIED_MIX_CASE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Status.isValidStatus(VALID_STATUS_REJECTED_MIX_CASE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidStatus_invalidFormats_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Status.isValidStatus(STATUS_BLANK));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Status.isValidStatus(INVALID_STATUS));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_validFormat_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(APPLIED_KEYWORD, VALID_STATUS_ONE.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_STATUS_ONE, VALID_STATUS_ONE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Status statusCopy \u003d Status.valueOf(APPLIED_KEYWORD.toUpperCase());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_STATUS_ONE, statusCopy);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(VALID_STATUS_ONE, VALID_STATUS_TWO);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/InternshipItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.internship.Wage.WAGE_SYMBOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.COMPANY_OUTPUT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.PERIOD_OUTPUT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.REQUIREMENTS_OUTPUT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.InternshipItemUtil.WAGE_OUTPUT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.SHOPEE_OFFERED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_COMPANY_NAME_FACEBOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_COMPANY_NAME_SHOPEE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_DA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_FE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_SWE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_MAY_TO_JULY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_THREE_MONTHS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_TWO_MONTHS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_R;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_VUE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_2000;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_3000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_3500;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.FACEBOOK_FE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.LAZADA_DS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.SHOPEE_SWE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.testutil.internship.InternshipItemBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipItemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void requirements_invalidDataType_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem internshipItem \u003d new InternshipItemBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e internshipItem.getRequirements().remove(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setCompanyName_newCompanyName_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        CompanyName companyName \u003d new CompanyName(VALID_COMPANY_NAME_FACEBOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedInternshipItem \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedInternshipItem.setCompanyName(companyName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(companyName, editedInternshipItem.getCompanyName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setJobTitle_newJobTitle_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        JobTitle jobTitle \u003d new JobTitle(VALID_JOB_TITLE_DA);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedInternshipItem \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedInternshipItem.setJobTitle(jobTitle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(jobTitle, editedInternshipItem.getJobTitle());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setWage_newWage_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Wage wage \u003d new Wage(VALID_WAGE_3000);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedInternshipItem \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedInternshipItem.setWage(wage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(wage, editedInternshipItem.getWage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setPeriod_newPeriod_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Period period \u003d new Period(VALID_PERIOD_THREE_MONTHS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedInternshipItem \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedInternshipItem.setPeriod(period);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(period, editedInternshipItem.getPeriod());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setRequirements_newRequirements_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Requirement requirement \u003d new Requirement(VALID_REQUIREMENT_R);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Set\u003cRequirement\u003e requirementSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requirementSet.add(requirement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedInternshipItem \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedInternshipItem.setRequirements(requirementSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(requirementSet, editedInternshipItem.getRequirements());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getItemName_equalityTest_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(INTERNSHIP_NAME, SHOPEE_SWE.getItemName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getMapping_size_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d SHOPEE_SWE.getMapping();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(5, mapping.size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getMapping_correctOrdering_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d SHOPEE_SWE.getMapping();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Iterator\u003cObject\u003e fields \u003d mapping.values().iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getJobTitle(), fields.next());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getCompanyName(), fields.next());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getPeriod(), fields.next());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getWage(), fields.next());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.getRequirements(), fields.next());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isSameItem_true_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_SWE.isSameItem(SHOPEE_SWE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedShopeeSwe;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different object, same values -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_SWE.isSameItem(editedShopeeSwe));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different wage, everything else the same -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withWage(VALID_WAGE_3000).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_SWE.isSameItem(editedShopeeSwe));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different requirements, everything else the same -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withRequirements(VALID_REQUIREMENT_R,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                VALID_REQUIREMENT_VUE).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(SHOPEE_SWE.isSameItem(editedShopeeSwe));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isSameItem_false_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_SWE.isSameItem(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Two different internships -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_SWE.isSameItem(LAZADA_DS));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Two different items -\u003e return false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_SWE.isSameItem(SHOPEE_OFFERED));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withCompanyName(VALID_COMPANY_NAME_FACEBOOK).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_SWE.isSameItem(editedShopeeSwe));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different job title -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withJobTitle(VALID_JOB_TITLE_DA).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_SWE.isSameItem(editedShopeeSwe));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different period -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withPeriod(VALID_PERIOD_THREE_MONTHS).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(SHOPEE_SWE.isSameItem(editedShopeeSwe));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_true_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE, SHOPEE_SWE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different object, same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem shopeeSweCopy \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(shopeeSweCopy, SHOPEE_SWE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_false_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(SHOPEE_SWE, null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(SHOPEE_SWE, 5);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Two different items -\u003e return false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(SHOPEE_SWE, SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different internshipItem -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(LAZADA_DS, SHOPEE_SWE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different company name -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .withCompanyName(VALID_COMPANY_NAME_FACEBOOK).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeSwe, SHOPEE_SWE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different job title -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withJobTitle(VALID_JOB_TITLE_DA).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeSwe, SHOPEE_SWE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different period -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withPeriod(VALID_PERIOD_THREE_MONTHS).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeSwe, SHOPEE_SWE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different wage -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withWage(VALID_WAGE_3000).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeSwe, SHOPEE_SWE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // different requirements -\u003e returns false"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        editedShopeeSwe \u003d new InternshipItemBuilder(SHOPEE_SWE).withRequirements(VALID_REQUIREMENT_R).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedShopeeSwe, SHOPEE_SWE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.hashCode(), SHOPEE_SWE.hashCode());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem shopeeSweCopy \u003d new InternshipItemBuilder(SHOPEE_SWE).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(SHOPEE_SWE.hashCode(), shopeeSweCopy.hashCode());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_nonEmptyRequirements_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(VALID_JOB_TITLE_SWE)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(COMPANY_OUTPUT_NAME)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(VALID_COMPANY_NAME_SHOPEE)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(PERIOD_OUTPUT_NAME)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(VALID_PERIOD_TWO_MONTHS)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(WAGE_OUTPUT_NAME)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(WAGE_SYMBOL)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(VALID_WAGE_2000)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(REQUIREMENTS_OUTPUT_NAME)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(SHOPEE_SWE.getRequirements())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(builder.toString(), SHOPEE_SWE.toString());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_noRequirements_success() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(VALID_JOB_TITLE_FE)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(COMPANY_OUTPUT_NAME)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(VALID_COMPANY_NAME_FACEBOOK)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(PERIOD_OUTPUT_NAME)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(VALID_PERIOD_MAY_TO_JULY)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(WAGE_OUTPUT_NAME)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(WAGE_SYMBOL)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(VALID_WAGE_3500)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(REQUIREMENTS_OUTPUT_NAME)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                .append(\"-\")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(System.lineSeparator());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(builder.toString(), FACEBOOK_FE.toString());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getJsonAdaptedItem_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(new JsonAdaptedInternshipItem(SHOPEE_SWE), SHOPEE_SWE.getJsonAdaptedItem());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 254,
      "seanjyjy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/JobTitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_JOB_TITLE_BLANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_JOB_TITLE_DASH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_FE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_SWE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class JobTitleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final JobTitle VALID_JOB_TITLE_ONE \u003d new JobTitle(VALID_JOB_TITLE_SWE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final JobTitle VALID_JOB_TITLE_TWO \u003d new JobTitle(VALID_JOB_TITLE_FE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JobTitle(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_invalidJobTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new JobTitle(INVALID_JOB_TITLE_DASH));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new JobTitle(INVALID_JOB_TITLE_BLANK));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidJobTitle_invalidFormats_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(JobTitle.isValidJobTitle(INVALID_JOB_TITLE_DASH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(JobTitle.isValidJobTitle(INVALID_JOB_TITLE_BLANK));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidJobTitle_validFormats_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(JobTitle.isValidJobTitle(VALID_JOB_TITLE_SWE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(JobTitle.isValidJobTitle(VALID_JOB_TITLE_FE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getValue_equalityTest_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_JOB_TITLE_SWE, VALID_JOB_TITLE_ONE.getValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_validFormat_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_JOB_TITLE_SWE, VALID_JOB_TITLE_ONE.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_JOB_TITLE_ONE, VALID_JOB_TITLE_ONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        JobTitle jobTitleCopy \u003d new JobTitle(VALID_JOB_TITLE_SWE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_JOB_TITLE_ONE, jobTitleCopy);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(VALID_JOB_TITLE_ONE, VALID_JOB_TITLE_TWO);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_JOB_TITLE_ONE.hashCode(), VALID_JOB_TITLE_ONE.hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/PeriodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_PERIOD_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_PERIOD_SPACES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_SUMMER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_THREE_MONTHS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class PeriodTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Period VALID_PERIOD_ONE \u003d new Period(VALID_PERIOD_SUMMER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Period VALID_PERIOD_TWO \u003d new Period(VALID_PERIOD_THREE_MONTHS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Period(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_invalidPeriod_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Period(INVALID_PERIOD_EMPTY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Period(INVALID_PERIOD_SPACES));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidPeriod_invalidFormats_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Period.isValidPeriod(INVALID_PERIOD_EMPTY));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Period.isValidPeriod(INVALID_PERIOD_SPACES));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidPeriod_validFormats_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Period.isValidPeriod(VALID_PERIOD_SUMMER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Period.isValidPeriod(VALID_PERIOD_THREE_MONTHS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getValue_equalityTest_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_PERIOD_SUMMER, VALID_PERIOD_ONE.getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_PERIOD_ONE, VALID_PERIOD_ONE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Period periodCopy \u003d new Period(VALID_PERIOD_SUMMER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_PERIOD_ONE, periodCopy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(VALID_PERIOD_ONE, VALID_PERIOD_TWO);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_PERIOD_ONE.hashCode(), VALID_PERIOD_ONE.hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/RequirementTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_REQUIREMENT_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_REQUIREMENT_SPACES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_R;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_VUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class RequirementTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Requirement VALID_REQUIREMENT_ONE \u003d new Requirement(VALID_REQUIREMENT_VUE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Requirement VALID_REQUIREMENT_TWO \u003d new Requirement(VALID_REQUIREMENT_R);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Requirement(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_invalidRequirement_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Requirement(INVALID_REQUIREMENT_EMPTY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Requirement(INVALID_REQUIREMENT_SPACES));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidRequirement_invalidFormats_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Requirement.isValidRequirement(INVALID_REQUIREMENT_EMPTY));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Requirement.isValidRequirement(INVALID_REQUIREMENT_SPACES));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidRequirement_validFormats_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Requirement.isValidRequirement(VALID_REQUIREMENT_VUE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Requirement.isValidRequirement(VALID_REQUIREMENT_R));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getValue_equalityTest_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_REQUIREMENT_VUE, VALID_REQUIREMENT_ONE.getValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_validFormat_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_REQUIREMENT_VUE, VALID_REQUIREMENT_ONE.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_REQUIREMENT_ONE, VALID_REQUIREMENT_ONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Requirement validRequirementCopy \u003d new Requirement(VALID_REQUIREMENT_VUE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_REQUIREMENT_ONE, validRequirementCopy);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(VALID_REQUIREMENT_ONE, VALID_REQUIREMENT_TWO);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_REQUIREMENT_ONE.hashCode(), VALID_REQUIREMENT_ONE.hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/WageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.internship.Wage.WAGE_SYMBOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_WAGE_DECIMAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_WAGE_NEGATIVE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.INVALID_WAGE_ZERO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_2000;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_3000;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class WageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Wage VALID_WAGE_ONE \u003d new Wage(VALID_WAGE_2000);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final Wage VALID_WAGE_TWO \u003d new Wage(VALID_WAGE_3000);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Wage(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void constructor_invalidWage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Wage(INVALID_WAGE_ZERO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Wage(INVALID_WAGE_NEGATIVE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Wage(INVALID_WAGE_DECIMAL));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidWage_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Wage.isValidWage(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidWage_validInput_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Wage.isValidWage(\"2\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Wage.isValidWage(\"12345\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(Wage.isValidWage(\"243\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidWage_invalidDigits_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"0\")); // Zero"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"-4\")); // Negative number"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"400.00\")); // Decimals"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"0.400\")); // Decimals"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidWage_invalidInput_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"\")); // empty string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"    \")); // spaces only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"   213\")); // space then number"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"1221abc2131\")); // alphabets within digits"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(Wage.isValidWage(\"90 41\")); // spaces within digits"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void getValue_equalityTest_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_WAGE_2000, VALID_WAGE_ONE.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void toString_validFormat_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(WAGE_SYMBOL + VALID_WAGE_2000, VALID_WAGE_ONE.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_WAGE_ONE, VALID_WAGE_ONE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Wage wageCopy \u003d new Wage(VALID_WAGE_2000);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_WAGE_ONE, wageCopy);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void equals_nonEqualityTest_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(VALID_WAGE_ONE, VALID_WAGE_TWO);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_WAGE_ONE.hashCode(), VALID_WAGE_ONE.hashCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(ALICE.isSameItem(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(aliceCopy, ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ALICE, ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(ALICE, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(ALICE, 5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(BOB, ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedAlice, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedAlice, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedAlice, ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedAlice, ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(editedAlice, ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 12,
      "ZoroarkDarkrai": 7,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/DescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "class DescriptorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String BLANK_DESCRIPTOR \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String VALID_DESCRIPTOR \u003d \"Implement a automated tool to speed up testing by 20%\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String VALID_DESCRIPTOR_PUNCTUATION \u003d \".,!?:;+#%\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_DESCRIPTOR_PARENTHESIS \u003d \"Wrote documentation (with User Guide included)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_DESCRIPTOR_AMPERSAND \u003d \"Deploy a bot @ telegram\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Descriptor(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void constructor_invalidDescriptor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Descriptor(INVALID_DESCRIPTOR_PARENTHESIS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Descriptor(INVALID_DESCRIPTOR_AMPERSAND));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Descriptor(BLANK_DESCRIPTOR));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void toString_validFormats_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Descriptor descriptor \u003d new Descriptor(VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Descriptor descriptorPunctuation \u003d new Descriptor(VALID_DESCRIPTOR_PUNCTUATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(VALID_DESCRIPTOR, descriptor.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(VALID_DESCRIPTOR_PUNCTUATION, descriptorPunctuation.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Descriptor descriptorOne \u003d new Descriptor(VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Descriptor descriptorTwo \u003d new Descriptor(VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(descriptorOne, descriptorTwo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Descriptor descriptorOne \u003d new Descriptor(VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Descriptor descriptorTwo \u003d new Descriptor(VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(descriptorOne.hashCode(), descriptorTwo.hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/ProfileItemCategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileItemCategoryTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String BLANK_CATEGORY \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String VALID_CATEGORY_SKILL \u003d \"SKILL\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String VALID_CATEGORY_ACHIEVEMENT \u003d \"ACHIEVEMENT\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String VALID_CATEGORY_EXPERIENCE \u003d \"EXPERIENCE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_CATEGORY_CASING \u003d \"sKiLl\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_CATEGORY \u003d \"AWARDS\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ProfileItemCategory.valueOf(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void constructor_invalidStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e ProfileItemCategory.valueOf(BLANK_CATEGORY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e ProfileItemCategory.valueOf(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e ProfileItemCategory.valueOf(INVALID_CATEGORY_CASING));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void toString_validFormats_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory achievement \u003d ProfileItemCategory.valueOf(VALID_CATEGORY_ACHIEVEMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(VALID_CATEGORY_ACHIEVEMENT, achievement.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory skill \u003d ProfileItemCategory.valueOf(VALID_CATEGORY_SKILL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(VALID_CATEGORY_SKILL, skill.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory experience \u003d ProfileItemCategory.valueOf(VALID_CATEGORY_EXPERIENCE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(VALID_CATEGORY_EXPERIENCE, experience.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory profileItemCategory \u003d ProfileItemCategory.valueOf(VALID_CATEGORY_ACHIEVEMENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory profileItemCategoryTwo \u003d ProfileItemCategory.valueOf(VALID_CATEGORY_ACHIEVEMENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(profileItemCategory, profileItemCategoryTwo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory profileItemCategory \u003d ProfileItemCategory.valueOf(VALID_CATEGORY_ACHIEVEMENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory profileItemCategoryTwo \u003d ProfileItemCategory.valueOf(VALID_CATEGORY_ACHIEVEMENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(profileItemCategory.hashCode(), profileItemCategoryTwo.hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/ProfileItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_ACHIEVEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_SKILL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_DESCRIPTOR_IMPLEMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_DESCRIPTOR_LEARN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_HTML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.GOVTECH_EXPERIENCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.HTML_SKILL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.testutil.profile.ProfileItemBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "class ProfileItemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void descriptors_invalidDataType_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem profileItem \u003d new ProfileItemBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e profileItem.getDescriptors().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void isSameProfile_true_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(HTML_SKILL.isSameItem(HTML_SKILL));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem editedExperience;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different object, same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        editedExperience \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(GOVTECH_EXPERIENCE.isSameItem(editedExperience));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // same title, same category, different descriptors -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        editedExperience \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withDescriptors(VALID_DESCRIPTOR_IMPLEMENT, VALID_DESCRIPTOR_LEARN)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertTrue(editedExperience.isSameItem(GOVTECH_EXPERIENCE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void isSameProfile_false_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(HTML_SKILL.isSameItem(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different category and title -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem editedExperience \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                new ProfileItemBuilder(GOVTECH_EXPERIENCE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        .withTitle(VALID_TITLE_HTML)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        .withCategory(VALID_CATEGORY_SKILL).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(editedExperience.isSameItem(GOVTECH_EXPERIENCE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        editedExperience \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        .withTitle(VALID_TITLE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(editedExperience.isSameItem(GOVTECH_EXPERIENCE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        editedExperience \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                        .withCategory(VALID_CATEGORY_ACHIEVEMENT).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertFalse(editedExperience.isSameItem(GOVTECH_EXPERIENCE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void equals_true_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(GOVTECH_EXPERIENCE, GOVTECH_EXPERIENCE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different object, same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem govtechCopy \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(govtechCopy, GOVTECH_EXPERIENCE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void equals_false_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertNotEquals(GOVTECH_EXPERIENCE, null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertNotEquals(GOVTECH_EXPERIENCE, 5);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different profileItem -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertNotEquals(GOVTECH_EXPERIENCE, HTML_SKILL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem editedExperience \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertNotEquals(editedExperience, GOVTECH_EXPERIENCE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        editedExperience \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withCategory(VALID_CATEGORY_ACHIEVEMENT).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertNotEquals(editedExperience, GOVTECH_EXPERIENCE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // different descriptors -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        editedExperience \u003d new ProfileItemBuilder(GOVTECH_EXPERIENCE)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .withDescriptors(VALID_DESCRIPTOR_IMPLEMENT).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertNotEquals(editedExperience, GOVTECH_EXPERIENCE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String VALID_TITLE \u003d \"Internship at facebook\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_EMPTY_TITLE \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_SPACE_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_SYMBOL_TITLE \u003d \"?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    static final String INVALID_TITLE \u003d \"C++\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void constructor_invalidJobTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(INVALID_TITLE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(INVALID_SPACE_TITLE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(INVALID_SYMBOL_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(INVALID_EMPTY_TITLE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void toString_validFormats_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title title \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(VALID_TITLE, title.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void equals_equalityTest_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title title \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title titleTwo \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(title, titleTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public void hashCode_equalityTest_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title title \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title titleTwo \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertEquals(title.hashCode(), titleTwo.hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tab/TabManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TabManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TabManager tabManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName_true_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default tab state for tab manager is at Company"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerCompanyTab \u003d new TabManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerCompanyTab.setTabName(TabName.COMPANY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(tabManagerCompanyTab.equals(tabManager));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName_false_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default tab state for tab manager is at Company"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // tab manager state for tab is now at profile"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerProfileTab \u003d new TabManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerProfileTab.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerProfileTab.equals(tabManager));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // tab manager state for tab is now at profile"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerApplicationTab \u003d new TabManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerApplicationTab.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerApplicationTab.equals(tabManager));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getTabName_true_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerCompanyTab \u003d new TabManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerCompanyTab.setTabName(TabName.COMPANY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(tabManagerCompanyTab.getTabName().equals(TabName.COMPANY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerProfileTab \u003d new TabManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerProfileTab.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(tabManagerProfileTab.getTabName().equals(TabName.PROFILE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerApplicationTab \u003d new TabManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerApplicationTab.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(tabManagerApplicationTab.getTabName().equals(TabName.APPLICATION));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getTabName_false_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerCompanyTab \u003d new TabManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerCompanyTab.setTabName(TabName.COMPANY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerCompanyTab.getTabName().equals(TabName.PROFILE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerCompanyTab.getTabName().equals(TabName.APPLICATION));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerProfileTab \u003d new TabManager();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerProfileTab.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerProfileTab.getTabName().equals(TabName.COMPANY));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerProfileTab.getTabName().equals(TabName.APPLICATION));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabManager tabManagerApplicationTab \u003d new TabManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabManagerApplicationTab.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerApplicationTab.getTabName().equals(TabName.PROFILE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManagerApplicationTab.getTabName().equals(TabName.COMPANY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(tabManager.equals(tabManager));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManager.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(tabManager.equals(0.5f));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/DateUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.DATE_INPUT_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.DATE_TIME_INPUT_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.DEFAULT_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.ERROR_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.convertOutputFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.convertToDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.extractDayAndMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.formatterDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.isValidDateFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.isValidDateTimeFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.isValidOutputDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DateUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * DATE_TIME FORMATS"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String VALID_DATE_TIME_ONE \u003d \"18-9-21 2240\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String VALID_DATE_TIME_TWO \u003d \"9-09-21 0000\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String INVALID_DATE_TIME_ONE \u003d \"18-9-21   2240\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String INVALID_DATE_TIME_TWO \u003d \"9-09-21 00 00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * DATE FORMATS"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String VALID_DATE_ONE \u003d \"18-9-21\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String VALID_DATE_TWO \u003d \"9-09-21\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String INVALID_DATE_ONE \u003d \"20-09-20 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String INVALID_DATE_TWO \u003d \" 9-09-21\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * OUTPUT FORMATS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String VALID_OUTPUT_FORMAT \u003d \"18 Sep 2021 @ 10.40 PM\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String INVALID_OUTPUT_FORMAT \u003d \"18 Sep 2021 @ 10.40 pm\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String VALID_SHORT_FORMAT \u003d \"18 Sep\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidDateTimeFormat_validFormats_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(isValidDateTimeFormat(VALID_DATE_TIME_ONE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(isValidDateTimeFormat(VALID_DATE_TIME_TWO));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidDateTimeFormat_invalidFormats_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateTimeFormat(INVALID_DATE_TIME_ONE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateTimeFormat(INVALID_DATE_TIME_TWO));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateTimeFormat(VALID_DATE_ONE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateTimeFormat(VALID_DATE_TWO));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidDateFormat_validFormats_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(isValidDateFormat(VALID_DATE_ONE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(isValidDateFormat(VALID_DATE_TWO));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidDateFormat_invalidFormats_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateFormat(INVALID_DATE_ONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateFormat(INVALID_DATE_TWO));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateFormat(VALID_DATE_TIME_ONE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidDateFormat(VALID_DATE_TIME_TWO));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void convertToDateTime_validFormats_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Converting LocalDateTime"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDateTime expectedLocalDateTime \u003d LocalDateTime.parse(VALID_DATE_TIME_ONE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                DateTimeFormatter.ofPattern(DATE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedLocalDateTime, convertToDateTime(VALID_DATE_TIME_ONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Converting LocalDate"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(VALID_DATE_ONE, DateTimeFormatter.ofPattern(DATE_INPUT_FORMAT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDateTime expectedLocalDateTimeDefaultTime \u003d LocalDateTime.of(localDate, LocalTime.parse(DEFAULT_TIME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedLocalDateTimeDefaultTime, convertToDateTime(VALID_DATE_ONE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void convertToDateTime_invalidFormats_throwsAssertionError() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e convertToDateTime(INVALID_DATE_TIME_ONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e convertToDateTime(INVALID_DATE_TIME_TWO));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e convertToDateTime(INVALID_DATE_ONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e convertToDateTime(INVALID_DATE_TWO));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void convertToDateTime_invalidFormatErrorMessage_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AssertionError ae \u003d assertThrows(AssertionError.class, () -\u003e convertToDateTime(INVALID_DATE_TIME_ONE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ERROR_MESSAGE, ae.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void convertOutputFormat_validFormats_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(LocalDateTime.parse(VALID_DATE_TIME_ONE, DateTimeFormatter.ofPattern(DATE_TIME_INPUT_FORMAT)),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                convertOutputFormat(VALID_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidOutputDate_validFormat_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(isValidOutputDate(VALID_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidOutputDate_invalidFormat_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(isValidOutputDate(INVALID_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void formatterDateTime_validInput_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DateTimeFormatter expected \u003d DateTimeFormatter.ofPattern(DATE_TIME_INPUT_FORMAT, Locale.ENGLISH);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Comparison using toString since different DateTimeFormatter objects are not equal"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expected.toString(), formatterDateTime(DATE_TIME_INPUT_FORMAT).toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void extractDayAndMonth_validInput_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] dateInfoArray \u003d VALID_OUTPUT_FORMAT.split(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(VALID_SHORT_FORMAT, extractDayAndMonth(dateInfoArray));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/model/view/ViewManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ViewManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ViewManager viewManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewManager \u003d new ViewManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setCompanyViewIndex_false_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different company index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ViewManager viewManagerDifferentCompanyIndex \u003d new ViewManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewManagerDifferentCompanyIndex.setCompanyViewIndex(Index.fromOneBased(3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(viewManager.equals(viewManagerDifferentCompanyIndex));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setCompanyViewIndex_true_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different company index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ViewManager viewManagerDifferentCompanyIndex \u003d new ViewManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewManagerDifferentCompanyIndex.setCompanyViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(viewManager.equals(viewManagerDifferentCompanyIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setApplicationViewIndex_false_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different company index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ViewManager viewManagerDifferentApplicationIndex \u003d new ViewManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewManagerDifferentApplicationIndex.setApplicationViewIndex(Index.fromOneBased(3));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(viewManager.equals(viewManagerDifferentApplicationIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setApplicationViewIndex_true_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different company index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ViewManager viewManagerDifferentApplicationIndex \u003d new ViewManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewManagerDifferentApplicationIndex.setApplicationViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(viewManager.equals(viewManagerDifferentApplicationIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setProfileViewIndex_false_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different company index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ViewManager viewManagerDifferentProfileIndex \u003d new ViewManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewManagerDifferentProfileIndex.setProfileViewIndex(Index.fromOneBased(3));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(viewManager.equals(viewManagerDifferentProfileIndex));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setProfileViewIndex_true_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different company index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ViewManager viewManagerDifferentProfileIndex \u003d new ViewManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        viewManagerDifferentProfileIndex.setProfileViewIndex(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(viewManager.equals(viewManagerDifferentProfileIndex));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getCompanyViewIndex_true_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default index for CompanyViewIndex is 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(viewManager.getCompanyViewIndex().equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getProfileViewIndex_true_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default index for ProfileViewIndex is 1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(viewManager.getProfileViewIndex().equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getApplicationViewIndex_true_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // default index for ApplicationViewIndex is 1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(viewManager.getApplicationViewIndex().equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(viewManager.equals(viewManager));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(viewManager.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(viewManager.equals(0.5f));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/wrapper/AlphaNumericWordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AlphaNumericWordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidAlphaNumericWord_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlphaNumericWord.isValidAlphaNumericWord(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidAlphaNumericWord_validInput_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(AlphaNumericWord.isValidAlphaNumericWord(\"Engineer\")); // alphabets only"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(AlphaNumericWord.isValidAlphaNumericWord(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(AlphaNumericWord.isValidAlphaNumericWord(\"Software 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(AlphaNumericWord.isValidAlphaNumericWord(\"Machine Learning\")); // with capital letters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(AlphaNumericWord.isValidAlphaNumericWord(\"Junior Front End Developer\")); // long words"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidAlphaNumericWord_invalidInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(AlphaNumericWord.isValidAlphaNumericWord(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(AlphaNumericWord.isValidAlphaNumericWord(\"    \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(AlphaNumericWord.isValidAlphaNumericWord(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(AlphaNumericWord.isValidAlphaNumericWord(\"-\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(AlphaNumericWord.isValidAlphaNumericWord(\"Google*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/wrapper/NonEmptyStringTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class NonEmptyStringTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidNonEmptyString_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NonEmptyString.isValidNonEmptyString(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidNonEmptyString_validInput_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(NonEmptyString.isValidNonEmptyString(\"Engineer\")); // alphabets only"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(NonEmptyString.isValidNonEmptyString(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(NonEmptyString.isValidNonEmptyString(\"Machine Learning\")); // with capital letters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(NonEmptyString.isValidNonEmptyString(\"   Senior       Software       Engineer,\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"Engineering, Data and   Machine L  earning\")); // Random spaces"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(NonEmptyString.isValidNonEmptyString(\"---\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(NonEmptyString.isValidNonEmptyString(\"-/\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(NonEmptyString.isValidNonEmptyString(\"20-2-20 to 30-2-20\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void isValidNonEmptyString_invalidInput_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(NonEmptyString.isValidNonEmptyString(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(NonEmptyString.isValidNonEmptyString(\"    \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setApplicationItemListFilePath(Path.of(\"data/applicationitemlist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setCompanyItemListFilePath(Path.of(\"data/companyitemlist.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setProfileItemListFilePath(Path.of(\"data/profileitemlist.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 3,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.getSampleApplicationItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.getSampleProfileItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(getTempFilePath(\"app\"), ApplicationItem.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(getTempFilePath(\"app\"), CompanyItem.class,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(getTempFilePath(\"app\"), ProfileItem.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        storageManager \u003d new StorageManager(applicationItemListStorage, companyItemListStorage, profileItemListStorage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void applicationItemListReadSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         * {@link JsonItemListStorage} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBoolStorageTest} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cApplicationItem\u003e original \u003d getSampleApplicationItemList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        storageManager.saveApplicationItemList(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cApplicationItem\u003e retrieved \u003d storageManager.readApplicationItemList().get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(retrieved));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void getApplicationItemListFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotNull(storageManager.getApplicationItemListFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void profileItemListReadSave() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         * {@link JsonItemListStorage} class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBoolStorageTest} class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cProfileItem\u003e original \u003d getSampleProfileItemList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        storageManager.saveProfileItemList(original);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cProfileItem\u003e retrieved \u003d storageManager.readProfileItemList().get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(retrieved));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void getProfileItemListFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotNull(storageManager.getProfileItemListFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 41,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/application/JsonAdaptedApplicationItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.storage.application.JsonAdaptedApplicationItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.SHOPEE_OFFERED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedApplicationItemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"DEAD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final String INVALID_STATUS_DATE \u003d \"03-11-2020\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final String VALID_STATUS \u003d SHOPEE_OFFERED.getStatus().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final String VALID_STATUS_DATE \u003d SHOPEE_OFFERED.getStatusDate().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final JsonAdaptedInternshipItem VALID_INTERNSHIP_ITEM \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            SHOPEE_OFFERED.getInternshipItem().getJsonAdaptedItem();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_validApplicationItemDetails_returnsApplicationItem() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedApplicationItem applicationItem \u003d new JsonAdaptedApplicationItem(SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(SHOPEE_OFFERED, applicationItem.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedApplicationItem applicationItem \u003d new JsonAdaptedApplicationItem(INVALID_STATUS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_STATUS_DATE, VALID_INTERNSHIP_ITEM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, applicationItem::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedApplicationItem applicationItem \u003d new JsonAdaptedApplicationItem(null, VALID_STATUS_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_INTERNSHIP_ITEM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, applicationItem::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidStatusDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedApplicationItem applicationItem \u003d new JsonAdaptedApplicationItem(VALID_STATUS, INVALID_STATUS_DATE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_INTERNSHIP_ITEM);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d StatusDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, applicationItem::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullStatusDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedApplicationItem applicationItem \u003d new JsonAdaptedApplicationItem(VALID_STATUS, null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_INTERNSHIP_ITEM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StatusDate.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, applicationItem::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    // To do: invalid internship item"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullInternshipItem_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedApplicationItem applicationItem \u003d new JsonAdaptedApplicationItem(VALID_STATUS, VALID_STATUS_DATE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, InternshipItem.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, applicationItem::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "ZoroarkDarkrai": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/application/JsonApplicationItemListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.FACEBOOK_ACCEPTED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.GOLDMAN_OFFERED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.SHOPEE_OFFERED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.getSampleApplicationItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonApplicationItemListStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"JsonApplicationItemListStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readApplicationItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readApplicationItemList(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private java.util.Optional\u003cReadOnlyItemList\u003cApplicationItem\u003e\u003e readApplicationItemList("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonItemListStorage\u003c\u003e(Paths.get(filePath),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                ApplicationItem.class, JsonAdaptedApplicationItem.class).readItemList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(readApplicationItemList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readApplicationItemList("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \"notJsonFormatApplicationItemList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readApplicationItemList_invalidApplicationItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readApplicationItemList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \"invalidApplicationItemList.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readApplicationItemList_invalidAndValidApplicationItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readApplicationItemList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \"invalidAndValidApplicationItemList.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readAndSaveApplicationItemList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempApplicationItemList.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cApplicationItem\u003e original \u003d getSampleApplicationItemList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e jsonItemListStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(filePath, ApplicationItem.class, JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cApplicationItem\u003e readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.addItem(FACEBOOK_ACCEPTED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.removeItem(SHOPEE_OFFERED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.addItem(GOLDMAN_OFFERED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original); // file path not specified"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        readBack \u003d jsonItemListStorage.readItemList().get(); // file path not specified"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveApplicationItemList_nullApplicationItemList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveApplicationItemList(null,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \"SomeFile.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private void saveApplicationItemList(ItemList\u003cApplicationItem\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            new JsonItemListStorage\u003c\u003e(Paths.get(filePath), ApplicationItem.class,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    JsonAdaptedApplicationItem.class).saveItemList(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveApplicationItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveApplicationItemList(new ItemList\u003c\u003e(), null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/application/JsonSerializableApplicationItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonSerializableItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.testutil.application.SampleApplicationItems;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonSerializableApplicationItemListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"test\", \"data\", \"JsonSerializableApplicationItemListTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path SAMPLE_APPLICATION_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"sampleApplicationItemList.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path INVALID_APPLICATION_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"invalidApplicationItemList.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path DUPLICATE_APPLICATION_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"duplicateApplicationItemList.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_sampleApplicationItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cApplicationItem, JsonAdaptedApplicationItem\u003e dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                SAMPLE_APPLICATION_ITEMS_FILE, ApplicationItem.class, JsonAdaptedApplicationItem.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cApplicationItem\u003e addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cApplicationItem\u003e sampleApplicationItemListStorage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                SampleApplicationItems.getSampleApplicationItemList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(addressBookFromFile, sampleApplicationItemListStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidApplicationItemFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cApplicationItem, JsonAdaptedApplicationItem\u003e dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                INVALID_APPLICATION_ITEM_FILE, ApplicationItem.class, JsonAdaptedApplicationItem.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_duplicateApplicationItems_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cApplicationItem, JsonAdaptedApplicationItem\u003e dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                DUPLICATE_APPLICATION_ITEM_FILE, ApplicationItem.class, JsonAdaptedApplicationItem.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableItemList.MESSAGE_DUPLICATE_ITEM,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/internship/JsonAdaptedInternshipItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.storage.internship.JsonAdaptedInternshipItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.SHOPEE_SWE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedInternshipItemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_COMPANY_NAME \u003d \"@pp13\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_JOB_TITLE \u003d \"j@n1+0r\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_PERIOD \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_WAGE \u003d \"-999\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_REQUIREMENT \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String VALID_COMPANY_NAME \u003d SHOPEE_SWE.getCompanyName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String VALID_JOB_TITLE \u003d SHOPEE_SWE.getJobTitle().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String VALID_PERIOD \u003d SHOPEE_SWE.getPeriod().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String VALID_WAGE \u003d SHOPEE_SWE.getWage().toString().substring(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final Set\u003cJsonAdaptedRequirement\u003e VALID_REQUIREMENT \u003d SHOPEE_SWE.getRequirements().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .map(JsonAdaptedRequirement::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_validInternshipItemDetails_returnsInternshipItem() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(SHOPEE_SWE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(SHOPEE_SWE, internshipItem.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidCompanyName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(INVALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_JOB_TITLE, VALID_PERIOD, VALID_WAGE, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d CompanyName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullCompanyName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(null,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_JOB_TITLE, VALID_PERIOD, VALID_WAGE, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CompanyName.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidJobTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(VALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                INVALID_JOB_TITLE, VALID_PERIOD, VALID_WAGE, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d JobTitle.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullJobTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(VALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                null, VALID_PERIOD, VALID_WAGE, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, JobTitle.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(VALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_JOB_TITLE, INVALID_PERIOD, VALID_WAGE, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d Period.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(VALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_JOB_TITLE, null, VALID_WAGE, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Period.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidWage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(VALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_JOB_TITLE, VALID_PERIOD, INVALID_WAGE, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d Wage.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullWage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(VALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_JOB_TITLE, VALID_PERIOD, null, VALID_REQUIREMENT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Wage.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidRequirement_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Set\u003cJsonAdaptedRequirement\u003e invalidRequirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        invalidRequirements.add(new JsonAdaptedRequirement(INVALID_REQUIREMENT));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedInternshipItem internshipItem \u003d new JsonAdaptedInternshipItem(VALID_COMPANY_NAME,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_JOB_TITLE, VALID_PERIOD, VALID_WAGE, invalidRequirements);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d Requirement.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internshipItem::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "ZoroarkDarkrai": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/profile/JsonAdaptedProfileItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.storage.profile.JsonAdaptedProfileItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.HTML_SKILL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedProfileItemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_TITLE \u003d \"@w350M3\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_CATEGORY \u003d \"PROJECT\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String INVALID_DESCRIPTOR \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String VALID_TITLE \u003d HTML_SKILL.getTitle().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String VALID_CATEGORY \u003d HTML_SKILL.getCategory().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final Set\u003cJsonAdaptedDescriptor\u003e VALID_DESCRIPTOR \u003d HTML_SKILL.getDescriptors().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .map(JsonAdaptedDescriptor::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_validProfileItemDetails_returnsProfileItem() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedProfileItem internshipItem \u003d new JsonAdaptedProfileItem(HTML_SKILL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(HTML_SKILL, internshipItem.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedProfileItem profileItem \u003d new JsonAdaptedProfileItem(INVALID_TITLE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_CATEGORY, VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, profileItem::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedProfileItem profileItem \u003d new JsonAdaptedProfileItem(null, VALID_CATEGORY, VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, profileItem::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedProfileItem profileItem \u003d new JsonAdaptedProfileItem(VALID_TITLE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                INVALID_CATEGORY, VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d ProfileItemCategory.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, profileItem::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_nullCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedProfileItem profileItem \u003d new JsonAdaptedProfileItem(VALID_TITLE, null, VALID_DESCRIPTOR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ProfileItemCategory.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, profileItem::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidDescriptor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Set\u003cJsonAdaptedDescriptor\u003e invalidDescriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        invalidDescriptors.add(new JsonAdaptedDescriptor(INVALID_DESCRIPTOR));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonAdaptedProfileItem profileItem \u003d new JsonAdaptedProfileItem(VALID_TITLE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                VALID_CATEGORY, invalidDescriptors);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        String expectedMessage \u003d Descriptor.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, profileItem::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/profile/JsonProfileItemListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.GRAPHQL_SKILL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.HACKATHON_ACHIEVEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.HTML_SKILL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.getSampleProfileItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonProfileItemListStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"JsonProfileItemListStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readProfileItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readProfileItemList(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private java.util.Optional\u003cReadOnlyItemList\u003cProfileItem\u003e\u003e readProfileItemList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonItemListStorage\u003c\u003e(Paths.get(filePath),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                ProfileItem.class, JsonAdaptedProfileItem.class).readItemList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(readProfileItemList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readProfileItemList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \"notJsonFormatProfileItemList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readProfileItemList_invalidProfileItemProfileItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readProfileItemList(\"invalidProfileItemList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readProfileItemList_invalidAndValidProfileItemProfileItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readProfileItemList("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \"invalidAndValidProfileItemList.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void readAndSaveProfileItemList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempProfileItemList.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cProfileItem\u003e original \u003d getSampleProfileItemList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e jsonItemListStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(filePath, ProfileItem.class, JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cProfileItem\u003e readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.addItem(HACKATHON_ACHIEVEMENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.removeItem(HTML_SKILL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.addItem(GRAPHQL_SKILL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        readBack \u003d jsonItemListStorage.readItemList().get(); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveProfileItemList_nullProfileItemList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProfileItemList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private void saveProfileItemList(ItemList\u003cProfileItem\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            new JsonItemListStorage\u003c\u003e(Paths.get(filePath), ProfileItem.class,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    JsonAdaptedProfileItem.class).saveItemList(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveProfileItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProfileItemList(new ItemList\u003c\u003e(), null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/profile/JsonSerializableProfileItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonSerializableItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.testutil.profile.SampleProfileItems;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonSerializableProfileItemListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \"test\", \"data\", \"JsonSerializableProfileItemListTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path SAMPLE_PROFILE_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"sampleProfileItemList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path INVALID_PROFILE_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidProfileItemList.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Path DUPLICATE_PROFILE_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateProfileItemList.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_sampleProfileItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cProfileItem, JsonAdaptedProfileItem\u003e dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                SAMPLE_PROFILE_ITEMS_FILE, ProfileItem.class, JsonAdaptedProfileItem.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cProfileItem\u003e addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cProfileItem\u003e sampleProfileItemListStorage \u003d SampleProfileItems.getSampleProfileItemList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(addressBookFromFile, sampleProfileItemListStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_invalidProfileItemFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cProfileItem, JsonAdaptedProfileItem\u003e dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                INVALID_PROFILE_ITEM_FILE, ProfileItem.class, JsonAdaptedProfileItem.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void toModelType_duplicateProfileItems_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cProfileItem, JsonAdaptedProfileItem\u003e dataFromFile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                DUPLICATE_PROFILE_ITEM_FILE, ProfileItem.class, JsonAdaptedProfileItem.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableItemList.MESSAGE_DUPLICATE_ITEM,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private ItemList\u003cPerson\u003e addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public AddressBookBuilder(ItemList\u003cPerson\u003e addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook.addItem(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemList\u003cPerson\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.getName() + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.getName()).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 7,
      "-": 53,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return Index.fromOneBased(model.getAddressBook().getFilteredItemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return Index.fromOneBased(model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getAddressBook().getFilteredItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 3,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 5,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ItemList\u003cPerson\u003e getTypicalAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e ab \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ab.addItem(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "ZoroarkDarkrai": 4,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/application/ApplicationItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.testutil.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.testutil.internship.SampleInternshipItems;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * TODO: Javadocs (Keane)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * A utility class to help with building ApplicationItem objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class ApplicationItemBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"APPLIED\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEFAULT_STATUS_DATE \u003d \"5-12-21\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private StatusDate statusDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private InternshipItem internshipItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Creates a {@code ApplicationItemBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ApplicationItemBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        status \u003d Status.valueOf(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        statusDate \u003d new StatusDate(DateUtil.convertToDateTime(DEFAULT_STATUS_DATE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internshipItem \u003d SampleInternshipItems.GOLDMAN_DA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Initializes the ApplicationItemBuilder with the data of {@code applicationToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ApplicationItemBuilder(ApplicationItem applicationToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(applicationToCopy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        status \u003d applicationToCopy.getStatus();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        statusDate \u003d applicationToCopy.getStatusDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        internshipItem \u003d applicationToCopy.getInternshipItem();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Sets the {@code Status} of the {@code ApplicationItem} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ApplicationItemBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.status \u003d Status.valueOf(status.toUpperCase());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Sets the {@code StatusDate} of the {@code ApplicationItem} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ApplicationItemBuilder withStatusDate(String statusDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(statusDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.statusDate \u003d new StatusDate(DateUtil.convertToDateTime(statusDate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Sets the {@code InternshipItem} of the {@code ApplicationItem} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ApplicationItemBuilder withInternshipItem(InternshipItem internshipItem) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(internshipItem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.internshipItem \u003d internshipItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ApplicationItem build() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ApplicationItem(internshipItem, status, statusDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15,
      "ZoroarkDarkrai": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/application/ApplicationItemFieldsUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.testutil.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains fields in the ApplicationItem class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationItemFieldsUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid status formats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_STATUS_APPLIED_MIX_CASE \u003d \"applIed\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_STATUS_REJECTED_MIX_CASE \u003d \"reJected\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid status formats"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String STATUS_BLANK \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_STATUS \u003d \"rest\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid Date-time formats"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String STATUS_DATE_WITH_TIME \u003d \"12-06-21 2230\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid Date-time formats"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_STATUS_DATE_TIME \u003d \"12-06-21 22:30\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Date formats"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String STATUS_DATE_JUNE_2021 \u003d \"12-06-21\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String STATUS_DATE_MAY_2021 \u003d \"12-05-21\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String STATUS_DATE_JUNE_2022 \u003d \"12-06-22\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EXPECTED_DATE_JUNE_2021 \u003d \"12 Jun 2021 @ 11.59 PM\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid date formats"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String BLANK_STATUS_DATE \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_STATUS_DATE \u003d \"12-12-2021\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/application/EditApplicationDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.testutil.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.edit.EditApplicationCommand.EditApplicationDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A utility class to help with building EditApplicationDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EditApplicationDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private EditApplicationDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor \u003d new EditApplicationDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationDescriptorBuilder(EditApplicationDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.descriptor \u003d new EditApplicationDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns an {@code EditApplicationDescriptor} with fields containing {@code applicationItem}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationDescriptorBuilder(ApplicationItem applicationItem) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor \u003d new EditApplicationDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor.setStatus(applicationItem.getStatus());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor.setStatusDate(applicationItem.getStatusDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the {@code Status} of the {@code EditApplicationDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationDescriptorBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor.setStatus(Status.valueOf(status.toUpperCase()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the {@code StatusDate} of the {@code EditApplicationDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationDescriptorBuilder withStatusDate(String statusDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        descriptor.setStatusDate(new StatusDate(DateUtil.convertToDateTime(statusDate)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EditApplicationDescriptor build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/application/SampleApplicationItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.testutil.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.OFFERED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2021;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.application.ApplicationItemFieldsUtil.STATUS_DATE_JUNE_2022;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.FACEBOOK_FE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.GOLDMAN_DA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.LAZADA_DS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.SampleInternshipItems.SHOPEE_SWE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class SampleApplicationItems {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final ApplicationItem SHOPEE_OFFERED \u003d new ApplicationItemBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withInternshipItem(SHOPEE_SWE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withStatus(OFFERED_KEYWORD)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withStatusDate(STATUS_DATE_JUNE_2021)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final ApplicationItem LAZADA_REJECTED \u003d new ApplicationItemBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withInternshipItem(LAZADA_DS)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withStatus(REJECTED_KEYWORD)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withStatusDate(STATUS_DATE_JUNE_2021)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final ApplicationItem FACEBOOK_ACCEPTED \u003d new ApplicationItemBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withInternshipItem(FACEBOOK_FE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withStatus(ACCEPTED_KEYWORD)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withStatusDate(STATUS_DATE_JUNE_2022)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final ApplicationItem GOLDMAN_OFFERED \u003d new ApplicationItemBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .withInternshipItem(GOLDMAN_DA)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .withStatus(OFFERED_KEYWORD)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .withStatusDate(STATUS_DATE_JUNE_2022)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an {@code ItemList\u003cApplicationItem\u003e} with all the sample application items."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ItemList\u003cApplicationItem\u003e getSampleApplicationItemList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cApplicationItem\u003e applicationItemList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (ApplicationItem applicationItem : getApplicationItems()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            applicationItemList.addItem(applicationItem);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return applicationItemList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static List\u003cApplicationItem\u003e getApplicationItems() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHOPEE_OFFERED, LAZADA_REJECTED));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32,
      "ZoroarkDarkrai": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/internship/InternshipItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.testutil.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A utility class to help with building InternshipItem objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipItemBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEFAULT_COMPANY_NAME \u003d \"Google\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEFAULT_JOB_TITLE \u003d \"Software Tester\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEFAULT_PERIOD \u003d \"Summer break, 3 months\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEFAULT_WAGE \u003d \"3500\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private CompanyName companyName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private JobTitle jobTitle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Period period;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Wage wage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Set\u003cRequirement\u003e requirements;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a {@code InternshipItemBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItemBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        companyName \u003d new CompanyName(DEFAULT_COMPANY_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        jobTitle \u003d new JobTitle(DEFAULT_JOB_TITLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        period \u003d new Period(DEFAULT_PERIOD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        wage \u003d new Wage(DEFAULT_WAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InternshipItemBuilder with the data of {@code internshipToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItemBuilder(InternshipItem internshipToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(internshipToCopy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        companyName \u003d internshipToCopy.getCompanyName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        jobTitle \u003d internshipToCopy.getJobTitle();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        period \u003d internshipToCopy.getPeriod();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        wage \u003d internshipToCopy.getWage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requirements \u003d new HashSet\u003c\u003e(internshipToCopy.getRequirements());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the {@code CompanyName} of the {@code InternshipItem} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItemBuilder withCompanyName(String companyName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(companyName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyName \u003d new CompanyName(companyName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the {@code JobTitle} of the {@code InternshipItem} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItemBuilder withJobTitle(String jobTitle) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(jobTitle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.jobTitle \u003d new JobTitle(jobTitle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the {@code Period} of the {@code InternshipItem} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItemBuilder withPeriod(String period) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.period \u003d new Period(period);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sets the {@code Wage} of the {@code InternshipItem} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItemBuilder withWage(String wage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(wage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.wage \u003d new Wage(wage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the {@code requirements} into a {@code Set\u003cRequirement\u003e}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and set it to the {@code InternshipItem} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItemBuilder withRequirements(String... requirements) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(requirements);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.requirements \u003d getRequirementSet(requirements);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItem build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new InternshipItem(companyName, jobTitle, period, wage, requirements);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns a set of requirements containing the list of strings given."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Set\u003cRequirement\u003e getRequirementSet(String... strings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .map(Requirement::new)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/internship/InternshipItemFieldsUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.testutil.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains valid fields in the InternshipItem class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipItemFieldsUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid company names"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_COMPANY_NAME_SHOPEE \u003d \"Shopee\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_COMPANY_NAME_LAZADA \u003d \"Lazada\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_COMPANY_NAME_FACEBOOK \u003d \"Facebook\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_COMPANY_NAME_GOLDMAN \u003d \"Goldman Sachs\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid job titles"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_JOB_TITLE_SWE \u003d \"Software Engineer\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_JOB_TITLE_FE \u003d \"Front End Engineer\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_JOB_TITLE_DS \u003d \"Data Scientist Intern\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_JOB_TITLE_DA \u003d \"Data Analyst\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid job titles"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_JOB_TITLE_DASH \u003d \"Software - Engineer\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_JOB_TITLE_BLANK \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid wages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_WAGE_2000 \u003d \"2000\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_WAGE_3000 \u003d \"3000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_WAGE_3500 \u003d \"3500\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_WAGE_4000 \u003d \"4000\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid wages"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_WAGE_ZERO \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_WAGE_NEGATIVE \u003d \"-5\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_WAGE_DECIMAL \u003d \"3555.4\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid periods"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_PERIOD_TWO_MONTHS \u003d \"2 months\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_PERIOD_THREE_MONTHS \u003d \"3 months\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_PERIOD_MAY_TO_JULY \u003d \"May - July\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_PERIOD_SUMMER \u003d \"Summer break\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid periods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_PERIOD_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_PERIOD_SPACES \u003d \"   \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Valid requirements"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_REQUIREMENT_VUE \u003d \"Vue\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_REQUIREMENT_R \u003d \"R\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_REQUIREMENT_RN \u003d \"React Native\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_REQUIREMENT_PYTHON \u003d \"Python\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALID_REQUIREMENT_TENSOR \u003d \"TensorFlow\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Invalid requirements"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_REQUIREMENT_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_REQUIREMENT_SPACES \u003d \"   \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/internship/SampleInternshipItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.testutil.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_COMPANY_NAME_FACEBOOK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_COMPANY_NAME_GOLDMAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_COMPANY_NAME_LAZADA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_COMPANY_NAME_SHOPEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_DA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_DS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_FE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_JOB_TITLE_SWE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_MAY_TO_JULY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_SUMMER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_THREE_MONTHS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_PERIOD_TWO_MONTHS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_PYTHON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_RN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_REQUIREMENT_TENSOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_2000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_3000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_3500;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.testutil.internship.InternshipItemFieldsUtil.VALID_WAGE_4000;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A utility class containing a list of {@code InternshipItem} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class SampleInternshipItems {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final InternshipItem SHOPEE_SWE \u003d new InternshipItemBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withCompanyName(VALID_COMPANY_NAME_SHOPEE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withJobTitle(VALID_JOB_TITLE_SWE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withWage(VALID_WAGE_2000)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withPeriod(VALID_PERIOD_TWO_MONTHS)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withRequirements(VALID_REQUIREMENT_RN)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final InternshipItem LAZADA_DS \u003d new InternshipItemBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withCompanyName(VALID_COMPANY_NAME_LAZADA)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withJobTitle(VALID_JOB_TITLE_DS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withWage(VALID_WAGE_3000)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withPeriod(VALID_PERIOD_THREE_MONTHS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withRequirements(VALID_REQUIREMENT_PYTHON, VALID_REQUIREMENT_TENSOR)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final InternshipItem FACEBOOK_FE \u003d new InternshipItemBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withCompanyName(VALID_COMPANY_NAME_FACEBOOK)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withJobTitle(VALID_JOB_TITLE_FE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withWage(VALID_WAGE_3500)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withPeriod(VALID_PERIOD_MAY_TO_JULY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final InternshipItem GOLDMAN_DA \u003d new InternshipItemBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withCompanyName(VALID_COMPANY_NAME_GOLDMAN)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withJobTitle(VALID_JOB_TITLE_DA)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withWage(VALID_WAGE_4000)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .withPeriod(VALID_PERIOD_SUMMER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns an {@code ItemList\u003cInternshipItem\u003e} with all the sample internship items."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static ItemList\u003cInternshipItem\u003e getSampleInternshipList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ItemList\u003cInternshipItem\u003e internshipItemList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (InternshipItem internshipItem : getInternshipItems()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            internshipItemList.addItem(internshipItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internshipItemList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static List\u003cInternshipItem\u003e getInternshipItems() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHOPEE_SWE, LAZADA_DS, FACEBOOK_FE, GOLDMAN_DA));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/profile/EditProfileItemDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.testutil.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditProfileCommand.EditProfileItemDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * A utility class to help with building EditProfileItemDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class EditProfileItemDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private EditProfileItemDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileItemDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor \u003d new EditProfileItemDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileItemDescriptorBuilder(EditProfileItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.descriptor \u003d new EditProfileItemDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns an {@code EditProfileItemDescriptor} with fields containing {@code profileItem}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileItemDescriptorBuilder(ProfileItem profileItem) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor \u003d new EditProfileItemDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor.setTitle(profileItem.getTitle());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor.setProfileItemCategory(profileItem.getCategory());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor.setDescriptors(profileItem.getDescriptors());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Sets the {@code ProfileItemCategory} of the {@code EditProfileItemDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileItemDescriptorBuilder withProfileItemCategory(String category) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor.setProfileItemCategory(ProfileItemCategory.valueOf(category.toUpperCase()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Sets the {@code Title} of the {@code EditProfileItemDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileItemDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the {@code descriptors} into a {@code Set\u003cDescriptor\u003e} and set it to the {@code EditProfileItemDescriptor}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileItemDescriptorBuilder withDescriptors(String... descriptors) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Set\u003cDescriptor\u003e descriptorSet \u003d Stream.of(descriptors).map(Descriptor::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptor.setDescriptors(descriptorSet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public EditProfileItemDescriptor build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/profile/ProfileItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.testutil.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * A utility class to help with building ProfileItem objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileItemBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String DEFAULT_PROFILE_TITLE \u003d \"Vue\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItemCategory DEFAULT_CATEGORY \u003d ProfileItemCategory.SKILL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private ProfileItemCategory category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Set\u003cDescriptor\u003e descriptors;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Creates a {@code ProfileItemBuilder} with the default details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        title \u003d new Title(DEFAULT_PROFILE_TITLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        category \u003d DEFAULT_CATEGORY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Initializes the ProfileItemBuilder with the data of {@code profileItemToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemBuilder(ProfileItem profileItemToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        title \u003d profileItemToCopy.getTitle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        category \u003d profileItemToCopy.getCategory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        descriptors \u003d new HashSet\u003c\u003e(profileItemToCopy.getDescriptors());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Sets the {@code Title} of the {@code ProfileItem} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Sets the {@code ProfileItemCategory} of the {@code ProfileItem} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.category \u003d ProfileItemCategory.valueOf(category.toUpperCase());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the {@code descriptors} into a {@code Set\u003cDescriptor\u003e}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and set it to the {@code ProfileItem} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemBuilder withDescriptors(String... descriptors) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.descriptors \u003d getDescriptorSet(descriptors);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItem build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new ProfileItem(title, category, descriptors);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns a set of descriptors containing the list of strings given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private Set\u003cDescriptor\u003e getDescriptorSet(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .map(Descriptor::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/profile/SampleProfileItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.testutil.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_ACHIEVEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_CATEGORY_EXPERIENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_DESCRIPTOR_LEARN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_COMPETITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.profile.ProfileCommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * A utility class containing a list of {@code ProfileItem} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public abstract class SampleProfileItems {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem HTML_SKILL \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(\"HTML\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(\"skill\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(\"Learn to create divs.\", \"learn to create tables.\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem HACKATHON_ACHIEVEMENT \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(\"Won second place in Code Jam\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(\"achievement\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(\"Solved the Board Meeting Question.\", \"Solved the Jungle Struggle question.\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem GOVTECH_EXPERIENCE \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(\"Internship with Govtech\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(\"experience\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(\"Implemented DevOps solution to speed up automated testing by 50%\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(\"Developed dashboard to keep track of key performance metrics\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(\"Build internal tooling for syncing data with remote servers\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem GRAPHQL_SKILL \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(\"GraphQL\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(\"skill\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem NUS_MODS_EXPERIENCE \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(\"Contribute to NUSMODS\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(\"experience\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(\"Fix UI bugs in Modules View\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem MS_HACKATHON_ACHIEVEMENT \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(\"Participation in MS OpenHack\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(\"achievement\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(\"Solve the Agriculture challenge with satellite imagery\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Manually added - ProfileItem\u0027s details found in {@code ProfileCommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem BYTEDANCE_INTERN \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(VALID_TITLE_INTERNSHIP)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(VALID_CATEGORY_EXPERIENCE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final ProfileItem ORBITAL_ACHIEVEMENT \u003d new ProfileItemBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withTitle(VALID_TITLE_COMPETITION)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withCategory(VALID_CATEGORY_ACHIEVEMENT)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            .withDescriptors(VALID_DESCRIPTOR_LEARN).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns an {@code ProfileItem} with all the sample profile items."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static ItemList\u003cProfileItem\u003e getSampleProfileItemList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ItemList\u003cProfileItem\u003e profileItemList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        for (ProfileItem profileItem : getProfileItems()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            profileItemList.addItem(profileItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return profileItemList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static List\u003cProfileItem\u003e getProfileItems() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HTML_SKILL, GOVTECH_EXPERIENCE, NUS_MODS_EXPERIENCE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                MS_HACKATHON_ACHIEVEMENT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 80,
      "ZoroarkDarkrai": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuardClauseUiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.testutil.application.SampleApplicationItems.getSampleApplicationItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.testutil.profile.SampleProfileItems.getSampleProfileItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_DATA_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_LIST_STRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_EMPTY_STRING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.GuardClauseUi.IS_SAME_STRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class GuardClauseUiTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String NON_EMPTY_STRING \u003d \"a\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EMPTY_LIST_STRING \u003d \"[]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String NON_EMPTY_LIST_STRING \u003d \"[a]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ItemList\u003cApplicationItem\u003e applicationItemList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ItemList\u003cProfileItem\u003e profileItemList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ObservableList\u003cCompanyItemStub\u003e companyItemStubList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationItemList \u003d getSampleApplicationItemList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileItemList \u003d getSampleProfileItemList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyItemStubList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isEmptyListString_true_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // string representation of an empty list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(IS_EMPTY_LIST_STRING.test(EMPTY_LIST_STRING));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isEmptyListString_false_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_LIST_STRING.test(EMPTY_STRING));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // string representation of a list with 1 element"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_LIST_STRING.test(NON_EMPTY_LIST_STRING));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null -\u003e false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_LIST_STRING.test(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isEmptyDataList_true_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(IS_EMPTY_DATA_LIST.test(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isEmptyDataList_false_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // application item list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_DATA_LIST.test(applicationItemList.getItemList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // profile item list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_DATA_LIST.test(profileItemList.getItemList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // company item list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyItemStubList.add(new CompanyItemStub());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_DATA_LIST.test(companyItemStubList));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_DATA_LIST.test(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isEmptyString_true_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(IS_EMPTY_STRING.test(EMPTY_STRING));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isEmptyString_false_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // non empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_STRING.test(NON_EMPTY_STRING));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // empty list string representation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_STRING.test(EMPTY_LIST_STRING));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // non empty list string representation"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_STRING.test(NON_EMPTY_LIST_STRING));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_EMPTY_STRING.test(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isSameString_true_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(IS_SAME_STRING.test(EMPTY_STRING, EMPTY_STRING));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // non empty string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(IS_SAME_STRING.test(NON_EMPTY_STRING, NON_EMPTY_STRING));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void isSameString_false_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // empty string against non empty string"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_SAME_STRING.test(EMPTY_STRING, NON_EMPTY_STRING));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // empty list string against non empty list string"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_SAME_STRING.test(EMPTY_LIST_STRING, NON_EMPTY_LIST_STRING));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // one null case in first param"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_SAME_STRING.test(null, EMPTY_STRING));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // one null case in second param"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_SAME_STRING.test(EMPTY_STRING, null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // both null"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(IS_SAME_STRING.test(null, null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * TODO Note that all stub class to be removed after all the sample is made"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * SampleApplicationItems, SampleInternshipItems, SampleCompanyItems, SampleProfileItems."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    static class CompanyItemStub extends Item {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public String getItemName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public JsonAdaptedItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TitleDescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.textstyle.TitleDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TitleDescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String HELLO \u003d \"Hello\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DESCRIPTION \u003d \"Description\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TITLE \u003d \"Title\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String WORLD \u003d \"WORLD\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TitleDescription helloDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TitleDescription helloWorld;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TitleDescription titleWorld;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        helloDescription \u003d TitleDescription.createTitleDescription(HELLO, DESCRIPTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        helloWorld \u003d TitleDescription.createTitleDescription(HELLO, WORLD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        titleWorld \u003d TitleDescription.createTitleDescription(TITLE, WORLD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(helloDescription.equals(TitleDescription.createTitleDescription(HELLO, DESCRIPTION)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(helloDescription.equals(helloDescription));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloDescription.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloDescription.equals(0.5f));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloDescription.equals(TitleDescription.createTitleDescription(\"T\", DESCRIPTION)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloDescription.equals(TitleDescription.createTitleDescription(TITLE, \"D\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // different title and description -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloDescription.equals(TitleDescription.createTitleDescription(\"HELLO\", WORLD)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getTitle_true_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(helloWorld.getTitle().getText().equals(HELLO));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(titleWorld.getTitle().getText().equals(TITLE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getTitle_false_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloWorld.getTitle().getText().equals(TITLE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(titleWorld.getTitle().getText().equals(HELLO));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getDescription_true_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(helloWorld.getDescription().getText().equals(WORLD));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(helloDescription.getDescription().getText().equals(DESCRIPTION));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void getDescription_false_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloDescription.getDescription().getText().equals(WORLD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(helloWorld.getDescription().getText().equals(DESCRIPTION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void constructor_validFileString_loadsFile() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(VALID_FILE_PATH).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void constructor_validFileWithFxRootString_loadsFile() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(VALID_FILE_WITH_FX_ROOT_PATH, root).getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "seanjyjy": 11
    }
  }
]
