[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-1/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Check out our [User Guide](https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html) to get started."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 8,
      "-": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the latest `addressbook.jar` from [here](https://github.com/se-edu/addressbook-level3/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`list`** : Lists all contacts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   * **`addpatient`** `n/John Doe t/37.4 d/20200910-20200924 p/98765432 a/35` : Adds a quarantined individual named `John Doe` to the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`clear`** : Deletes all contacts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  e.g. in `addpatient n/NAME`, `NAME` is a parameter which can be used as `addpatient n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### Adding a patient: `addpatient`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Adds a quarantined individual to the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Format: `addpatient n/NAME t/TEMPERATURE d/PERIOD_OF_STAY p/PHONE_NUMBER a/AGE [c/COMMENT]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Adds a quarantined individual with the specified name, temperature, period of stay, phone number and age."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Temperature must be to 1 decimal place (e.g. 37.0 instead of 37)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Period of stay is in the format YYYYMMDD-YYYYMMDD."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* It is optional to include the comment field for the quarantined individual."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `addpatient n/John Doe p/98765432 t/37.4 d/20200910-20200924 a/35`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `addpatient n/Betsy Crowe t/36.5 d/20201001-20201014 p/91234567 a/19 c/Is asthmatic`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "### Listing all persons : `list`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "### Editing a person : `edit`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "### Locating persons by name: `find`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person : `delete`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "### Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Add Patient** | `addpatient n/NAME t/TEMPERATURE d/PERIOD_OF_STAY p/PHONE_NUMBER a/AGE [c/COMMENT]` \u003cbr\u003e e.g.,`addpatient n/Betsy Crowe t/36.5 d/20201001-20201014 p/91234567 a/19 c/Is asthmatic`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 13,
      "-": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient name provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_PATIENT_LISTED_OVERVIEW \u003d \"%1$d patient listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.temporal.TemporalQuery;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Helper functions for handling date and date-time objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Date formats"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20200920 */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_YEAR_MONTH_DAY \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20 Sep 2020 */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20/9/2020 */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Date-time formats"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20200920 or 20200920 2359 */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"yyyyMMdd\", \" HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20 Sep 2020 (time defaults to 0000) or 20 Sep 2020 2359 */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"d MMM yyyy\", \" HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20/9/2020 (time defaults to 0000) or 20/09/2020 2359 */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"d/M/yyyy\", \" HHmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the text into a date-time object (e.g. {@code LocalDate} or {@code LocalDateTime})"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * using all given {@code DateTimeFormatter} and returns the first successful result."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The text is parsed using each formatter in turn. No output is generated if a formatter fails to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * parse the text. However, a {@code DateTimeParseException} is thrown if all formatters fail."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The {@code TemporalQuery\u003cT\u003e} is typically a method reference to a"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code from(TemporalAccessor)} method."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * For example:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *     LocalDate date \u003d DateTimeUtil.parseFirstMatching(text, LocalDate::from, formatter1, formatter2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * \u003c/pre\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * For more details, refer to"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * parse-java.lang.CharSequence-java.time.temporal.TemporalQuery-"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param text The text to parse, cannot be null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param query A way to retrieve information from a temporal-based object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param formatters Formatters to parse the text with, cannot be null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param \u003cT\u003e A date-time class, usually a {@code TemporalAccessor}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The date-time object parsed from text."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws DateTimeParseException if text cannot be parsed with any of the formatters or no formatters provided."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static \u003cT\u003e T parseFirstMatching("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            CharSequence text, TemporalQuery\u003cT\u003e query, DateTimeFormatter... formatters) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(text, query, formatters);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (DateTimeFormatter formatter : formatters) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                return formatter.parse(text, query);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                // Current formatter is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                // Proceed to test next formatter."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String exceptionMessage \u003d String.format(\"Unable to parse %s\", text);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int errorIndex \u003d 0; // index in parsed text that was invalid, set to 0 to indicate entirety of text"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new DateTimeParseException(exceptionMessage, text, errorIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code DateTimeFormatter} with default values of time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If a time conforms to the time format, the {@code DateTimeFormatter} sets the parsed date-time"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * to that value. Otherwise, the hour and minute of the parsed date-time are set to 0."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param dateFormat The pattern for the date portion of a string parsed by  a{@code DateTimeFormatter}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param timeFormat The pattern for the time portion of a string parsed by a {@code DateTimeFormatter}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code DateTimeFormatter} that defaults the hour and minute to 0 if time does not conform to format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static DateTimeFormatter createFormatterWithOptionalTime(String dateFormat, String timeFormat) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .appendPattern(dateFormat)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .optionalStart()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .appendPattern(timeFormat)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .optionalEnd()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Adds a person to the app."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpatient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to Covigent. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_TEMP + \"TEMPERATURE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PERIOD_OF_STAY + \"PERIOD OF STAY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"[\" + PREFIX_COMMENTS + \"COMMENTS]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_TEMP + \"37.0 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PERIOD_OF_STAY + \"20200914-20200928 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_AGE + \"22 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_COMMENTS + \"Vegan,asthmatic \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in Covigent\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public AddPatientCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof AddPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 20,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Edit a patient in address book with the selected name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Input of name is case insensitive."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpatient\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"by the person\u0027s name used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Parameters: NAME (must match exactly with the name of the person to be edited in the person list) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_TEMP + \"TEMPERATURE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_AGE + \"AGE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_PERIOD_OF_STAY + \"PERIOD OF STAY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_COMMENTS + \"COMMENT] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" john \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + PREFIX_TEMP + \"36.5\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final String personToBeEdited;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs an EditCommand to edit the patient with the name {@code String}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param personToBeEdited name in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPatientCommand(String personToBeEdited, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(personToBeEdited);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.personToBeEdited \u003d personToBeEdited.trim().toLowerCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            String personName \u003d lastShownList.get(i - 1).getName().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            boolean isValidPerson \u003d personName.trim().toLowerCase().equals(personToBeEdited);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (isValidPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased() - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param personToEdit Person that is to be edited."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param editPersonDescriptor Details to edit the person with."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Person that has been edited."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Temperature updatedTemperature \u003d editPersonDescriptor.getTemperature().orElse(personToEdit.getTemperature());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Age updatedAge \u003d editPersonDescriptor.getAge().orElse(personToEdit.getAge());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        PeriodOfStay updatedPeriodOfStay \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .getPeriodOfStay()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .orElse(personToEdit.getPeriodOfStay());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Comment updatedComment \u003d editPersonDescriptor.getComment().orElse(personToEdit.getComment());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new Person(updatedName, updatedTemperature, updatedPeriodOfStay,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                updatedPhone, updatedAge, updatedComment);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (other \u003d\u003d this) { //short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!(other instanceof EditPatientCommand)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand e \u003d (EditPatientCommand) other; // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return personToBeEdited.equals(e.personToBeEdited)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Temperature temperature;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Age age;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Comment comment;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         * Constructs a EditPersonDescriptor object with the following fields."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         * @param toCopy EditPersonDescriptor to copy the fields from."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setTemperature(toCopy.temperature);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setAge(toCopy.age);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setPeriodOfStay(toCopy.periodOfStay);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setComment(toCopy.comment);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, temperature, age, periodOfStay, comment);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setTemperature(Temperature temperature) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cTemperature\u003e getTemperature() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(temperature);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setAge(Age age) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cAge\u003e getAge() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(age);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setPeriodOfStay(PeriodOfStay periodOfStay) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cPeriodOfStay\u003e getPeriodOfStay() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(periodOfStay);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setComment(Comment comment) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.comment \u003d comment;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cComment\u003e getComment() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(comment);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other; // state check"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getTemperature().equals(e.getTemperature())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getAge().equals(e.getAge())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getPeriodOfStay().equals(e.getPeriodOfStay())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getComment().equals(e.getComment());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 112,
      "-": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String.format(Messages.MESSAGE_PATIENT_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Parses input arguments and creates a new AddPatientCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPatientCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * and returns an AddPatientCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public AddPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TEMP, PREFIX_PERIOD_OF_STAY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        PREFIX_PHONE, PREFIX_AGE, PREFIX_COMMENTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TEMP, PREFIX_PERIOD_OF_STAY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                PREFIX_PHONE, PREFIX_AGE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Temperature temp \u003d ParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMP).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PeriodOfStay periodOfStay \u003d ParserUtil.parsePeriodOfStay(argMultimap.getValue(PREFIX_PERIOD_OF_STAY).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Comment comment \u003d new Comment(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            comment \u003d ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENTS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            //unhandled because comment will be initialised already"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person person \u003d new Person(name, temp, periodOfStay, phone, age, comment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new AddPatientCommand(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        case AddPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new AddPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case EditPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new EditPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 3,
      "chiamyunqing": 4,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Prefix PREFIX_TEMP \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Prefix PREFIX_PERIOD_OF_STAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Prefix PREFIX_COMMENTS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Parses input arguments and creates a new EditPatientCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPatientCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * and returns an EditPatientCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param args that are inputted by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return EditPatientCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        PREFIX_COMMENTS, PREFIX_TEMP, PREFIX_AGE, PREFIX_PERIOD_OF_STAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String personTobeEdited \u003d argMultimap.getPreamble().trim().toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditPatientCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEMP).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            editPersonDescriptor.setTemperature(ParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMP).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AGE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            editPersonDescriptor.setAge(ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD_OF_STAY).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            editPersonDescriptor.setPeriodOfStay(ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    .parsePeriodOfStay(argMultimap.getValue(PREFIX_PERIOD_OF_STAY).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMMENTS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            editPersonDescriptor.setComment(ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENTS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(EditPatientCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new EditPatientCommand(personTobeEdited, editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 41,
      "chiamyunqing": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String temperature} into a {@code Temperature}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the given {@code temperature} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static Temperature parseTemperature(String temp) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(temp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String trimmedTemp \u003d temp.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Temperature.isValidTemperature(trimmedTemp)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new Temperature(trimmedTemp);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String period of stay} into a {@code PeriodOfStay}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the given {@code period of stay} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static PeriodOfStay parsePeriodOfStay(String periodOfStay) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(periodOfStay);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String trimmedPeriodOfStay \u003d periodOfStay.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!PeriodOfStay.isValidPeriodOfStay(trimmedPeriodOfStay)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(PeriodOfStay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new PeriodOfStay(trimmedPeriodOfStay);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String comment} into a {@code Comment}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return an \"-\" comment if no comment is added"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static Comment parseComment(String comment) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new Comment(\"-\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new Comment(comment.trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //TODO to delete"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //TODO to delete"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //TODO to delete"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 60,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Age.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Person\u0027s age recorded in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Age should only contain numbers.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d Integer.parseInt(age);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 (Integer.parseInt(test) \u003e\u003d 0)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 (Integer.parseInt(test) \u003c 120);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Age) other).value); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Integer.toString(value).hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Comment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents important comments of the Person in the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is an optional attribute of person."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Comment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Comment}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param comment A valid comment"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Comment(String comment) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d comment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Comment // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value.equals(((Comment) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Person\u0027s name in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PeriodOfStay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Person\u0027s period of stay in the facility."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPeriodOfStay(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PeriodOfStay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Period of stay should be in the format YYYYMMDD-YYYYMMDD.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8}[-]\\\\d{8}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final LocalDate startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final LocalDate endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code PeriodOfStay}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param periodOfStay A valid period of stay."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(periodOfStay);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidPeriodOfStay(periodOfStay), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        startDate \u003d LocalDate.parse(periodOfStay.split(\"-\")[0], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        endDate \u003d LocalDate.parse(periodOfStay.split(\"-\")[1], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid period of stay."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidPeriodOfStay(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        boolean isRegexCorrect \u003d test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (isRegexCorrect) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            String[] dates \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                LocalDate start \u003d LocalDate.parse(dates[0], DateTimeFormatter.ofPattern(\"yyyyMMdd\")); //check start date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                LocalDate end \u003d LocalDate.parse(dates[1], DateTimeFormatter.ofPattern(\"yyyyMMdd\")); //check end date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return start.compareTo(end) \u003c 0; //check start date less than end date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return startDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\")) + \"-\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + endDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof PeriodOfStay // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 startDate.compareTo(((PeriodOfStay) other).startDate) \u003d\u003d 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 endDate.compareTo(((PeriodOfStay) other).endDate) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Person in the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Temperature temperature;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Comment comment; //an optional field, if null is initialised to \"-\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Person(Name name, Temperature temperature, PeriodOfStay periodOfStay,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  Phone phone, Age age, Comment comment) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(name, temperature, periodOfStay, phone, age);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.comment \u003d comment \u003d\u003d null ? new Comment(\"-\") : comment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Temperature getTemperature() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return temperature;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PeriodOfStay getPeriodOfStay() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return periodOfStay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Comment getComment() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPerson.getPeriodOfStay().equals(getPeriodOfStay())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(getAge());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPerson.getTemperature().equals(getTemperature())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPerson.getPeriodOfStay().equals(getPeriodOfStay())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(getAge());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Objects.hash(name, temperature, periodOfStay, phone, age);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\" Temperature: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getTemperature())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\" Period of stay: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getPeriodOfStay())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getAge())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\" Comment: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getComment());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 35,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Person\u0027s phone number in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Temperature.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Person\u0027s temperature recorded in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTemperature(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Temperature {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Temperature should only contain numbers, and it should be to one decimal place. (E.g. 36.0)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\\\\d[.]\\\\d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Temperature}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param temperature A valid temperature."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Temperature(String temperature) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(temperature);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidTemperature(temperature), MESSAGE_CONSTRAINTS); //ensures temp is always to 1 d.p."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d Double.parseDouble(temperature);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid temperature."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidTemperature(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Temperature // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Temperature) other).value); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Double.toString(value).hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Temperature(\"36.7\"), new PeriodOfStay(\"20200908-20200918\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"87438807\"), new Age(\"23\"), null),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Temperature(\"37.0\"), new PeriodOfStay(\"20200808-20200819\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"99272758\"), new Age(\"37\"), null),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Temperature(\"38.0\"), new PeriodOfStay(\"20200301-20200309\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"93210283\"), new Age(\"87\"), null),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new Person(new Name(\"David Li\"), new Temperature(\"35.8\"), new PeriodOfStay(\"20201001-20201014\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"91031282\"), new Age(\"13\"), null),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Temperature(\"37.7\"), new PeriodOfStay(\"20200901-20200915\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"92492021\"), new Age(\"65\"), null)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 13,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String temperature;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String periodOfStay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String age;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String comment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"temperature\") String temperature,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            @JsonProperty(\"periodOfStay\") String periodOfStay, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            @JsonProperty(\"age\") String age, @JsonProperty(\"comment\") String comment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature \u003d source.getTemperature().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay \u003d source.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age \u003d source.getAge().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment \u003d source.getComment().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (temperature \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    Temperature.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Temperature.isValidTemperature(temperature)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Temperature modelTemp \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (periodOfStay \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    PeriodOfStay.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!PeriodOfStay.isValidPeriodOfStay(periodOfStay)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(PeriodOfStay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final PeriodOfStay modelPeriod \u003d new PeriodOfStay(periodOfStay);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Comment.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Comment modelComment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new Person(modelName, modelTemp, modelPeriod, modelPhone, modelAge, modelComment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 51,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label temperature;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label periodOfStay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label comment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature.setText(\"Temperature: \" + person.getTemperature().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay.setText(\"Period of stay: \" + person.getPeriodOfStay().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        phone.setText(\"Phone number: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age.setText(\"Age: \" + person.getAge().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment.setText(\"Comment: \" + person.getComment().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 9,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cLabel fx:id\u003d\"temperature\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$temperature\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cLabel fx:id\u003d\"periodOfStay\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$periodOfStay\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cLabel fx:id\u003d\"comment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$comment\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateTimeUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullText_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                null, LocalDate::from, DateTimeFormatter.ofPattern(\"yyyyMMdd\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullQuery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", null, DateTimeFormatter.ofPattern(\"yyyyMMdd\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullFormatter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, (DateTimeFormatter) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_noFormattersGiven_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateFormatterInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_YEAR_MONTH_DAY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"Dec 30 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"2020/12/30\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateTimeFormatterInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"Dec 30 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"2020/12/30\", LocalDateTime::from,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateFormattersInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"aaa\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateTimeFormattersInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"aaa\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateTimeFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int hour \u003d 23;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int minute \u003d 59;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (custom time)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultHour \u003d 0;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultMinute \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithDefaultTime \u003d LocalDateTime.of(year, month, day, defaultHour, defaultMinute);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (default time)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDateTime::from,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDateTime::from,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDateTime::from,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateTimeFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int hour \u003d 23;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int minute \u003d 59;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithCustomTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (custom time)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultHour \u003d 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultMinute \u003d 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithDefaultTime \u003d LocalDateTime.of(year, month, day, defaultHour, defaultMinute);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (default time)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 246
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String addPatientCommand \u003d seedu.address.logic.commands.AddPatientCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + NAME_DESC_AMY + TEMP_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_AMY + PHONE_DESC_AMY + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(addPatientCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "chiamyunqing": 10,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPatientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddPatientCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(new AddPatientCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(new AddPatientCommand(personInList), model, AddPatientCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 7,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommandTest.ModelStubAcceptingPersonAdded modelStub \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new AddPatientCommandTest.ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        CommandResult commandResult \u003d new AddPatientCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommandTest.ModelStub modelStub \u003d new AddPatientCommandTest.ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(CommandException.class, AddPatientCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                addPatientCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private class ModelStubWithPerson extends AddPatientCommandTest.ModelStub {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends AddPatientCommandTest.ModelStub {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 15,
      "-": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "chiamyunqing": 3,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * and unit tests for EditPatientCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(\"Alice Pauline\", descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(TypicalPersons.GEORGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(\"George Best\", descriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedModel.setPerson(TypicalPersons.GEORGE, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(\"Alice Pauline\", new EditPersonDescriptor());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(\"Alice Pauline\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(\"Benson Meier\", descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(\"Alice Pauline\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_invalidPersonNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(\"Unknown\", descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final EditPatientCommand standardCommand \u003d new EditPatientCommand(\"Amy Bee\", DESC_AMY);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Same values -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(\"Amy Bee\", copyDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different index -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(\"Bob Choo\", DESC_AMY)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(\"Amy Bee\", DESC_BOB)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 3,
      "chiamyunqing": 1,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NewCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class NewCommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_TEMP_AMY \u003d \"36.7\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_TEMP_BOB \u003d \"37.0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_PERIOD_AMY \u003d \"20200912-20200918\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_PERIOD_BOB \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_AGE_AMY \u003d \"22\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_AGE_BOB \u003d \"45\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMENT_AMY \u003d \"Down with flu\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String TEMP_DESC_AMY \u003d \" \" + PREFIX_TEMP + VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String TEMP_DESC_BOB \u003d \" \" + PREFIX_TEMP + VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String PERIOD_DESC_AMY \u003d \" \" + PREFIX_PERIOD_OF_STAY + VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String PERIOD_DESC_BOB \u003d \" \" + PREFIX_PERIOD_OF_STAY + VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMENT_DESC_AMY \u003d \" \" + PREFIX_COMMENTS + COMMENT_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_TEMP_DESC \u003d \" \" + PREFIX_TEMP + \"36.P\"; //non-numeric not allowed in temperature"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD_OF_STAY + \"20200913-20201838\"; //invalid date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"999\"; //cannot be so old"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String NO_COMMENT \u003d \"-\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMENT \u003d \"History of heart attack\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final EditPatientCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final EditPatientCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withAge(VALID_AGE_AMY).withComment(COMMENT).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTemperature(VALID_TEMP_BOB).withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withAge(VALID_AGE_BOB).withComment(NO_COMMENT).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 9,
      "chiamyunqing": 23,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_TEMP_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple temperature - last temp accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_AMY + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple period of stay - last period of stay accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple phone - last phone accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple age - last age accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_AMY + AGE_DESC_BOB, new AddPatientCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /* for remark TODO"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY ,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new AddPatientCommand(expectedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + VALID_PHONE_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing temperature prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_TEMP_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing period of stay prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + VALID_PERIOD_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing age prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + VALID_AGE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_TEMP_BOB + VALID_PERIOD_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + VALID_PHONE_BOB + VALID_AGE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + INVALID_PHONE_DESC + AGE_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid temperature"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_TEMP_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid period of stay"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + INVALID_PERIOD_DESC"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, PeriodOfStay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid age"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_AGE_DESC, Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_TEMP_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PersonUtil.getAddPatientCommand(person));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(new AddPatientCommand(person), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 6,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.EditPatientCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.COMMENT_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_TEMP_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_AGE_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Age.MESSAGE_CONSTRAINTS); // invalid age"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PERIOD_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                PeriodOfStay.MESSAGE_CONSTRAINTS); // invalid period"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_TEMP_DESC,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Temperature.MESSAGE_CONSTRAINTS); // invalid temperature"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Invalid phone followed by valid age"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PHONE_DESC + AGE_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_AGE_DESC + VALID_PERIOD_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + AGE_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + TEMP_DESC_AMY + PERIOD_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Phone"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Age"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Period"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPeriodOfStay(VALID_PERIOD_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Temperature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTemperature(VALID_TEMP_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Comment"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withComment(COMMENT_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY + AGE_DESC_AMY + TEMP_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PERIOD_DESC_AMY + PHONE_DESC_AMY + AGE_DESC_AMY + TEMP_DESC_AMY + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_BOB).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + TEMP_DESC_BOB + INVALID_PHONE_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 181
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AgeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidAge \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null age"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid age"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"twenty\")); //non-numeric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"1200\")); //impossible to be so old"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //valid age"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Age.isValidAge(\"30\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Age.isValidAge(\"101\")); //still possible"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PeriodOfStayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PeriodOfStayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PeriodOfStay(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidPeriodOfStay_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidPeriodOfStay \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PeriodOfStay(invalidPeriodOfStay));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidPeriodOfStay() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null period of stay"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PeriodOfStay.isValidPeriodOfStay(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid period of stay"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"stay\")); //non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200709\")); //no end date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"2020090p-20201009\")); //alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200101 - 20200202\")); //spaces in input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"2020090120201009\")); //missing dash"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200901-20201038\")); //no such date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20201801-20201001\")); //no such month"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200901-20200801\")); //end date before start date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //valid period of stay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(PeriodOfStay.isValidPeriodOfStay(\"20190308-20190506\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(PeriodOfStay.isValidPeriodOfStay(\"20200913-20200914\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different phone and temp -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withTemperature(VALID_TEMP_BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //different period of stay -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withAge(VALID_AGE_BOB).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //same name, same phone, same age, same period of stay, diff temp -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTemperature(VALID_TEMP_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //diff comments but all attributes same -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withComment(COMMENT).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different period of stay -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAge(VALID_AGE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 24,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TemperatureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class TemperatureTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Temperature(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidTemperature_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidTemperature \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Temperature(invalidTemperature));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidTemperature() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null temperature"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Temperature.isValidTemperature(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid temperature"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"\")); //empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37\")); //not 1 decimal place"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"temp\")); //non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37.a\")); //alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37.\")); //no digit after decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"3 7.6\")); //spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // valid temperature"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Temperature.isValidTemperature(\"36.7\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Temperature.isValidTemperature(\"36.0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "-": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_TEMP \u003d \"39.p\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_PERIOD \u003d \"20200011-20209900\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_AGE \u003d \"1000\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_TEMP \u003d BENSON.getTemperature().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_PERIOD \u003d BENSON.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_AGE \u003d BENSON.getAge().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String COMMENT \u003d \"Vegan\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidTemp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Temperature.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullTemp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PERIOD,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Temperature.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_TEMP, INVALID_PERIOD,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d PeriodOfStay.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_TEMP, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PeriodOfStay.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        INVALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                null, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, INVALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Age.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, null, COMMENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 50,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setAge(person.getAge());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setPeriodOfStay(person.getPeriodOfStay());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setComment(person.getComment());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setTemperature(person.getTemperature());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code Age} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPersonDescriptorBuilder withAge(String age) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setAge(new Age(age));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code PeriodOfStay} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPersonDescriptorBuilder withPeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setPeriodOfStay(new PeriodOfStay(periodOfStay));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code Comment} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPersonDescriptorBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setComment(new Comment(comment));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code Temperature} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPersonDescriptorBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setTemperature(new Temperature(temperature));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 26,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.PeriodOfStay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.person.Temperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String DEFAULT_TEMPERATURE \u003d \"36.8\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String DEFAULT_PERIOD \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"37\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String DEFAULT_COMMENT \u003d \"-\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Temperature temperature;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature \u003d new Temperature(DEFAULT_TEMPERATURE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay \u003d new PeriodOfStay(DEFAULT_PERIOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment \u003d new Comment(DEFAULT_COMMENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature \u003d personToCopy.getTemperature();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay \u003d personToCopy.getPeriodOfStay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age \u003d personToCopy.getAge();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment \u003d personToCopy.getComment();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Temperature} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PersonBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.temperature \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Period of stay} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PersonBuilder withPeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.periodOfStay \u003d new PeriodOfStay(periodOfStay);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Age} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PersonBuilder withAge(String age) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Comment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PersonBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.comment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new Person(name, temperature, periodOfStay, phone, age, comment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 38,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.AddPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static String getAddPatientCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return AddPatientCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        sb.append(PREFIX_TEMP + person.getTemperature().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        sb.append(PREFIX_PERIOD_OF_STAY + person.getPeriodOfStay().toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        sb.append(PREFIX_AGE + person.getAge().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 12,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.8\").withPeriodOfStay(\"20200911-20200918\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"94351253\").withAge(\"31\").withComment(\"Vegan\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"38.0\").withPeriodOfStay(\"20200810-20200824\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"98765432\").withAge(\"67\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"38.3\").withPeriodOfStay(\"20200910-20200917\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"95352563\").withAge(\"17\").withComment(\"asthmatic\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.3\").withPeriodOfStay(\"20200808-20200809\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"87652533\").withAge(\"55\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.4\").withPeriodOfStay(\"20200707-20200719\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482224\").withAge(\"81\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.1\").withPeriodOfStay(\"20201004-20201019\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482427\").withAge(\"11\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.4\").withPeriodOfStay(\"20201101-20201114\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482442\").withAge(\"28\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.0\").withPeriodOfStay(\"20200913-20200920\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"8482424\").withAge(\"90\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.6\").withPeriodOfStay(\"20200404-20200414\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"8482131\").withAge(\"54\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(VALID_TEMP_BOB).withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withAge(VALID_AGE_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 39,
      "-": 43
    }
  }
]
