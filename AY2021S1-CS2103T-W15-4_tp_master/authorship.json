[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W15-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W15-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W15-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W15-4/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[![Codacy Badge](https://app.codacy.com/project/badge/Grade/0f70aafdfeb84814a92b76d5182cc82a)](https://www.codacy.com/gh/AY2021S1-CS2103T-W15-4/tp/dashboard?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY2021S1-CS2103T-W15-4/tp\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* **ZooKeep** is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ZooKeep can get your management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Adding a new animal under your care."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Viewing the list of animals under your care."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Removing a specific animal."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* For the detailed documentation of this project, see the **[ZooKeep Product Website](https://ay2021s1-cs2103t-w15-4.github.io/tp/)**."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 3,
      "-": 4,
      "lamlaaaam": 9
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    archiveName \u003d \u0027zookeep.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "lamlaaaam": 5
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "### Lam Zhi Yuan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "\u003cimg src\u003d\"images/lamlaaaam.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "[[github](https://github.com/lamlaaaam)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[[portfolio](team/lamlaaaam.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* Responsibilities: Deliverables and deadlines, scheduling and tracking"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "### Lim Jun Cheng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u003cimg src\u003d\"images/juncheng98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "[[github](http://github.com/JunCheng98)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[[portfolio](team/JunCheng98.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "### Aizat Azhar"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003cimg src\u003d\"images/aizatazhar.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[[github](http://github.com/aizatazhar)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[[portfolio](team/aizatazhar.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": "### Jeremy Tan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003cimg src\u003d\"images/koonweee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koonweee"
        },
        "content": "[[github](http://github.com/koonweee)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koonweee"
        },
        "content": "[[portfolio](team/koonweee.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "### Malcolm Ong"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003cimg src\u003d\"images/m0nggh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "[[github](http://github.com/m0nggh)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "[[portfolio](team/m0nggh.md)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* Responsibilities: Code testing and quality"
      }
    ],
    "authorContributionMap": {
      "koonweee": 4,
      "JunCheng98": 5,
      "m0nggh": 5,
      "aizatazhar": 7,
      "-": 32,
      "lamlaaaam": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[diagrams](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/docs/diagrams/) folder. Refer "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/java/seedu/address/MainApp.java). "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "It is responsible for the following situations:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "The rest of the App consists of four components:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from and writes data to the hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "(which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "which implements the `Logic` interface."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "scenario where the user issues the command `delete 123`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "![Sequence Diagram of delete command](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the userâ€™s preferences."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W15-4/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "### Undo feature (by Zhi Yuan)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "The undo feature is facilitated by a stack data structure."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "The `HistoryStack` class wraps a stack designed to hold `ReadOnlyZooKeepBook` objects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "The Singleton Pattern is employed here since only one history instance should exist in the running of the application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "`HistoryStack` supports the following key features:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `HistoryStack#addToHistory(ReadOnlyZooKeepBook)` - Adds the given state of the book into history only if it differs from the most recent state."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `HistoryStack#removeRecentHistory()` - Removes the most recent state of the book from the history."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `HistoryStack#viewRecentHistory()` - Returns the most recent state of the book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `HistoryStack#clearHistory()` - Clears the history."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "The undo feature also depends on the following existing methods:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `Model#setZooKeepBook(ReadOnlyZooKeepBook)` - Replaces the current model\u0027s book data with the given."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `Model#getZooKeepBook()` - Returns the model\u0027s current book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "The following classes reference the above methods:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `UndoCommand`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* `LogicManager`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Classes pertaining to the Redo command also refer to these methods, but will be excluded here and explained in the section below instead."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Given below is an example usage scenario and how the undo mechanism behaves at each step."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Step 1. The user launches the application for the first time. The `HistoryStack` will be initialized with a single state, which is the current state."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "![UndoState0](images/UndoState0.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Step 2. The user executes `delete 1` command to delete the animal with ID 1. `LogicManager` calls `Model#getZooKeepBook()` to retrieve the new state of the book, and adds it to the history with `HistoryStack#addToHistory(ReadOnlyZooKeepBook)`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "![UndoState1](images/UndoState1.png)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Step 3. The user executes `help` to view the help screen. `LogicManager` behaves as per Step 2. However, since no changes were made to the state, the current state is not added to `HistoryStack`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "![UndoState2](images/UndoState2.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `HistoryStack#addToHistory()`, so the state will not be saved into the `HistoryStack`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Step 4. The user now decides that deleting the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `HistoryStack#removeRecentHistory()` which deletes the current state, and exposes the previous state. `HistoryStack#viewRecentHistory()` is then called to retrieve the previous state, then loaded into the model using `Model#setZooKeepBook(ReadOnlyZooKeepBook)`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "![UndoState3](images/UndoState3.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `HistoryStack` only contains a single state, then there is no previous state to restore. The `undo` command uses `HistoryStack#getHistorySize()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "The following 2 activity diagrams summarize what happens when a user executes a new command and when a user executes the undo command:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "New command | Undo command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ":-------------------------:|:-------------------------:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "![ExecuteCommandActivityDiagram](images/ExecuteCommandActivityDiagram.png) | ![UndoCommandActivityDiagram](images/UndoCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "##### Aspect: How undo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire ZooKeep book as a state."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Pros: Easy to implement, works with all commands immediately."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage as product scales."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "### Redo feature (by Jun Cheng)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "The Redo feature was added as a complement to the Undo feature which was done earlier. The addition of this"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "feature required the integration of the `RedoCommand` class, which extends from the `Command` class like all other commands."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "The `HistoryStack` class also has new key features to support the `redo` command:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* `HistoryStack#addToRedo(ReadOnlyZooKeepBook)` - Adds a given state of the ZooKeep book into the redo stack."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* `HistoryStack#removeRecentRedo()` - Removes the most \u0027recent\u0027 update of the ZooKeep book from the redo stack."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* `HistoryStack#viewRecentRedo()` - Returns (but does not remove) the most \u0027recent\u0027 update of the ZooKeep book."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* `HistoryStack#clearRedo()` - Clears the future updates of the ZooKeep book stored in the redo stack."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "The `RedoCommand` class references some of these methods to accomplish the feature required. Given below is an example"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "usage scenario and how the redo mechanism behaves at each step."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Step 1. The user launches the application for the first time. The ZooKeep book is initialised with the initial state"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "given in `data/zookeepbook.json`, and the `HistoryStack` consists of 2 stacks; the history stack and the redo stack,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "each in their respective initial states."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "![RedoState0](images/RedoState0.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Step 2. The user executes `add n/Harambe...` to add a new animal into the ZooKeep book. The `LogicManager` calls"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "`Model#getZooKeepBook()` to retrieve the new state of the book and calls `HistoryStack#addToHistory(ReadOnlyZooKeepBook)`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "as per normal undo protocol."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "![RedoState1](images/RedoState1.png)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Step 3. The user then executes `delete 567` which deletes the animal in the book with an ID of 567. Similar to step 2, "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "`LogicManager` will call `Model#getZooKeepBook()` to retrieve the new state of the book and then calls "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "`HistoryStack#addToHistory(ReadOnlyZooKeepBook)` to store this state into the history stack."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "![RedoState2](images/RedoState2.png)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Step 4. Now the user thinks that deleting that animal was a mistake and restores the previous state by "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "executing `undo` (explained in the previous section). However, before the current state is deleted and replaced with "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "the previous one, `HistoryStack#addToRedo(ReadOnlyZooKeepBook)` is called to store the current state into the redo "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "stack for further use."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "![RedoState3](images/RedoState3.png)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If `UndoCommand` is never executed, the "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "redo stack will remain empty and calling `RedoCommand` will do nothing, since there are no future states recorded in"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "the stack for retrieval. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Step 5. However, now the user decides that deleting that animal was the correct decision after all, and now executes "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "`redo` which calls `HistoryStack#viewRecentRedo()` to retrieve the future state of the ZooKeep book where the animal"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "was deleted. The future state is then loaded into the model using `Model#setZooKeepBook(ReadOnlyZooKeepBook)`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Lastly, `HistoryStack#removeRecentRedo()` is called to delete that state from redo stack. "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "![RedoState4](images/RedoState4.png)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If commands which alter the state of the "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "ZooKeep book (e.g. add or delete) are executed after an undo command, the redo stack will be emptied since the "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "immediate future has been altered and the future states previously stored in the redo stack are now invalid. Hence "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "executing redo now will do nothing."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "The following sequence diagram illustrates how the `Redo` operation is performed:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "![RedoSequenceDiagram](images/RedoSequenceDiagram.png)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `RedoCommand` should end "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "The following 2 activity diagrams summarise what happens when a user executes the `undo` and `redo` commands:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Undo command | Redo command"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ":-------------------------:|:-------------------------:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "![UndoCommandWithRedoActivityDiagram](images/UndoCommandWithRedoActivityDiagram.png) | ![RedoCommandActivityDiagram](images/RedoCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "##### Aspect: How redo executes"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire ZooKeep book as a state."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "  * Pros: Easy to implement, works with all commands immediately."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage as product scales."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* **Alternative 2:** Individual command knows how to redo by"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "### Snapshot feature (by Aizat)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "The snapshot feature is implemented by the `SnapCommand` and `SnapCommandParser` classes. "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "`SnapCommandParser` parses the user\u0027s input as a file name and then creates a `SnapCommand` "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "object with a `Path` object representing the save destination and file name as parameters."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "`SnapCommand` executes by copying the current state of the zookeep book and then utilising"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "`StorageManager`\u0027s save method to save the copied zookeep book with the user specified file name."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "The following sequence diagram illustrates the creation and execution of a `SnapCommand`:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "![SnapCommandSequenceDiagram](images/SnapCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ":information_source: **Note:** The lifelines for `SnapCommandParser`, `SnapCommand`, `StorageManager` "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "#### Design considerations:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "##### Aspect: Overwriting files"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* We chose to prevent users from creating a snapshot if the specified file name already exists"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "as overwriting a file is irreversible and would be disastrous for zookeepers if done unintentionally"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "### Sort feature (by Malcolm)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "This section explains the implementation of the Sort command feature in the ZooKeepBook. This feature is used to sort the animals based on the different categories: **name, id or feedtime**."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* For the animal name, it will be in alphabetical order."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* For the animal id, it will be in increasing order."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* For the animal feed time, it will be from earliest to latest. "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "The following sequence diagram shows the Logic and Model Components when a sort command is being executed:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "![SortSequenceDiagram](images/SortSequenceDiagram.png)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source:  **Note:** The lifeline for `SortCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "In the **Logic** Component,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "After the user keys in \"sort name\" as input, these key methods are called:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* `LogicManager#execute(\"sort name\")`: The `LogicManager` takes in a command text string (\"sort name/id/feedtime\")."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* `ZooKeepBookParser#parseCommand(\"sort name\")`: The `ZooKeepBookParser` parses the user input into a command word (\"sort\") and arguments (\"name\"). Using the command word, a `SortCommandParser` is created. "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* `SortCommandParser#parse(\"name\")`: The `SortCommandParser` takes in the argument(\"name\") and parses it. An `AnimalComparator` is created and contains the specific static comparator required to sort the animals according to the category provided. A `SortCommand` is created with the `AnimalComparator` as an attribute."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\t* The `AnimalComparator` contains 3 different static comparators to be used for sorting: `ANIMAL_NAME_COMPARATOR`,  `ANIMAL_ID_COMPARATOR` and `ANIMAL_FEEDTIME_COMPARATOR`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\t* In this case, the `ANIMAL_NAME_COMPARATOR` is taken."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* `SortCommand#execute(model)`: The `SortCommand` uses the `AnimalComparator` to sort the animals and returns a `CommandResult` object which represents the result of a command execution. "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "In the **Model** Component,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "The in-memory model of the ZooKeepBook data sorts and updates the animal list. The following key methods are used: "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* `Model#sortAnimals(animalComparator)`: sorts the animals in the `ZooKeepBook` using the given `AnimalComparator` object."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* `ZooKeepBook#sortAnimals(animalComparator)` : Retrieves the static comparator in the `AnimalComparator` object and creates a `SortedList` object. The `UniqueAnimalList` in the `ZooKeepBook` is then replaced by this `SortedList` object."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* `ZooKeepBook#updateFilteredAnimalList(predicate)`: Updates the filter of the filtered animal list to filter by the given predicate, which will be true here so that the sorted list will be displayed once sorted."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "Upon the completion of the user command, a success message (Sorted all animals by name) and the updated sorted list is displayed below the message."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "The following activity diagram summarises what happens when a user executes a sort command."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "![SortCommandActivityDiagram](images/SortCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "#### Design Consideration  "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "##### Aspect: Sorting based on different categories  "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "We chose to allow the user to sort not only based on animal names but also by their id and feedtime to ease the convenience of the user when he needs data to be sorted in other ways."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "koonweee"
        },
        "content": "### Feeding times feature (by Jeremy)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "koonweee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "koonweee"
        },
        "content": "The feeding time feature utilizes a TreeSet with a custom comparator."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Each Animal object has a `FeedTimes` TreeSet."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "koonweee"
        },
        "content": "The custom comparator `FeedTimeComparator` compares the integer values of the feeding times, returning them in ascending order."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "koonweee"
        },
        "content": "The feeding times feature allows for the following functionality:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* Add multiple feeding times to each animal listing."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* Ensure feeding times are always displayed in chronological order."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "koonweee"
        },
        "content": "The following notable methods are used for the feeding times feature:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* `ParserUtil#parseFeedTimes(Collection\u003cString\u003e)` - returns a Set of `FeedTime` objects from user input"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* `FeedTime#isValidFeedTime(String)` - validates the feeding time to ensure it is in the HHmm format"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "koonweee"
        },
        "content": "The parsing and displaying of feeding times were adapted from the Medical Condition field."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Given below is a sequence diagram shows how the operation of adding feeding times works."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "koonweee"
        },
        "content": "![FeedTimesSequenceDiagram](images/FeedTimesSequenceDiagram.png)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Step 1. The user inputs an add command, specifying feeding times to be added for an Animal (eg. add n/Pikachu i/1307 s/Pokemon f/1234 f/0001 f/2200)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Step 2. The `ZooKeepBook` class receives the user input. `AddCommand.COMMAND_WORD` is used to identify the type of command."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Step 3. The `AddCommandParser` class receives the arguments in the user input. The `ArgumentTokenizer` class is called with the `PREFIX_FEED_TIME` variable."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Step 4. The `ArgumentTokenizer` class returns the feeding times found in the users input. A set of `FeedTime` objects is created by the `parseFeedTimes` method in the `ParserUtil` class."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** A ParseException is thrown by parseFeedTimes if the feeding time input does not match the defined format."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The TreeSet created by parseFeedTimes utilizes the FeedTimeComparator, ensuring that the set is returned in chronological order."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Step 5. An `Animal` object is created with the Set of `FeedTime` objects."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "koonweee"
        },
        "content": "The following activity diagram summarizes what happens when feeding times are added to an Animal:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "koonweee"
        },
        "content": "![FeedTimesActivityDiagram](images/FeedTimesActivityDiagram.png)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "koonweee"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "koonweee"
        },
        "content": "##### Aspect: How chronological order is maintained"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Alternative 1 (current choice):** Store the feeding times in chronological order"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Pros: Quick to display when retrieving information"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Cons: Initial creation and storage of feeding times takes longer"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Alternative 2:** Sort the feeding times when information is retrieved"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Pros: Quick during the initial creation of Animal objects"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Cons: Additional processing time required when displaying each Animal object"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* Has a need to manage a significant number of animals"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* Zookeepers have to account for a large number of animals and their statuses (health, feeding times etc)."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* It is easy to lose track without a structured database."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* We have thus decided to morph the app into a tracker for an individual zookeeper."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* Easier to transfer a large amount of animal information when zookeepers change shifts."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* Manage animals faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a â€¦â€‹                                    | I want to â€¦â€‹                     | So that I canâ€¦â€‹                                                        |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* * *`  | new zookeeper                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* * *`  | zookeeper                                       | add an animal entry               | keep track of a new animal under my care                                                                        |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* * *`  | zookeeper                                       | delete an animal entry                | remove animals from my care                                   |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* * *`  | zookeeper                                       | retrieve the information of all the animals          | have a look at which animals are under my duty |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* * *`  | zookeeper                                       | load a save file          | keep track of all the animals I have added |"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* * *`  | zookeeper                                       | save all the information when I need to          |  |"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* * *`  | zookeeper                                       | exit the program after I have finished using it        |  |"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* *`    | zookeeper                                       | search for a specific animal   | filter through the large number of animals without viewing the entire list                |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `* *`    | zookeeper                                       | quickly edit the data of certain animals   | avoid deleting and adding the animal to do so              |"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `*`      | zookeeper with many animals in the address book | sort animals by name and type           | locate a specific animal easily                                                 |"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "| `*`      | experienced user | use shortcut commands to carry out tasks           | save time without needing to type the full length commands                                                 |"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "(For all use cases below, the **System** is the `ZooKeepBook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Use case: Add an animal**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "1. User specifies the add command with name, ID and species of animal"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "2. ZooKeepBook adds the animal"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "3. ZooKeepBook shows the new animal added"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "4. ZooKeepBook refreshes to show the updated list"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "koonweee"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* 1a. The command is incorrectly formatted"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 1a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case resumes at step 1"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* 2a. The given ID is already taken"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 2a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case resumes at step 1"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Use case: Delete an animal**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "koonweee"
        },
        "content": "1. User specifies the delete command with ID of animal"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "2. ZooKeepBook deletes the animal"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "3. ZooKeepBook shows the deleted animal"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "4. ZooKeepBook refreshes to show the updated list"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "koonweee"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* 1a. The command is incorrectly formatted"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 1a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case resumes at step 1"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* 2a. The given ID does not exist"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 2a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case resumes at step 1"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Use case: List all animals**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "koonweee"
        },
        "content": "1. User specifies the list command"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "2. ZooKeepBook displays list of all existing animals"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "koonweee"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Use case: Exit program**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "koonweee"
        },
        "content": "1. User specifies the exit command"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "2. ZooKeepBook quits"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "koonweee"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Use case: View available commands**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "koonweee"
        },
        "content": "1. User specifies the help command"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "2. ZooKeepBook displays list of all available commands"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "   "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "**Use case: Find animals based on keywords**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "1. User specifies the keywords (case-insensitive) regarding an animal\u0027s name, id, species, medical condition or feed time"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "2. ZooKeepBook searches for all animals with any of the exact keywords"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "3. ZooKeepBook shows the list of animals with any of those keywords"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* 1a. The command is incorrectly formatted"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 1a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case resumes at step 1"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "  "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "**Use case: Sort all animals**"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "1. User specifies the sort command and the specific category (name, id or feedtime)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "2. ZooKeepBook sorts the animals according to the category"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "3. ZooKeepBook shows a success message"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "4. ZooKeepBook refreshes to show the sorted list"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "koonweee"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "* 1a. The command is incorrectly formatted"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 1a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case resumes at step 1"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "**Use case: Undo last command**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "1. User enters undo command."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "2. ZooKeepBook reverts to the state before last command was made."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "3. ZooKeepBook shows a success message"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* 2a. There is no previous state to revert to."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 2a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case ends"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "**Use case: Redo last undo**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "1. User enters redo command."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "2. ZooKeepBook reverts to the state before undo command was made."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "3. ZooKeepBook shows a success message"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "* 2a. There is no previous state to revert to."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * 2a1. ZooKeepBook shows an error message"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  * Use case ends"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "  "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "2.  Should be able to hold up to 1000 animals without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "4.  The system should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "5.  The system is expected to show **data persistence**."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "6.  The system should allow different users to access the same data to allow ease of transfer during shift changes."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "7.  The system should have clear, complete and comprehensive documentation of all available commands and/or features by the end of the project."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "8.  The system should be extensible such that new commands or features can be easily added to it if needed."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "9.  The system should adopt a proper security system to prevent outsiders from accessing sensitive information."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "10. The system should respond to user requests (e.g. load data, add new animals) within 2 seconds, unless an error occurs."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "11. The system should be intuitive enough such that new staff are able to adapt quickly and use the app smoothly within a short time frame."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "12. The system should be user-friendly and implement helpful features to assist forgetful or careless users, such as daily reminders and warnings."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "13. The system should be backward compatible with data produced by its earlier versions."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "14. The system should be flexible and allow its users some degree of freedom and customisation, such as personalisation of commands and animal display UI."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "15. The project is expected to adhere to the schedule of the CS2103/CS2103T tP timeline which requires weekly deliverables and increments."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "16. The project is not required to sort and arrange tasks among all staff or ensure efficient task allocation and completion."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "* **Data persistence**: data provided by the user can be saved and updated to the hard drive, and can also be loaded once system is booted up again"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "*{More to be added, if necessary}*"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      }
    ],
    "authorContributionMap": {
      "koonweee": 113,
      "JunCheng98": 92,
      "m0nggh": 107,
      "aizatazhar": 51,
      "-": 296,
      "lamlaaaam": 91
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "1. Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeep is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ZooKeep can get your management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "1. Download the latest `ZooKeep.jar` from [here](https://github.com/AY2021S1-CS2103T-W15-4/tp/releases)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "1. Copy `ZooKeep.jar` to the folder you want to use as the _home folder_ for the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "1. Type the command in the command box and press Enter to execute it, e.g. typing **`help`** and pressing Enter will open the help window."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "   \u003cbr\u003e Here are some example commands you can try:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "   * **`list`** : Lists all animals."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Hershey`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  e.g `n/NAME [m/MEDICAL CONDITION]` can be used as `n/Hershey m/Healthy` or as `n/Hershey`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `â€¦`â€‹ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  e.g. `[f/FEEDING TIME]â€¦â€‹` can be used as ` ` (i.e. 0 times), `f/0600`, `f/0600 f/1800` etc."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  e.g. if the command specifies `n/NAME s/SPECIES i/ID`, `n/NAME i/ID s/SPECIES` is also acceptable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "### Adding an animal: `add`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Adds an animal under the care of the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Format: `add n/NAME s/SPECIES i/ID [m/MEDICAL CONDITION]â€¦ [f/FEEDING TIME]â€¦â€‹`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "An animal can have any number of medical conditions and feeding times (including 0)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* `add n/Hershey s/Rufous Hummingbird i/193`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* `add n/Lonesome George s/Galapagos Tortoise i/117 m/Healthy f/1200`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "### Listing all animals : `list`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Lists all animals under the care of the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koonweee"
        },
        "content": "### Sorting animals: `sort`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Sorts the animals by the given field in lexicographical order."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Format: `sort fieldname`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Example: `sort name` sorts all animals by name in alphabetical order."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koonweee"
        },
        "content": "---"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koonweee"
        },
        "content": "### Replacing an animal\u0027s fields: `replace`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Replaces the information in the fields of the animal with the specified `ID`. `ID` refers to the id number shown in the displayed animal list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Format: `replace ID [n/NAME] [s/SPECIES] [i/ID] [m/MEDICAL CONDITION]â€¦ [f/FEEDING TIME]â€¦â€‹`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koonweee"
        },
        "content": "An animal can have any number of medical conditions and feeding times (including 0)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* `replace 1307 i/2910` replaces the ID of animal 1307 with 2910."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* `replace 1307 i/2910 n/Jirachi` replaces the ID of animal 1307 with 2910 and the name with \"Jirachi\"."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koonweee"
        },
        "content": "---"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koonweee"
        },
        "content": "### Appending information to an animal\u0027s fields: `append`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Appends information to the fields of the animal with the specified `ID`. `ID` refers to the id number shown in the displayed animal list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Format: `append ID [m/MEDICAL CONDITION]â€¦ [f/FEEDING TIME]â€¦â€‹`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koonweee"
        },
        "content": "An animal can have any number of medical conditions and feeding times (including 0)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* `append 1307 f/1900` appends a feeding time of 1900 to the animal identified by ID 1307.."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* `append 1307 m/Healthy` append a medical condition \"Healthy\" to the animal identified by ID 1307."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koonweee"
        },
        "content": "---"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "### Deleting an animal: `delete`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Deletes the animal with the specified `ID`. `ID` refers to the id number shown in the displayed animal list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Format: `delete ID`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* `delete 193` deletes the individual animal with id 193."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Clears all entries from the app."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "koonweee"
        },
        "content": "### Undoing a command: `undo`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Undoes the most recently used command. No changes if no previous state exists."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "koonweee"
        },
        "content": "---"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "koonweee"
        },
        "content": "### Redoing an undo: `redo`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Redoes the previous undo. No changes if no previous state exists."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "### Saving a snapshot of animal data: `snap`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Creates a snapshot of the current zookeep book data, saved as a file with the user specified file name"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "**:information_source: Constraints:**\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* File name can only contain alphanumeric characters, hyphens `-` and underscores `_`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* File name must be at least 1 character long and at most 100 characters long"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* File name must not already exist in the data folder"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Format: `snap FILE_NAME`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* `snap zookeepbook_19-10-2020` saves the current state of the zookeep book data as a file named "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "`zookeepbook_19-10-2020.json`, located in the data folder."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "---"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "#### Manually saving data"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Animal data is saved in the hard disk with the preferred file name automatically after any command that changes the data. "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "By default, the preferred file name is `zookeepbook.json`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "There is no need to save manually, though a copy of the current data can be created with the `snap` command. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ZooKeep home folder."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Add** | `add n/NAME s/SPECIES i/ID [m/MEDICAL CONDITION]â€¦â€‹[f/FEEDING TIME]â€¦` \u003cbr\u003e e.g. `add n/Lonesome George s/Galapagos Tortoise i/117 m/Healthy f/1200`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Sort** | `sort fieldname` \u003cbr\u003e e.g. `sort name` "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Replace** | `replace ID [n/NAME] [s/SPECIES] [i/ID] [m/MEDICAL CONDITION]â€¦ [f/FEEDING TIME]â€¦` "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Append** | `append ID [m/MEDICAL CONDITION]â€¦ [f/FEEDING TIME]â€¦`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Delete** | `delete ID` \u003cbr\u003e e.g. `delete 193` "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Undo** | `undo`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Redo** | `redo`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "**Snap** | `snap FILE_NAME` \u003cbr\u003e e.g. `snap zookeepbook_19-10-2020`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "koonweee"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "koonweee": 48,
      "aizatazhar": 64,
      "-": 106,
      "lamlaaaam": 1
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 123\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 123\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteAnimal(animal)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveZooKeepBook(zooKeepBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 4,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/ExecuteCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "if () then ([command changes state of book])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    :Push new state onto HistoryStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "lamlaaaam": 2
    }
  },
  {
    "path": "docs/diagrams/FeedTimesActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koonweee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koonweee"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koonweee"
        },
        "content": ":User executes add command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koonweee"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koonweee"
        },
        "content": "if () then ([f/ argument(s) specified])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    :ArgumentTokenizer parses feeding times and other fields;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    :ParserUtil creates TreeSet\u003cFeedTime\u003e with comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    :ArgumentTokenizer parses other fields;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koonweee"
        },
        "content": ":Animal object is created with parsed fields;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koonweee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "koonweee": 16
    }
  },
  {
    "path": "docs/diagrams/FeedTimesSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koonweee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koonweee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koonweee"
        },
        "content": "participant \":ZooKeepBookParser\" as ZooKeepBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koonweee"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e:ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koonweee"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e:ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "participant \"addCommand:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": "[-\u003e LogicManager : execute(\"add ... f/1234 f/0001\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koonweee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koonweee"
        },
        "content": "LogicManager -\u003e ZooKeepBookParser : parseCommand(userInput)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koonweee"
        },
        "content": "activate ZooKeepBookParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koonweee"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koonweee"
        },
        "content": "ZooKeepBookParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koonweee"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koonweee"
        },
        "content": "AddCommandParser --\u003e ZooKeepBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koonweee"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koonweee"
        },
        "content": "ZooKeepBookParser -\u003e AddCommandParser : parse(\"... f/1234 f/0001\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koonweee"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koonweee"
        },
        "content": "create ArgumentTokenizer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": "AddCommandParser -\u003e ArgumentTokenizer : tokenize(args, PREFIX ...)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koonweee"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koonweee"
        },
        "content": "ArgumentTokenizer --\u003e AddCommandParser : argMultiMap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koonweee"
        },
        "content": "create ParserUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koonweee"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseFeedTimes(feedTimes)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koonweee"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": "ParserUtil --\u003e AddCommandParser : feedTimeSet"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koonweee"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koonweee"
        },
        "content": "AddCommandParser --\u003e ZooKeepBookParser : addCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koonweee"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "ZooKeepBookParser --\u003e LogicManager : addCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": "deactivate ZooKeepBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koonweee"
        },
        "content": "LogicManager -\u003e AddCommand : execute(model)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koonweee"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koonweee"
        },
        "content": "AddCommand -\u003e] : addAnimal(toAdd)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koonweee"
        },
        "content": "AddCommand  \u003c--] : commandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koonweee"
        },
        "content": "AddCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koonweee"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koonweee"
        },
        "content": "destroy AddCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koonweee"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koonweee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koonweee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "koonweee": 62
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Class ZooKeepBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "LogicManager --\u003e\"1\" ZooKeepBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeepBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/RedoCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ":User executes redo command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "if () then ([exists at least one future state])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    :Retrieve future state from redo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    :Set ZooKeepBook to future state;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    :Remove this future state from redo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    :Return error message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    (redo unsuccessful);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 17
    }
  },
  {
    "path": "docs/diagrams/RedoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "participant \":ZooKeepBookParser\" as ZooKeepBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "participant \"u:RedoCommand\" as RedoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "participant \":HistoryStack\" as HistoryStack MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "participant \":ZooKeepBook\" as ZooKeepBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "[-\u003e LogicManager : execute(\"redo\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "LogicManager -\u003e ZooKeepBookParser : parseCommand(\"redo\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate ZooKeepBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "create RedoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "ZooKeepBookParser -\u003e RedoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate RedoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "RedoCommand --\u003e ZooKeepBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate RedoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "ZooKeepBookParser --\u003e LogicManager : redoCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate ZooKeepBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "LogicManager -\u003e RedoCommand : execute(model)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate RedoCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "RedoCommand -\u003e HistoryStack : viewRecentRedo()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate HistoryStack"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "HistoryStack -\u003e RedoCommand : lastState"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate HistoryStack"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "RedoCommand -\u003e Model : setZooKeepBook(lastState)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Model -\u003e ZooKeepBook : resetData(lastState)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate ZooKeepBook"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "ZooKeepBook -\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate ZooKeepBook"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Model -\u003e RedoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "RedoCommand -\u003e HistoryStack : removeRecentRedo()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "activate HistoryStack"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "HistoryStack -\u003e RedoCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate HistoryStack"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "RedoCommand -\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate RedoCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "destroy RedoCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 65
    }
  },
  {
    "path": "docs/diagrams/RedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "title Initial HistoryStack"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (History stack)\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (Redo stack)\" {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Pointer -left-\u003e State1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 21
    }
  },
  {
    "path": "docs/diagrams/RedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "title After command \"add n/Harambe...\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (History stack)\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (Redo stack)\" {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Pointer -left-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 21
    }
  },
  {
    "path": "docs/diagrams/RedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "title After command \"delete 567\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (History stack)\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State3 as \"__book2:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (Redo stack)\" {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Pointer -left-\u003e State3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 23
    }
  },
  {
    "path": "docs/diagrams/RedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (History stack)\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State3 as \"__book2:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (Redo stack)\" {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State4 as \"__book2:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Hide State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "class Pointer1 as \"Top of stack\" #FFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Pointer -left-\u003e State2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Pointer1 -left-\u003eState4"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 28
    }
  },
  {
    "path": "docs/diagrams/RedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "title After command \"redo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (History stack)\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    class State3 as \"__book2:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package \"States (Redo stack)\" {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "Pointer -left-\u003e State3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 23
    }
  },
  {
    "path": "docs/diagrams/SnapCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "participant \":ZooKeepBookParser\" as ZooKeepBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "participant \":SnapCommandParser\" as SnapCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "participant \"snapCommand:SnapCommand\" as SnapCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "participant \":StorageManager\" as StorageManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[-\u003e LogicManager : execute(\"snap zookeepbook_10-2020\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "LogicManager -\u003e ZooKeepBookParser : parseCommand(\"snap zookeepbook_10-2020\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate ZooKeepBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "create SnapCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeepBookParser -\u003e SnapCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate SnapCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommandParser --\u003e ZooKeepBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "deactivate SnapCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeepBookParser -\u003e SnapCommandParser : parse(\"zookeepbook_10-2020\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate SnapCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "create SnapCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommandParser -\u003e SnapCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate SnapCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommand --\u003e SnapCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "deactivate SnapCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommandParser --\u003e ZooKeepBookParser : snapCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "destroy SnapCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeepBookParser --\u003e LogicManager : snapCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "deactivate ZooKeepBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "LogicManager -\u003e SnapCommand : execute(model)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate SnapCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommand -\u003e Model : getZooKeepBook()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Model --\u003e SnapCommand : readOnlyZooKeepBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "create StorageManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommand -\u003e StorageManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate StorageManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "StorageManager --\u003e SnapCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "deactivate StorageManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommand -\u003e StorageManager : saveZooKeepBook(readOnlyZooKeepBook, savePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "activate StorageManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "StorageManager --\u003e SnapCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "deactivate StorageManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "SnapCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "destroy SnapCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "destroy StorageManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 73
    }
  },
  {
    "path": "docs/diagrams/SortCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ":User executes sort command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "if () then ([Correct sort category is inputted])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    :Sorts animal list in zookeepbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    :Display success message and sorted animal list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    :Return error message to indicate sorting is not successful;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 15
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "participant \":ZooKeepBookParser\" as ZooKeepBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "participant \"sortCommand:SortCommand\" as SortCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "participant \":ZooKeepBook\" as ZooKeepBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "[-\u003e LogicManager : execute(\"sort name\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "LogicManager -\u003e ZooKeepBookParser : parseCommand(\"sort name\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate ZooKeepBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "create SortCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "ZooKeepBookParser -\u003e SortCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "SortCommandParser --\u003e ZooKeepBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "ZooKeepBookParser -\u003e SortCommandParser : parse(\"name\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "create SortCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "SortCommandParser -\u003e SortCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "SortCommand --\u003e SortCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "SortCommandParser --\u003e ZooKeepBookParser : sortCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "ZooKeepBookParser --\u003e LogicManager : sortCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate ZooKeepBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "LogicManager -\u003e SortCommand : execute(model)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "SortCommand -\u003e Model : sortAnimals(animalComparator)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "Model -\u003e ZooKeepBook : sortAnimals(animalComparator)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate ZooKeepBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "Model -\u003e Model : updateFilteredAnimalList(predicate)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "Model --\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "ZooKeepBook --\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate ZooKeepBook"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "SortCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "destroy SortCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 74
    }
  },
  {
    "path": "docs/diagrams/UndoCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ":User executes undo command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "if () then ([exists at least one previous state])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    :Retrieve current state from history;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    :Add current state to redo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    :Remove current state from history;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    :Set ZooKeepBook to most"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    recent state (previous state);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    :Return error message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    (undo unsuccessful);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 2,
      "lamlaaaam": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "participant \":ZooKeepBookParser\" as ZooKeepBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "participant \":HistoryStack\" as HistoryStack MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "participant \":ZooKeepBook\" as ZooKeepBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "[-\u003e LogicManager : execute(\"undo\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "LogicManager -\u003e ZooKeepBookParser : parseCommand(\"undo\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "activate ZooKeepBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "ZooKeepBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "UndoCommand --\u003e ZooKeepBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "ZooKeepBookParser --\u003e LogicManager : undoCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "deactivate ZooKeepBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "LogicManager -\u003e UndoCommand : execute(model)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "UndoCommand -\u003e HistoryStack : removeRecentHistory()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "activate HistoryStack"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "HistoryStack -\u003e UndoCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "deactivate HistoryStack"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "UndoCommand -\u003e HistoryStack : viewRecentHistory()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "activate HistoryStack"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "HistoryStack -\u003e UndoCommand : lastState"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "deactivate HistoryStack"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "UndoCommand -\u003e Model : setZooKeepBook(lastState)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Model -\u003e ZooKeepBook : resetData(lastState)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "activate ZooKeepBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "ZooKeepBook -\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "deactivate ZooKeepBook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Model -\u003e UndoCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "UndoCommand -\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "lamlaaaam": 31
    }
  },
  {
    "path": "docs/diagrams/UndoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "title Initial HistoryStack"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Pointer -left-\u003e State1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 17
    }
  },
  {
    "path": "docs/diagrams/UndoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "title After command \"delete 1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Pointer -left-\u003e State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 18
    }
  },
  {
    "path": "docs/diagrams/UndoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "title After command \"help\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Pointer -left-\u003e State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 18
    }
  },
  {
    "path": "docs/diagrams/UndoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State1 as \"__book0:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class State2 as \"__book1:ReadOnlyZooKeepBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "class Pointer as \"Top of stack\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Pointer -left-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koonweee"
        },
        "content": "title: ZooKeep"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koonweee"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W15-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W15-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W15-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W15-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "[![Codacy Badge](https://app.codacy.com/project/badge/Grade/0f70aafdfeb84814a92b76d5182cc82a)](https://www.codacy.com/gh/AY2021S1-CS2103T-W15-4/tp/dashboard?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY2021S1-CS2103T-W15-4/tp\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **ZooKeep** is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ZooKeep can get your management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Adding a new animal under your care."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Viewing the list of animals under your care."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Removing a specific animal."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* For the detailed documentation of this project, see the **[ZooKeep Product Website](https://ay2021s1-cs2103t-w15-4.github.io/tp/)**."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "koonweee": 9,
      "aizatazhar": 2,
      "-": 10
    }
  },
  {
    "path": "docs/team/JunCheng98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "## Project: ZooKeep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeep is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI), created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 2,
      "-": 44
    }
  },
  {
    "path": "docs/team/aizatazhar.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "title: Aizat\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "## Project: ZooKeep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeep is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI), created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003c!-- "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  TODO: Update links for pull requests "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003daizatazhar\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003daizatazhar\u0026zR\u003dAY2021S1-CS2103T-W15-4%2Ftp%5Bmaster%5D\u0026zACS\u003d74.66666666666667\u0026zS\u003d2020-08-14\u0026zFS\u003daizat\u0026zU\u003d2020-10-04\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Morphed Address class to Species class ([\\#60]())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "      * Added documentation for all our proposed features for milestone 1.2 ([\\#26](), [\\#32]())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Integrated Codecov to the team repo to monitor code coverage ([\\#45]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Integrated Codacy to the team repo to enforce code quality ([\\#56]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Created issues detailing the high-level tasks for milestone 1.2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/219), [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/245))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Reported typos found on various parts of module website (examples: [1](https://github.com/se-edu/se-book/issues/94), [2](https://github.com/se-edu/guides/pull/1), [3](https://github.com/nus-cs2103-AY2021S1/website/issues/6), [4](https://github.com/se-edu/addressbook-level3/issues/52))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Reported broken link on module website ([1](https://github.com/nus-cs2103-AY2021S1/website/issues/7))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003c!--- Templates/Suggestions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 75
    }
  },
  {
    "path": "docs/team/koonweee.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koonweee"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koonweee"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koonweee"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "## Project: ZooKeep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeep is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI), created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koonweee"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "koonweee": 44,
      "aizatazhar": 2
    }
  },
  {
    "path": "docs/team/lamlaaaam.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "## Project: ZooKeep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeep is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI), created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 46
    }
  },
  {
    "path": "docs/team/m0nggh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "## Project: ZooKeep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "ZooKeep is a desktop app for managing animals under a zookeeperâ€™s care, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI), created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 2,
      "-": 44
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new commandâ€‰â€”â€‰`remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Weâ€™ll assume that you have already set up the development environment as outlined in the Developerâ€™s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, letâ€™s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Letâ€™s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, letâ€™s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now letâ€™s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Letâ€™s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now letâ€™s find out what we need to do in order to obtain the Index and String that we need. Letâ€™s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the userâ€™s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Donâ€™t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, letâ€™s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the personâ€™s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "Create a new `Remark` in `seedu.address.model.animal`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, letâ€™s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, donâ€™t worryâ€‰â€”â€‰we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Thatâ€™s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external libraryâ€‰â€”â€‰Jackson. Letâ€™s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "koonweee"
        },
        "content": ":exclamation: You must delete ZooKeepâ€™s storage file located at `/data/zookeeplist.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regressionâ€‰â€”â€‰we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs donâ€™t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, letâ€™s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "-": 392,
      "lamlaaaam": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e â€”  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, weâ€™ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Letâ€™s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.animal.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. Whatâ€™s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.JsonZooKeepBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.ZooKeepBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ZooKeepBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBookStorage zooKeepBookStorage \u003d new JsonZooKeepBookStorage(userPrefs.getZooKeepBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        storage \u003d new StorageManager(zooKeepBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s zookeep book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * The data from the sample zookeep book will be used instead if {@code storage}\u0027s zookeep book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * or an empty zookeep book will be used instead if errors occur when reading {@code storage}\u0027s zookeep book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Optional\u003cReadOnlyZooKeepBook\u003e zooKeepBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ReadOnlyZooKeepBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            zooKeepBookOptional \u003d storage.readZooKeepBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            if (!zooKeepBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ZooKeepBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            initialData \u003d zooKeepBookOptional.orElseGet(SampleDataUtil::getSampleZooKeepBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ZooKeepBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            initialData \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ZooKeepBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            initialData \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ZooKeepBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        logger.info(\"Starting ZooKeepBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ZooKeep Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 23,
      "-": 159,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final String LOG_FILE \u003d \"zookeepbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String MESSAGE_INVALID_ANIMAL_DISPLAYED_ID \u003d \"The animal ID provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_ANIMALS_LISTED_OVERVIEW \u003d \"%1$d animals listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "-": 11,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Returns the ZooKeepBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @see seedu.address.model.Model#getZooKeepBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    ReadOnlyZooKeepBook getZooKeepBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of animals */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    ObservableList\u003cAnimal\u003e getFilteredAnimalList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Returns the user prefs\u0027 zookeep book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Path getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 6,
      "-": 41,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.logic.parser.ZooKeepBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.HistoryStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private final ZooKeepBookParser zooKeepBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final HistoryStack historyStack;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBookParser \u003d new ZooKeepBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(new ZooKeepBook(model.getZooKeepBook()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ReadOnlyZooKeepBook currentRedo \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (historyStack.getRedoSize() \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            currentRedo \u003d historyStack.viewRecentRedo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Command command \u003d zooKeepBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ReadOnlyZooKeepBook book \u003d model.getZooKeepBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(new ZooKeepBook(book));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        logger.info(\"--------------- ADDED CHANGE TO HISTORY STACK\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        logger.info(historyStack.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (!commandText.equals(\"undo\") \u0026\u0026 (historyStack.getRedoSize() \u003e 0)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            historyStack.checkEdit(currentRedo, book); // clear redo stack if a new edit has been made"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            storage.saveZooKeepBook(book);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return model.getZooKeepBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public ObservableList\u003cAnimal\u003e getFilteredAnimalList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return model.getFilteredAnimalList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return model.getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 9,
      "aizatazhar": 9,
      "-": 68,
      "lamlaaaam": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEED_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Adds an animal to the zookeep book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an animal to the zookeep book.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            + PREFIX_ID + \"ID \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            + PREFIX_SPECIES + \"SPECIES \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + \"[\" + PREFIX_MEDICAL_CONDITION + \"MEDICAL CONDITION] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + \"[\" + PREFIX_FEED_TIME + \"FEEDING TIME]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + PREFIX_NAME + \"Thomas \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + PREFIX_ID + \"0000237 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + PREFIX_SPECIES + \"Parrot \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + PREFIX_MEDICAL_CONDITION + \"Psittacosis \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + PREFIX_FEED_TIME + \"1400 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New animal added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANIMAL \u003d \"An animal with this ID already exists\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final Animal toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Animal}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AddCommand(Animal animal) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(animal);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        toAdd \u003d animal;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (model.hasAnimal(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ANIMAL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.addAnimal(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "JunCheng98": 2,
      "aizatazhar": 3,
      "-": 41,
      "lamlaaaam": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Clears the zookeep book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Zookeep book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        model.setZooKeepBook(new ZooKeepBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Deletes an animal identified using it\u0027s displayed index from the zookeep book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            + \": Deletes the animal identified by the ID in the displayed animal list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            + \"Parameters: ID (must be a positive integer \u003e 3 digits)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 123\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_DELETE_ANIMAL_SUCCESS \u003d \"Deleted Animal: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private final Id targetID;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public DeleteCommand(Id targetID) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        this.targetID \u003d targetID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        List\u003cAnimal\u003e lastShownList \u003d model.getFilteredAnimalList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal animalToDelete \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (Animal animal : lastShownList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (animal.getId().equals(targetID)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                animalToDelete \u003d animal;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        if (animalToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ANIMAL_DISPLAYED_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.deleteAnimal(animalToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ANIMAL_SUCCESS, animalToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                \u0026\u0026 targetID.equals(((DeleteCommand) other).targetID)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 12,
      "m0nggh": 5,
      "-": 35,
      "lamlaaaam": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ANIMALS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTimeComparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Edits the details of an existing animal in the zookeep book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the animal identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + \"by the index number used in the displayed animal list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            + \"[\" + PREFIX_ID + \"ID] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            + \"[\" + PREFIX_SPECIES + \"SPECIES] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + \"[\" + PREFIX_MEDICAL_CONDITION + \"MEDICAL_CONDITION]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + PREFIX_ID + \"91234567 \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_EDIT_ANIMAL_SUCCESS \u003d \"Edited Animal: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANIMAL \u003d \"This animal already exists in the zookeep book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final EditAnimalDescriptor editAnimalDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param index of the animal in the filtered animal list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param editAnimalDescriptor details to edit the animal with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditCommand(Index index, EditAnimalDescriptor editAnimalDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(editAnimalDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.editAnimalDescriptor \u003d new EditAnimalDescriptor(editAnimalDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        List\u003cAnimal\u003e lastShownList \u003d model.getFilteredAnimalList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ANIMAL_DISPLAYED_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal animalToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal editedAnimal \u003d createEditedAnimal(animalToEdit, editAnimalDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!animalToEdit.isSameAnimal(editedAnimal) \u0026\u0026 model.hasAnimal(editedAnimal)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ANIMAL);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.setAnimal(animalToEdit, editedAnimal);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.updateFilteredAnimalList(PREDICATE_SHOW_ALL_ANIMALS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ANIMAL_SUCCESS, editedAnimal));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates and returns a {@code Animal} with the details of {@code animalToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * edited with {@code editAnimalDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static Animal createEditedAnimal(Animal animalToEdit, EditAnimalDescriptor editAnimalDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assert animalToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Name updatedName \u003d editAnimalDescriptor.getName().orElse(animalToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Id updatedId \u003d editAnimalDescriptor.getId().orElse(animalToEdit.getId());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Species updatedSpecies \u003d editAnimalDescriptor.getSpecies().orElse(animalToEdit.getSpecies());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Set\u003cMedicalCondition\u003e updatedMedicalConditions \u003d editAnimalDescriptor.getMedicalConditions()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .orElse(animalToEdit.getMedicalConditions());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        Set\u003cFeedTime\u003e updatedFeedTimes \u003d editAnimalDescriptor.getFeedTimes()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .orElse(animalToEdit.getFeedTimes());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return new Animal(updatedName, updatedId, updatedSpecies, updatedMedicalConditions, updatedFeedTimes);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 editAnimalDescriptor.equals(e.editAnimalDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Stores the details to edit the animal with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * corresponding field value of the animal."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static class EditAnimalDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        private Id id;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        private Species species;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        private Set\u003cMedicalCondition\u003e medicalConditions;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        private Set\u003cFeedTime\u003e feedTimes;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public EditAnimalDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "         * A defensive copy of {@code medicalConditions} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public EditAnimalDescriptor(EditAnimalDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            setSpecies(toCopy.species);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            setMedicalConditions(toCopy.medicalConditions);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            setFeedTimes(toCopy.feedTimes);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, id, species, medicalConditions, feedTimes);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void setId(Id id) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public Optional\u003cId\u003e getId() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setSpecies(Species species) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            this.species \u003d species;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public Optional\u003cSpecies\u003e getSpecies() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            return Optional.ofNullable(species);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "         * Sets {@code medicalConditions} to this object\u0027s {@code medicalConditions}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "         * A defensive copy of {@code medicalConditions} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void setMedicalConditions(Set\u003cMedicalCondition\u003e medicalConditions) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            this.medicalConditions \u003d (medicalConditions !\u003d null) ? new HashSet\u003c\u003e(medicalConditions) : null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "         * Returns an unmodifiable medicalCondition set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code medicalConditions} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public Optional\u003cSet\u003cMedicalCondition\u003e\u003e getMedicalConditions() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return (medicalConditions !\u003d null) ? Optional.of(Collections.unmodifiableSet(medicalConditions))"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            if (!(other instanceof EditAnimalDescriptor)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            EditAnimalDescriptor e \u003d (EditAnimalDescriptor) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                    \u0026\u0026 getId().equals(e.getId())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                    \u0026\u0026 getSpecies().equals(e.getSpecies())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                    \u0026\u0026 getMedicalConditions().equals(e.getMedicalConditions());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "koonweee"
        },
        "content": "         * Sets {@code feedTimes} to this object\u0027s {@code feedTimes}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "koonweee"
        },
        "content": "         * A defensive copy of {@code feedTimes} is used internally."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "koonweee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        public void setFeedTimes(Set\u003cFeedTime\u003e feedTimes) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            if (feedTimes !\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                TreeSet\u003cFeedTime\u003e treeFeedTimes \u003d new TreeSet\u003c\u003e(new FeedTimeComparator());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                treeFeedTimes.addAll(feedTimes);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                this.feedTimes \u003d treeFeedTimes;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                this.feedTimes \u003d null;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "koonweee"
        },
        "content": "         * Returns an unmodifiable feedTimes set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "koonweee"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "koonweee"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code feedTimes} is null."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "koonweee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        public Optional\u003cSet\u003cFeedTime\u003e\u003e getFeedTimes() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            return (feedTimes !\u003d null) ? Optional.of(Collections.unmodifiableSet(feedTimes))"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 34,
      "JunCheng98": 9,
      "m0nggh": 1,
      "aizatazhar": 11,
      "-": 135,
      "lamlaaaam": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Zookeep Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Finds and lists all animals in zookeep book whose fields contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all animals whose fields contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ahmeng buttercup coco\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private final AnimalContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public FindCommand(AnimalContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.updateFilteredAnimalList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                String.format(Messages.MESSAGE_ANIMALS_LISTED_OVERVIEW, model.getFilteredAnimalList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 4,
      "m0nggh": 1,
      "aizatazhar": 1,
      "-": 34,
      "lamlaaaam": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ANIMALS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Lists all animals in the zookeep book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all animals\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.updateFilteredAnimalList(PREDICATE_SHOW_ALL_ANIMALS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 20,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.HistoryStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " * Redoes the next action. Only applicable if undo was used before and no edit to the ZooKeepBook was"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " * made in between, otherwise this command will do nothing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo successful\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static final String MESSAGE_NO_REDO \u003d \"Nothing left to redo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private final HistoryStack historyStack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Creates a RedoCommand that redoes the next action"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public RedoCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (historyStack.getRedoSize() \u003c 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new CommandException(MESSAGE_NO_REDO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ReadOnlyZooKeepBook lastState \u003d historyStack.viewRecentRedo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        model.setZooKeepBook(lastState);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.removeRecentRedo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                || (other instanceof RedoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                \u0026\u0026 historyStack.equals(((RedoCommand) other).historyStack));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SnapCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.JsonZooKeepBookStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.ZooKeepBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Saves a snapshot of the current zookeep book with a specified file name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class SnapCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"snap\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            + \": Saves a snapshot of the current ZooKeep Book with the specified file name\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            + \"Parameters: \" + COMMAND_WORD + \" FILE_NAME\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" zookeepbook_19-10-2020\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            \"File name must contain only alphanumeric characters, \\\"_\\\" and \\\"-\\\".\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            + \"File name must not be empty and must be at most 100 characters long.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Current ZooKeep Book saved as %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_WARNING \u003d \"File name %s already exists.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String FILE_FORMAT \u003d \".json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Path savePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Creates a SnapCommand to save the current state of the ZooKeep Book to the specified path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public SnapCommand(Path savePath, String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(savePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.savePath \u003d savePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Path zooKeepBookFilePath \u003d model.getUserPrefs().getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBookStorage zooKeepBookStorage \u003d new JsonZooKeepBookStorage(zooKeepBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(zooKeepBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            Storage storage \u003d new StorageManager(zooKeepBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            ReadOnlyZooKeepBook zooKeepBook \u003d model.getZooKeepBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            assert(zooKeepBook !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            storage.saveZooKeepBook(zooKeepBook, savePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ERROR + ioe, ioe));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fileName + FILE_FORMAT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                || (other instanceof SnapCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                \u0026\u0026 fileName.equals(((SnapCommand) other).fileName));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Sorts all animals in the zookeep book based on the user specified parameter."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \": Sorts the animals according to their name, ID or earliest feed time. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Parameters: case-insensitive CATEGORY (name, id, feedtime) \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all animals by \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private final AnimalComparator animalComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public SortCommand(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.animalComparator \u003d animalComparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String category \u003d animalComparator.getCategory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        model.sortAnimals(animalComparator);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + category);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \u0026\u0026 animalComparator.equals(((SortCommand) other).animalComparator)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.HistoryStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Undoes the most recently performed action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo successful\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_NO_UNDO \u003d \"Nothing left to undo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final HistoryStack historyStack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates an UndoCommand that undoes the last action"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (historyStack.getHistorySize() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new CommandException(MESSAGE_NO_UNDO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // add current state to redo stack before deleting it"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ReadOnlyZooKeepBook currentState \u003d historyStack.viewRecentHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToRedo(new ZooKeepBook(currentState));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.removeRecentHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ReadOnlyZooKeepBook lastState \u003d historyStack.viewRecentHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.setZooKeepBook(lastState);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                || (other instanceof UndoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 historyStack.equals(((UndoCommand) other).historyStack));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 6,
      "lamlaaaam": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEED_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID, PREFIX_SPECIES, PREFIX_MEDICAL_CONDITION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                        PREFIX_FEED_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_SPECIES, PREFIX_ID)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        Id id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Species species \u003d ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Set\u003cMedicalCondition\u003e medicalConditionList \u003d ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .parseMedicalConditions(argMultimap.getAllValues(PREFIX_MEDICAL_CONDITION));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        Set\u003cFeedTime\u003e feedTimeList \u003d ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .parseFeedTimes(argMultimap.getAllValues(PREFIX_FEED_TIME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        Animal animal \u003d new Animal(name, id, species, medicalConditionList, feedTimeList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new AddCommand(animal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 7,
      "JunCheng98": 2,
      "m0nggh": 1,
      "aizatazhar": 2,
      "-": 41,
      "lamlaaaam": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final Prefix PREFIX_SPECIES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_CONDITION \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Prefix PREFIX_FEED_TIME \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "JunCheng98": 1,
      "aizatazhar": 1,
      "-": 11,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            Id id \u003d ParserUtil.parseId(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            return new DeleteCommand(id);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 2,
      "-": 26,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEED_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAnimalDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID, PREFIX_SPECIES, PREFIX_MEDICAL_CONDITION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                        PREFIX_FEED_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditAnimalDescriptor editAnimalDescriptor \u003d new EditAnimalDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            editAnimalDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            editAnimalDescriptor.setId(ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SPECIES).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            editAnimalDescriptor.setSpecies(ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        parseMedicalConditionsForEdit(argMultimap.getAllValues(PREFIX_MEDICAL_CONDITION))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .ifPresent(editAnimalDescriptor::setMedicalConditions);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        parseFeedTimesForEdit(argMultimap.getAllValues(PREFIX_FEED_TIME))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .ifPresent(editAnimalDescriptor::setFeedTimes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!editAnimalDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new EditCommand(index, editAnimalDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e feedTimes} into a {@code Set\u003cFeedTime\u003e}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * if {@code feedTimes} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * If {@code feedTimes} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * {@code Set\u003cFeedTime\u003e} containing zero feedTimes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private Optional\u003cSet\u003cFeedTime\u003e\u003e parseFeedTimesForEdit(Collection\u003cString\u003e feedTimes) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assert feedTimes !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        if (feedTimes.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        Collection\u003cString\u003e feedTimeSet \u003d feedTimes.size() \u003d\u003d 1 \u0026\u0026 feedTimes.contains(\"\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                ? Collections.emptySet() : feedTimes;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return Optional.of(ParserUtil.parseFeedTimes(feedTimeSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e medicalConditions} into a {@code Set\u003cMedicalCondition\u003e}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * if {@code medicalConditions} is non-empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * If {@code medicalConditions} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * {@code Set\u003cMedicalCondition\u003e} containing zero medicalConditions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Optional\u003cSet\u003cMedicalCondition\u003e\u003e parseMedicalConditionsForEdit("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            Collection\u003cString\u003e medicalConditions) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assert medicalConditions !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (medicalConditions.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Collection\u003cString\u003e medicalConditionSet \u003d medicalConditions.size() \u003d\u003d 1 \u0026\u0026 medicalConditions.contains(\"\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                ? Collections.emptySet() : medicalConditions;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return Optional.of(ParserUtil.parseMedicalConditions(medicalConditionSet));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 22,
      "JunCheng98": 2,
      "aizatazhar": 2,
      "-": 57,
      "lamlaaaam": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        String[] fieldKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return new FindCommand(new AnimalContainsKeywordsPredicate(Arrays.asList(fieldKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTimeComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private static final String TRAILING_ZEROES_REGEX \u003d \"^0+(?!$)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Parses a {@code String Id} into a {@code Id}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @throws ParseException if the given {@code Id} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static Id parseId(String id) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        String trimmedId \u003d id.trim().replaceFirst(TRAILING_ZEROES_REGEX, \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (!Id.isValidId(trimmedId)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new ParseException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return new Id(trimmedId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Parses a {@code String species} into a {@code Species}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @throws ParseException if the given {@code species} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static Species parseSpecies(String species) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String trimmedSpecies \u003d species.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (!Species.isValidSpecies(trimmedSpecies)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new ParseException(Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return new Species(trimmedSpecies);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses a {@code String medicalCondition} into a {@code MedicalCondition}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws ParseException if the given {@code medicalCondition} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static MedicalCondition parseMedicalCondition(String medicalCondition) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(medicalCondition);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String trimmedMedicalCondition \u003d medicalCondition.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!MedicalCondition.isValidMedicalConditionName(trimmedMedicalCondition)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new ParseException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new MedicalCondition(trimmedMedicalCondition);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e medicalConditions} into a {@code Set\u003cMedicalCondition\u003e}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Set\u003cMedicalCondition\u003e parseMedicalConditions("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            Collection\u003cString\u003e medicalConditions) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(medicalConditions);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        final Set\u003cMedicalCondition\u003e medicalConditionSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (String medicalConditionName : medicalConditions) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            medicalConditionSet.add(parseMedicalCondition(medicalConditionName));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return medicalConditionSet;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e feedTimes} into a {@code Set\u003cFeedTime\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static Set\u003cFeedTime\u003e parseFeedTimes(Collection\u003cString\u003e feedTimes) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        requireNonNull(feedTimes);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        final Set\u003cFeedTime\u003e feedTimeSet \u003d new TreeSet\u003c\u003e(new FeedTimeComparator());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        for (String feedTimeText : feedTimes) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            feedTimeSet.add(parseFeedTime(feedTimeText));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return feedTimeSet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Parses a {@code String feedTimeText} into a {@code FeedTime}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * @throws ParseException if the given {@code feedTimeText} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static FeedTime parseFeedTime(String feedTimeText) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        requireNonNull(feedTimeText);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        String trimmedFeedTimeText \u003d feedTimeText.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        if (!FeedTime.isValidFeedTime(trimmedFeedTimeText)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            throw new ParseException(FeedTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return new FeedTime(trimmedFeedTimeText);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 27,
      "JunCheng98": 7,
      "aizatazhar": 8,
      "-": 78,
      "lamlaaaam": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SnapCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.logic.commands.SnapCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Parses input arguments and creates a new SnapCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class SnapCommandParser implements Parser\u003cSnapCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9_-]*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SnapCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * and returns a SnapCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public SnapCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String fileName \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Path savePath \u003d Path.of(\"data\", fileName + SnapCommand.FILE_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        int maxFileNameLength \u003d 100;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SnapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        } else if (!fileName.matches(VALIDATION_REGEX) || fileName.length() \u003e maxFileNameLength) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new ParseException(SnapCommand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        } else if (Files.exists(savePath)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new ParseException(String.format(SnapCommand.MESSAGE_WARNING, fileName + SnapCommand.FILE_FORMAT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return new SnapCommand(savePath, fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String NAME_CATEGORY \u003d \"name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String ID_CATEGORY \u003d \"id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String FEEDTIME_CATEGORY \u003d \"feedtime\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_CATEGORY \u003d \"Please key in a proper sort category: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"name, id or feedtime\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String category \u003d args.trim().toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (category.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AnimalComparator animalComparator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assert !category.equals(\"\") : \"Category input cannot be empty!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case NAME_CATEGORY:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            animalComparator \u003d AnimalComparator.createAnimalNameComparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case ID_CATEGORY:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            animalComparator \u003d AnimalComparator.createAnimalIdComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case FEEDTIME_CATEGORY:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            animalComparator \u003d AnimalComparator.createAnimalFeedTimeComparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    String.format(MESSAGE_INVALID_SORT_CATEGORY, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return new SortCommand(animalComparator);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ZooKeepBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.logic.commands.SnapCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class ZooKeepBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        case SnapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            return new SnapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 4,
      "m0nggh": 4,
      "aizatazhar": 5,
      "-": 75,
      "lamlaaaam": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/HistoryStack.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " * Encapsulates 2 stacks, with one containing past states of the ZooKeep book while the other contains the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " * future states of the ZooKeep book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * This is a singleton."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class HistoryStack {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static HistoryStack history;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final Stack\u003cReadOnlyZooKeepBook\u003e historyStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private final Stack\u003cReadOnlyZooKeepBook\u003e redoStack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private HistoryStack() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static HistoryStack getHistoryStack() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (history \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            history \u003d new HistoryStack();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return history;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Checks if the 2 given ZooKeep books have the same content."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @param before the state of the ZooKeep book before an unknown command was executed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @param after the state of the ZooKeep book after command execution"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void checkEdit(ReadOnlyZooKeepBook before, ReadOnlyZooKeepBook after) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (!before.equals(after)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            clearRedo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Push a read only state of ZooKeepBook into the stack"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param book the ZooKeepBook to be pushed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void addToHistory(ReadOnlyZooKeepBook book) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (getHistorySize() \u003d\u003d 0 || !viewRecentHistory().equals(book)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            historyStack.push(book);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void addToRedo(ReadOnlyZooKeepBook book) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        redoStack.push(book);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void removeRecentHistory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.pop();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void removeRecentRedo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        redoStack.pop();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public ReadOnlyZooKeepBook viewRecentHistory() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return historyStack.peek();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public ReadOnlyZooKeepBook viewRecentRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return redoStack.peek();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public int getHistorySize() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return historyStack.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public int getRedoSize() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return redoStack.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void clearHistory() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void clearRedo() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        redoStack.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return \"Undo stack: \" + Arrays.toString(historyStack.toArray()) + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                + \"Redo stack: \" + Arrays.toString(redoStack.toArray());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 40,
      "lamlaaaam": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    Predicate\u003cAnimal\u003e PREDICATE_SHOW_ALL_ANIMALS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Returns the user prefs\u0027 zookeep book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Path getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Sets the user prefs\u0027 zookeep book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    void setZooKeepBookFilePath(Path zooKeepBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Replaces zookeep book data with the data in {@code ZooKeepBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    void setZooKeepBook(ReadOnlyZooKeepBook zooKeepBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    /** Returns the ZooKeepBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    ReadOnlyZooKeepBook getZooKeepBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns true if an animal with the same identity as {@code animal} exists in the zookeep book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    boolean hasAnimal(Animal animal);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Deletes the given animal."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * The animal must exist in the zookeep book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    void deleteAnimal(Animal target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Adds the given animal."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * {@code animal} must not already exist in the zookeep book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    void addAnimal(Animal animal);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Replaces the given animal {@code target} with {@code editedAnimal}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * {@code target} must exist in the zookeep book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * The animal identity of {@code editedAnimal} must not be the same as another existing animal in the zookeep book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    void setAnimal(Animal target, Animal editedAnimal);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Sorts the animals using the given animal comparator."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param animalComparator Contains the specific comparator required for sorting."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    void sortAnimals(AnimalComparator animalComparator);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /** Returns an unmodifiable view of the filtered animal list */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    ObservableList\u003cAnimal\u003e getFilteredAnimalList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Updates the filter of the filtered animal list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    void updateFilteredAnimalList(Predicate\u003cAnimal\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 7,
      "aizatazhar": 12,
      "-": 61,
      "lamlaaaam": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Represents the in-memory model of the zookeep book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private final ZooKeepBook zooKeepBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final FilteredList\u003cAnimal\u003e filteredAnimals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Initializes a ModelManager with the given zooKeepBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ModelManager(ReadOnlyZooKeepBook zooKeepBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireAllNonNull(zooKeepBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        logger.fine(\"Initializing with zookeep book: \" + zooKeepBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.zooKeepBook \u003d new ZooKeepBook(zooKeepBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        filteredAnimals \u003d new FilteredList\u003c\u003e(this.zooKeepBook.getAnimalList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this(new ZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return userPrefs.getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void setZooKeepBookFilePath(Path zooKeepBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(zooKeepBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        userPrefs.setZooKeepBookFilePath(zooKeepBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ZooKeepBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void setZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.zooKeepBook.resetData(zooKeepBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(animal);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBook.hasAnimal(animal);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void deleteAnimal(Animal target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBook.removeAnimal(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void addAnimal(Animal animal) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBook.addAnimal(animal);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        updateFilteredAnimalList(PREDICATE_SHOW_ALL_ANIMALS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireAllNonNull(target, editedAnimal);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBook.setAnimal(target, editedAnimal);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        zooKeepBook.sortAnimals(animalComparator);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        updateFilteredAnimalList(PREDICATE_SHOW_ALL_ANIMALS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Animal List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Animal} backed by the internal list of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public ObservableList\u003cAnimal\u003e getFilteredAnimalList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return filteredAnimals;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void updateFilteredAnimalList(Predicate\u003cAnimal\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        filteredAnimals.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBook.equals(other.zooKeepBook)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 filteredAnimals.equals(other.filteredAnimals);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 7,
      "aizatazhar": 24,
      "-": 111,
      "lamlaaaam": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Path getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyZooKeepBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Unmodifiable view of a ZooKeep book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public interface ReadOnlyZooKeepBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns an unmodifiable view of the animals list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * This list will not contain any duplicate animals."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    ObservableList\u003cAnimal\u003e getAnimalList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 10,
      "lamlaaaam": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Path zooKeepBookFilePath \u003d Paths.get(\"data\" , \"zookeepbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        setZooKeepBookFilePath(newUserPrefs.getZooKeepBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void setZooKeepBookFilePath(Path zooKeepBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(zooKeepBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.zooKeepBookFilePath \u003d zooKeepBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                \u0026\u0026 zooKeepBookFilePath.equals(o.zooKeepBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return Objects.hash(guiSettings, zooKeepBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + zooKeepBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ZooKeepBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.UniqueAnimalList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Wraps all data at the zookeep-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Duplicates are not allowed (by .isSameAnimal comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class ZooKeepBook implements ReadOnlyZooKeepBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final UniqueAnimalList animals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animals \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ZooKeepBook() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Creates a ZooKeepBook using the Animals in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ZooKeepBook(ReadOnlyZooKeepBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Replaces the contents of the animal list with {@code animals}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * {@code animals} must not contain duplicate animals."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals(List\u003cAnimal\u003e animals) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.animals.setAnimals(animals);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Resets the existing data of this {@code ZooKeepBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void resetData(ReadOnlyZooKeepBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        setAnimals(newData.getAnimalList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    //// animal-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns true if an animal with the same identity as {@code animal} exists in the zookeep book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(animal);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return animals.contains(animal);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Adds an animal to the zookeep book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * The animal must not already exist in the zookeep book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void addAnimal(Animal p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animals.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Replaces the given animal {@code target} in the list with {@code editedAnimal}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * {@code target} must exist in the zookeep book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * The animal identity of {@code editedAnimal} must not be the same as another existing animal in the zookeep book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(editedAnimal);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animals.setAnimal(target, editedAnimal);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Removes {@code key} from this {@code ZooKeepBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * {@code key} must exist in the zookeep book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void removeAnimal(Animal key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animals.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Sorts the animals using the given animal comparator."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param animalComparator Contains the specific comparator required for sorting."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        animals.sortAnimals(animalComparator);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return animals.asUnmodifiableObservableList().size() + \" animals\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public ObservableList\u003cAnimal\u003e getAnimalList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return animals.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                || (other instanceof ZooKeepBook // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                \u0026\u0026 animals.equals(((ZooKeepBook) other).animals));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return animals.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 9,
      "aizatazhar": 14,
      "-": 77,
      "lamlaaaam": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/Animal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTimeComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Represents an Animal in the zookeep book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class Animal {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private final Species species;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final Set\u003cMedicalCondition\u003e medicalConditions \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private final Set\u003cFeedTime\u003e feedTimes \u003d new TreeSet\u003c\u003e(new FeedTimeComparator());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public Animal(Name name, Id id, Species species, Set\u003cMedicalCondition\u003e medicalConditions,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                  Set\u003cFeedTime\u003e feedTimeList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireAllNonNull(name, id, species, medicalConditions);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.medicalConditions.addAll(medicalConditions);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        this.feedTimes.addAll(feedTimeList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Species getSpecies() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return species;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns an immutable medicalCondition set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Set\u003cMedicalCondition\u003e getMedicalConditions() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return Collections.unmodifiableSet(medicalConditions);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns true if both animals of the same name and id."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * This defines a weaker notion of equality between two animals."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean isSameAnimal(Animal otherAnimal) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (otherAnimal \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return otherAnimal !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \u0026\u0026 otherAnimal.getId().equals(getId());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns true if both animals have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * This defines a stronger notion of equality between two animals."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!(other instanceof Animal)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal otherAnimal \u003d (Animal) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return otherAnimal.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 otherAnimal.getId().equals(getId())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 otherAnimal.getSpecies().equals(getSpecies())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 otherAnimal.getMedicalConditions().equals(getMedicalConditions());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return Objects.hash(name, id, species, medicalConditions);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .append(\" ID: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                .append(\" Species: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                .append(getSpecies())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .append(\" Medical conditions: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        getMedicalConditions().forEach(builder::append);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        builder.append(\" Feeding times: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        getFeedTimes().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Returns an immutable feedTime set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public Set\u003cFeedTime\u003e getFeedTimes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return Collections.unmodifiableSet(feedTimes);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the earliest feedtime if present."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Earliest feedtime in set."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Optional\u003cFeedTime\u003e getEarliestFeedTime() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return feedTimes.stream().findFirst();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 14,
      "JunCheng98": 6,
      "m0nggh": 11,
      "aizatazhar": 6,
      "-": 70,
      "lamlaaaam": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/AnimalComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Stores a comparator used for sorting animals according to the category provided."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class AnimalComparator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final Comparator\u003cAnimal\u003e ANIMAL_FEEDTIME_COMPARATOR \u003d new Comparator\u003cAnimal\u003e() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public int compare(Animal o1, Animal o2) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Optional\u003cFeedTime\u003e feedTime1 \u003d o1.getEarliestFeedTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Optional\u003cFeedTime\u003e feedTime2 \u003d o2.getEarliestFeedTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (feedTime1.isEmpty() \u0026\u0026 feedTime2.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else if (feedTime1.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                return 1; // feedtime1 has no timeslot, push to the back"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else if (feedTime2.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                return Integer.compare("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                        Integer.parseInt(feedTime1.get().feedTime),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                        Integer.parseInt(feedTime2.get().feedTime));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final Comparator\u003cAnimal\u003e ANIMAL_ID_COMPARATOR \u003d new Comparator\u003cAnimal\u003e() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public int compare(Animal o1, Animal o2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return Integer.compare("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    Integer.parseInt(o1.getId().value),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    Integer.parseInt(o2.getId().value));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final Comparator\u003cAnimal\u003e ANIMAL_NAME_COMPARATOR \u003d new Comparator\u003cAnimal\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public int compare(Animal o1, Animal o2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return o1.getName().fullName.compareTo(o2.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String FEEDTIME_CATEGORY \u003d \"feedtime\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String ID_CATEGORY \u003d \"id\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String NAME_CATEGORY \u003d \"name\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Comparator\u003cAnimal\u003e animalComparator;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private AnimalComparator(Comparator\u003cAnimal\u003e animalComparator, String category) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.animalComparator \u003d animalComparator;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Creates an animal feed time comparator."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return An animal feed time comparator."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static AnimalComparator createAnimalFeedTimeComparator() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return new AnimalComparator(ANIMAL_FEEDTIME_COMPARATOR, FEEDTIME_CATEGORY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Creates an animal id comparator."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return An animal id comparator."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static AnimalComparator createAnimalIdComparator() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return new AnimalComparator(ANIMAL_ID_COMPARATOR, ID_CATEGORY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Creates an animal name comparator."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return An animal name comparator."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static AnimalComparator createAnimalNameComparator() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return new AnimalComparator(ANIMAL_NAME_COMPARATOR, NAME_CATEGORY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Comparator\u003cAnimal\u003e getAnimalComparator() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.animalComparator;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                || (other instanceof AnimalComparator // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \u0026\u0026 category.equals(((AnimalComparator) other).category)); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/AnimalContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " * Tests that any of an {@code Animal}\u0027s fields matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "public class AnimalContainsKeywordsPredicate implements Predicate\u003cAnimal\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public AnimalContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Checks if the keyword matches any of the strings in an animal\u0027s feeding times."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @param feedTimes A set containing all of the animal\u0027s feeding times."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @param word A given keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @return The boolean that checks if the keyword matches."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public boolean containsFeedTime(Set\u003cFeedTime\u003e feedTimes, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (!FeedTime.isValidFeedTime(word)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        String concat \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        for (FeedTime time : feedTimes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            concat +\u003d time.feedTime + \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(concat, word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Checks if the keyword matches any of the strings in an animal\u0027s medical conditions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @param medicalConditions A set containing all of the animal\u0027s medical conditions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @param word A given keyword."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @return The boolean that checks if the keyword matches."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public boolean containsMedicalCondition(Set\u003cMedicalCondition\u003e medicalConditions, String word) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        String concat \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        for (MedicalCondition condition : medicalConditions) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            concat +\u003d condition.medicalConditionName + \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(concat, word);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public boolean test(Animal animal) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(animal.getName().fullName, keyword))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(animal.getId().toString(), keyword))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(animal.getSpecies().toString(), keyword))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .anyMatch(keyword -\u003e containsFeedTime(animal.getFeedTimes(), keyword))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .anyMatch(keyword -\u003e containsMedicalCondition(animal.getMedicalConditions(), keyword));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                || (other instanceof AnimalContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                \u0026\u0026 keywords.equals(((AnimalContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/Id.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " * Represents an animal\u0027s ID number in the animal list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            \"ID numbers should only contain numbers with no leading zeros, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Constructs a {@code Id}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * @param id A valid ID number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public Id(String id) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        value \u003d id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Returns true if a given string is a valid ID number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                || (other instanceof Id // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                \u0026\u0026 value.equals(((Id) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "JunCheng98": 13,
      "-": 38,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Represents an Animal\u0027s name in the zookeep book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "lamlaaaam": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/Species.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Represents an Animal\u0027s species in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSpecies(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class Species {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Species can take any values, but it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * The first character of the species must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Constructs a {@code Species}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @param species A valid species."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Species(String species) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        checkArgument(isValidSpecies(species), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        value \u003d species;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Returns true if a given string is a valid species."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static boolean isValidSpecies(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                || (other instanceof Species // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                \u0026\u0026 value.equals(((Species) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 14,
      "-": 41,
      "lamlaaaam": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/UniqueAnimalList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.exceptions.AnimalNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.exceptions.DuplicateAnimalException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * A list of animals that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * An animal is considered unique by comparing using {@code Animal#isSameAnimal(Animal)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * animals uses Animal#isSameAnimal(Animal) for equality so as to ensure that the animal being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * unique in terms of identity in the UniqueAnimalList. However, the removal of an animal uses Animal#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * as to ensure that the animal with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * @see Animal#isSameAnimal(Animal)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class UniqueAnimalList implements Iterable\u003cAnimal\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final ObservableList\u003cAnimal\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final ObservableList\u003cAnimal\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns true if the list contains an equivalent animal as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean contains(Animal toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAnimal);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Adds an animal to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * The animal must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void add(Animal toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DuplicateAnimalException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Replaces the animal {@code target} in the list with {@code editedAnimal}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * The animal identity of {@code editedAnimal} must not be the same as another existing animal in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireAllNonNull(target, editedAnimal);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AnimalNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!target.isSameAnimal(editedAnimal) \u0026\u0026 contains(editedAnimal)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DuplicateAnimalException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        internalList.set(index, editedAnimal);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Removes the equivalent animal from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * The animal must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void remove(Animal toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AnimalNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals(UniqueAnimalList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Replaces the contents of this list with {@code animals}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * {@code animals} must not contain duplicate animals."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals(List\u003cAnimal\u003e animals) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireAllNonNull(animals);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!animalsAreUnique(animals)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DuplicateAnimalException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        internalList.setAll(animals);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Replaces the contents of this list with a sorted list instead."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Comparator\u003cAnimal\u003e comparator \u003d animalComparator.getAnimalComparator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        SortedList\u003cAnimal\u003e sortedList \u003d internalList.sorted(comparator);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        internalList.setAll(sortedList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public ObservableList\u003cAnimal\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Iterator\u003cAnimal\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                || (other instanceof UniqueAnimalList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAnimalList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns true if {@code animals} contains only unique animals."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private boolean animalsAreUnique(List\u003cAnimal\u003e animals) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (int i \u003d 0; i \u003c animals.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            for (int j \u003d i + 1; j \u003c animals.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                if (animals.get(i).isSameAnimal(animals.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 11,
      "lamlaaaam": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/exceptions/AnimalNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Signals that the operation is unable to find the specified animal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class AnimalNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/animal/exceptions/DuplicateAnimalException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Signals that the operation will result in duplicate Animals (Animals are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class DuplicateAnimalException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public DuplicateAnimalException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        super(\"Operation would result in duplicate animals\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/feedtime/FeedTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koonweee"
        },
        "content": "package seedu.address.model.feedtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koonweee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": " * Represents a FeedTime in the ZooKeep Book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koonweee"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidFeedTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koonweee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "public class FeedTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            \"Feed times should be in the format HHmm, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-2][0-9][0-5][0-9]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public final String feedTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Constructs a {@code FeedTime}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * @param feedTimeText A valid feeding time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public FeedTime(String feedTimeText) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        requireNonNull(feedTimeText);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        checkArgument(isValidFeedTime(feedTimeText), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        this.feedTime \u003d feedTimeText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Returns true if a given string is a valid feeding time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static boolean isValidFeedTime(String feedTimeText) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return feedTimeText.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                || (other instanceof FeedTime // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                \u0026\u0026 feedTime.equals(((FeedTime) other).feedTime)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return feedTime.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return \u0027[\u0027 + feedTime + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koonweee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/feedtime/FeedTimeComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koonweee"
        },
        "content": "package seedu.address.model.feedtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": "public class FeedTimeComparator implements Comparator\u003cFeedTime\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public int compare(FeedTime o1, FeedTime o2) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return Integer.compare("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                Integer.parseInt(o1.feedTime),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                Integer.parseInt(o2.feedTime));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicalcondition/MedicalCondition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.medicalcondition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": " * Represents a MedicalCondition in the ZooKeep Book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidMedicalConditionName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class MedicalCondition {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            \"Medical condition names should only contain alphanumeric characters and spaces,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public final String medicalConditionName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructs a {@code MedicalCondition}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param medicalConditionName A valid medicalCondition name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public MedicalCondition(String medicalConditionName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        requireNonNull(medicalConditionName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        checkArgument(isValidMedicalConditionName(medicalConditionName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.medicalConditionName \u003d medicalConditionName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns true if a given string is a valid medicalCondition name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static boolean isValidMedicalConditionName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                || (other instanceof MedicalCondition // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 medicalConditionName.equals(((MedicalCondition) other).medicalConditionName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return medicalConditionName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \u0027[\u0027 + medicalConditionName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "lamlaaaam": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Contains utility methods for populating {@code ZooKeep} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Animal[] getSampleAnimals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new Animal[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            new Animal(new Name(\"Letho\"), new Id(\"325\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new Species(\"Blue Tongue Skink\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                getMedicalConditionSet(\"Healthy\"), getFeedTimeSet(\"1234\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            new Animal(new Name(\"Sulyvahn\"), new Id(\"29381\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new Species(\"Boa Constrictor\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                getMedicalConditionSet(\"Inclusion Body Disease\"), getFeedTimeSet(\"0608\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            new Animal(new Name(\"Nemo\"), new Id(\"123\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new Species(\"Clownfish\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                getMedicalConditionSet(\"Healthy\"), getFeedTimeSet(\"1307\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            new Animal(new Name(\"Ivan\"), new Id(\"242111\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new Species(\"Badger\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                getMedicalConditionSet(\"Healthy\"), getFeedTimeSet(\"1307\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static ReadOnlyZooKeepBook getSampleZooKeepBook() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook sampleAb \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (Animal sampleAnimal : getSampleAnimals()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            sampleAb.addAnimal(sampleAnimal);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns a medicalCondition set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Set\u003cMedicalCondition\u003e getMedicalConditionSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .map(MedicalCondition::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Returns a feedTime set containing the list of strings given."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static Set\u003cFeedTime\u003e getFeedTimeSet(String... strings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .map(FeedTime::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 15,
      "aizatazhar": 4,
      "-": 27,
      "lamlaaaam": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAnimal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Jackson-friendly version of {@link Animal}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "class JsonAdaptedAnimal {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Animal\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private final String species;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final List\u003cJsonAdaptedMedicalCondition\u003e medicalConditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private final List\u003cJsonAdaptedFeedTime\u003e feedTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructs a {@code JsonAdaptedAnimal} with the given animal details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public JsonAdaptedAnimal(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            @JsonProperty(\"species\") String species,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            @JsonProperty(\"medicalConditions\") List\u003cJsonAdaptedMedicalCondition\u003e medicalConditions,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            @JsonProperty(\"feedTimes\") List\u003cJsonAdaptedFeedTime\u003e feedTimes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (medicalConditions !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            this.medicalConditions.addAll(medicalConditions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        if (feedTimes !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            this.feedTimes.addAll(feedTimes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Converts a given {@code Animal} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public JsonAdaptedAnimal(Animal source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        id \u003d source.getId().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        species \u003d source.getSpecies().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        medicalConditions.addAll(source.getMedicalConditions().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .map(JsonAdaptedMedicalCondition::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        feedTimes.addAll(source.getFeedTimes().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .map(JsonAdaptedFeedTime::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Converts this Jackson-friendly adapted animal object into the model\u0027s {@code Animal} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted animal."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Animal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        final List\u003cMedicalCondition\u003e animalMedicalConditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (JsonAdaptedMedicalCondition medicalCondition : medicalConditions) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            animalMedicalConditions.add(medicalCondition.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        final List\u003cFeedTime\u003e animalFeedTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        for (JsonAdaptedFeedTime feedTime : feedTimes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            animalFeedTimes.add(feedTime.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        if (!Id.isValidId(id)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        final Id modelId \u003d new Id(id);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (species \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Species.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (!Species.isValidSpecies(species)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new IllegalValueException(Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        final Species modelSpecies \u003d new Species(species);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        final Set\u003cMedicalCondition\u003e modelMedicalConditions \u003d new HashSet\u003c\u003e(animalMedicalConditions);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        final Set\u003cFeedTime\u003e modelFeedTimes \u003d new HashSet\u003c\u003e(animalFeedTimes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return new Animal(modelName, modelId, modelSpecies, modelMedicalConditions, modelFeedTimes);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 20,
      "JunCheng98": 8,
      "m0nggh": 1,
      "aizatazhar": 9,
      "-": 54,
      "lamlaaaam": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFeedTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koonweee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koonweee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": " * Jackson-friendly version of {@link FeedTime}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "class JsonAdaptedFeedTime {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private final String feedTimeText;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Constructs a {@code JsonAdaptedFeedTime} with the given {@code feedTimeText}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public JsonAdaptedFeedTime(String feedTimeText) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        this.feedTimeText \u003d feedTimeText;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Converts a given {@code FeedTime} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public JsonAdaptedFeedTime(FeedTime source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        feedTimeText \u003d source.feedTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public String getFeedTimeName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return feedTimeText;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Converts this Jackson-friendly adapted feedTime object into the model\u0027s {@code FeedTime} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted feedTime."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public FeedTime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        if (!FeedTime.isValidFeedTime(feedTimeText)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            throw new IllegalValueException(FeedTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return new FeedTime(feedTimeText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koonweee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMedicalCondition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Jackson-friendly version of {@link MedicalCondition}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "class JsonAdaptedMedicalCondition {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final String medicalConditionName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructs a {@code JsonAdaptedMedicalCondition} with the given {@code medicalConditionName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public JsonAdaptedMedicalCondition(String medicalConditionName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.medicalConditionName \u003d medicalConditionName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Converts a given {@code MedicalCondition} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public JsonAdaptedMedicalCondition(MedicalCondition source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        medicalConditionName \u003d source.medicalConditionName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String getMedicalConditionName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return medicalConditionName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Converts this Jackson-friendly adapted medicalCondition object into the model\u0027s {@code MedicalCondition} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted medicalCondition."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public MedicalCondition toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!MedicalCondition.isValidMedicalConditionName(medicalConditionName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new IllegalValueException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return new MedicalCondition(medicalConditionName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableZooKeepBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * An Immutable ZooKeepBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "@JsonRootName(value \u003d \"zookeepbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "class JsonSerializableZooKeepBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANIMAL \u003d \"Animals list contains duplicate animal(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final List\u003cJsonAdaptedAnimal\u003e animals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Constructs a {@code JsonSerializableZooKeepBook} with the given animals."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public JsonSerializableZooKeepBook(@JsonProperty(\"animals\") List\u003cJsonAdaptedAnimal\u003e animals) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.animals.addAll(animals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Converts a given {@code ReadOnlyZooKeepBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableZooKeepBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public JsonSerializableZooKeepBook(ReadOnlyZooKeepBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animals.addAll(source.getAnimalList().stream().map(JsonAdaptedAnimal::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Converts this zookeep book into the model\u0027s {@code ZooKeepBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ZooKeepBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook zooKeepBook \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (JsonAdaptedAnimal jsonAdaptedAnimal : animals) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            Animal animal \u003d jsonAdaptedAnimal.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            if (zooKeepBook.hasAnimal(animal)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ANIMAL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            zooKeepBook.addAnimal(animal);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 16,
      "-": 36,
      "lamlaaaam": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonZooKeepBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * A class to access ZooKeepBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class JsonZooKeepBookStorage implements ZooKeepBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonZooKeepBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public JsonZooKeepBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return readZooKeepBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Similar to {@link #readZooKeepBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Optional\u003cJsonSerializableZooKeepBook\u003e jsonZooKeepBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                filePath, JsonSerializableZooKeepBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (!jsonZooKeepBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            return Optional.of(jsonZooKeepBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        saveZooKeepBook(zooKeepBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Similar to {@link #saveZooKeepBook(ReadOnlyZooKeepBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        requireNonNull(zooKeepBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableZooKeepBook(zooKeepBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public interface Storage extends ZooKeepBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Path getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Manages storage of ZooKeepBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private ZooKeepBookStorage zooKeepBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ZooKeepBook} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public StorageManager(ZooKeepBookStorage zooKeepBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.zooKeepBookStorage \u003d zooKeepBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ZooKeepBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBookStorage.getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return readZooKeepBook(zooKeepBookStorage.getZooKeepBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBookStorage.readZooKeepBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        saveZooKeepBook(zooKeepBook, zooKeepBookStorage.getZooKeepBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBookStorage.saveZooKeepBook(zooKeepBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 17,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ZooKeepBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Represents a storage for {@link ZooKeepBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public interface ZooKeepBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Path getZooKeepBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Returns ZooKeepBook data as a {@link ReadOnlyZooKeepBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @see #getZooKeepBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Saves the given {@link ReadOnlyZooKeepBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @param zooKeepBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * @see #saveZooKeepBook(ReadOnlyZooKeepBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 14,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AnimalCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTimeComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * An UI component that displays information of a {@code Animal}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class AnimalCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final String FXML \u003d \"AnimalListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final String NOT_SPECIFIED_STYLE \u003d \"-fx-font-size: 11px; -fx-text-fill: #e06060;\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            + \"-fx-background-color: transparent; -fx-padding: 0;\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public final Animal animal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private Label identity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Label species;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Label medicalCondition;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private FlowPane medicalConditions;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private Label feedTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private FlowPane feedTimes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates a {@code AnimalCode} with the given {@code Animal} and index to display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalCard(Animal animal, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.animal \u003d animal;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        index.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        name.setText(animal.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        identity.setText(animal.getId().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        species.setText(animal.getSpecies().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (!animal.getMedicalConditions().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            animal.getMedicalConditions().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                    .sorted(Comparator.comparing(medicalCondition -\u003e medicalCondition.medicalConditionName))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                    .forEach(medicalCondition -\u003e medicalConditions.getChildren()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                            .add(new Label(medicalCondition.medicalConditionName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            Label label \u003d new Label(\"Not specified\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            label.setStyle(NOT_SPECIFIED_STYLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            medicalConditions.getChildren().add(label);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        if (!animal.getFeedTimes().isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            animal.getFeedTimes().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                    .sorted(new FeedTimeComparator())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                    .forEach(feedTime -\u003e feedTimes.getChildren()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                            .add(new Label(feedTime.feedTime + \" hrs\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            Label label \u003d new Label(\"Not specified\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            label.setStyle(NOT_SPECIFIED_STYLE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            feedTimes.getChildren().add(label);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (!(other instanceof AnimalCard)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        AnimalCard card \u003d (AnimalCard) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                \u0026\u0026 animal.equals(card.animal);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 8,
      "JunCheng98": 1,
      "aizatazhar": 20,
      "-": 51,
      "lamlaaaam": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AnimalListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Panel containing the list of animals."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class AnimalListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final String FXML \u003d \"AnimalListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AnimalListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private ListView\u003cAnimal\u003e animalListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates a {@code AnimalListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalListPanel(ObservableList\u003cAnimal\u003e animalList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animalListView.setItems(animalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animalListView.setCellFactory(listView -\u003e new AnimalListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Animal} using a {@code AnimalCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    class AnimalListViewCell extends ListCell\u003cAnimal\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        protected void updateItem(Animal animal, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            super.updateItem(animal, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            if (empty || animal \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                setGraphic(new AnimalCard(animal, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w15-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private AnimalListPanel animalListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private StackPane animalListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animalListPanel \u003d new AnimalListPanel(logic.getFilteredAnimalList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animalListPanelPlaceholder.getChildren().add(animalListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getZooKeepBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalListPanel getAnimalListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return animalListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 189,
      "lamlaaaam": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/zookeep_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/AnimalListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "      \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cLabel wrapText\u003d\"true\" styleClass\u003d\"cell_small_label_description\" minWidth\u003d\"70\" text\u003d\"Id:\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cLabel fx:id\u003d\"identity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$id\" alignment\u003d\"CENTER_LEFT\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "      \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cLabel wrapText\u003d\"true\" styleClass\u003d\"cell_small_label_description\" minWidth\u003d\"70\" text\u003d\"Species:\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cLabel fx:id\u003d\"species\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$species\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cLabel wrapText\u003d\"true\" styleClass\u003d\"cell_small_label_description\" minWidth\u003d\"70\" text\u003d\"Medical:\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"medicalConditions\" prefWrapLength\u003d\"5000\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koonweee"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cLabel wrapText\u003d\"true\" styleClass\u003d\"cell_small_label_description\" minWidth\u003d\"70\" text\u003d\"Feed times:\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"feedTimes\" prefWrapLength\u003d\"5000\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koonweee"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "koonweee": 2,
      "aizatazhar": 13,
      "-": 30,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/main/resources/view/AnimalListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  \u003cListView fx:id\u003d\"animalListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-border-color: #ffcd78;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ".cell_small_label_description {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-text-fill: #ffcd78 !important;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "#filterField, #animalListPanel, #animalWebpage {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "#medicalConditions {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "#medicalConditions .label {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-padding: 0 3 0 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "koonweee"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "koonweee"
        },
        "content": "#feedTimes {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "koonweee"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "koonweee"
        },
        "content": "#feedTimes .label {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-background-color: #913e50;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    -fx-padding: 0 3 0 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "#species .label {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-padding: 0 3 0 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 14,
      "aizatazhar": 21,
      "-": 345,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ".medicalCondition-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koonweee"
        },
        "content": ".feedTime-selector {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "-": 25,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ZooKeep\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    \u003cImage url\u003d\"@/images/zookeep_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003cSplitPane orientation\u003d\"VERTICAL\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"130\" minHeight\u003d\"75\" prefHeight\u003d\"130\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "          \u003cVBox fx:id\u003d\"animalList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            \u003cStackPane fx:id\u003d\"animalListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 10,
      "-": 49,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableZooKeepBookTest/duplicateAnimalZooKeepBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  \"animals\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\": \"Buttercup\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\": \"123\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\": \"Reticulated Python\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"medicalConditions\": [ \"Healthy\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\": \"Buttercup\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\": \"123\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\": \"Anaconda\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 2,
      "m0nggh": 5,
      "-": 4,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableZooKeepBookTest/invalidAnimalZooKeepBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  \"animals\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"nameDDDDD\": \"Ah Meng\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\": \"234\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\": \"Orangutan\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "m0nggh": 2,
      "-": 3,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableZooKeepBookTest/typicalAnimalsZooKeepBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  \"_comment\": \"ZooKeepBook save file which contains the same Animal values as in TypicalAnimals#getTypicalZooKeepBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  \"animals\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\" : \"Ahmeng\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\" : \"123\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\" : \"Orangutan\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"medicalConditions\" : [ \"Healthy\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\" : \"Buttercup\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\" : \"456\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\" : \"Reticulated Python\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"medicalConditions\" : [ \"Skin Infection\", \"Inclusion Body Disease\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\" : \"Coco\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\" : \"125\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\" : \"Chihuahua\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    \"medicalConditions\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\" : \"Esther\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\" : \"126\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\" : \"Pig\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"medicalConditions\" : [ \"Healthy\" ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\" : \"Grecia\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\" : \"134\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\" : \"Toucan\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    \"medicalConditions\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\" : \"Nemo\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\" : \"1212\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\" : \"Clownfish\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    \"medicalConditions\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\" : \"Pasha\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\" : \"1234\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\" : \"White Tiger\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    \"medicalConditions\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 7,
      "m0nggh": 17,
      "aizatazhar": 1,
      "-": 9,
      "lamlaaaam": 5
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  \"zooKeepBookFilePath\" : \"zookeepbook.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "  \"zooKeepBookFilePath\" : \"zookeepbook.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/JsonZooKeepBookStorageTest/invalidAndValidAnimalZooKeepBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  \"animals\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    \"name\": \"Valid Animal\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\": \"123\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    \"species\": \"4th street\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    \"name\": \"Animal With Invalid Id Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\": \"asd123\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\": \"Chihuahua\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 2,
      "m0nggh": 1,
      "aizatazhar": 1,
      "-": 4,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/test/data/JsonZooKeepBookStorageTest/invalidAnimalZooKeepBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "  \"animals\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"name\": \"Animal with invalid name field: A!h Me@ng\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    \"id\": \"234\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \"species\": \"Orangutan\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "m0nggh": 2,
      "-": 3,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        final Index fifthAnimalIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(fifthAnimalIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(fifthAnimalIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(fifthAnimalIndex.equals(fifthAnimalIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertFalse(fifthAnimalIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertFalse(fifthAnimalIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertFalse(fifthAnimalIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "lamlaaaam": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/zookeep_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_ARCHIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ARCHIE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_ARCHIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.ARCHIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.JsonZooKeepBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonZooKeepBookStorage zooKeepBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                new JsonZooKeepBookStorage(temporaryFolder.resolve(\"zooKeepBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        StorageManager storage \u003d new StorageManager(zooKeepBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // Setup LogicManager with JsonZooKeepBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonZooKeepBookStorage zooKeepBookStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                new JsonZooKeepBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionZooKeepBook.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        StorageManager storage \u003d new StorageManager(zooKeepBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_ARCHIE + ID_DESC_ARCHIE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + SPECIES_DESC_ARCHIE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal expectedAnimal \u003d new AnimalBuilder(ARCHIE).withMedicalConditions().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.addAnimal(expectedAnimal);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void getFilteredAnimalList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAnimalList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static class JsonZooKeepBookIoExceptionThrowingStub extends JsonZooKeepBookStorage {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        private JsonZooKeepBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 7,
      "aizatazhar": 13,
      "-": 129,
      "lamlaaaam": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        model \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_newAnimal_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal validAnimal \u003d new AnimalBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.addAnimal(validAnimal);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertCommandSuccess(new AddCommand(validAnimal), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validAnimal), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_duplicateAnimal_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Animal animalInList \u003d model.getZooKeepBook().getAnimalList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertCommandFailure(new AddCommand(animalInList), model, AddCommand.MESSAGE_DUPLICATE_ANIMAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 4,
      "-": 32,
      "lamlaaaam": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void constructor_nullAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_animalAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ModelStubAcceptingAnimalAdded modelStub \u003d new ModelStubAcceptingAnimalAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal validAnimal \u003d new AnimalBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validAnimal).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validAnimal), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(Arrays.asList(validAnimal), modelStub.animalsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_duplicateAnimal_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal validAnimal \u003d new AnimalBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validAnimal);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAnimal(validAnimal);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ANIMAL, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal ahmeng \u003d new AnimalBuilder().withName(\"Ahmeng\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal buttercup \u003d new AnimalBuilder().withName(\"Buttercup\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AddCommand addAhmengCommand \u003d new AddCommand(ahmeng);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AddCommand addButtercupCommand \u003d new AddCommand(buttercup);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(addAhmengCommand.equals(addAhmengCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AddCommand addAhmengCommandCopy \u003d new AddCommand(ahmeng);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(addAhmengCommand.equals(addAhmengCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(addAhmengCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(addAhmengCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different animal -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(addAhmengCommand.equals(addButtercupCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setZooKeepBookFilePath(Path zooKeepBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void addAnimal(Animal animal) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setZooKeepBook(ReadOnlyZooKeepBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void deleteAnimal(Animal target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public ObservableList\u003cAnimal\u003e getFilteredAnimalList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void updateFilteredAnimalList(Predicate\u003cAnimal\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * A Model stub that contains a single animal."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private class ModelStubWithAnimal extends ModelStub {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        private final Animal animal;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ModelStubWithAnimal(Animal animal) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            requireNonNull(animal);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            this.animal \u003d animal;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            requireNonNull(animal);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return this.animal.isSameAnimal(animal);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * A Model stub that always accept the animal being added."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private class ModelStubAcceptingAnimalAdded extends ModelStub {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        final ArrayList\u003cAnimal\u003e animalsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            requireNonNull(animal);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return animalsAdded.stream().anyMatch(animal::isSameAnimal);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void addAnimal(Animal animal) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            requireNonNull(animal);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            animalsAdded.add(animal);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            return new ZooKeepBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 12,
      "aizatazhar": 8,
      "-": 141,
      "lamlaaaam": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void execute_emptyZooKeepBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void execute_nonEmptyZooKeepBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        expectedModel.setZooKeepBook(new ZooKeepBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.EditAnimalDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String VALID_NAME_ARCHIE \u003d \"Archie\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String VALID_NAME_BAILEY \u003d \"Bailey\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String VALID_NAME_PASHA \u003d \"Pasha\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String VALID_ID_ARCHIE \u003d \"123\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String VALID_ID_BAILEY \u003d \"456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String VALID_ID_PASHA \u003d \"1234\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String VALID_SPECIES_ARCHIE \u003d \"German Shepherd\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String VALID_SPECIES_BAILEY \u003d \"Golden Retriever\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String VALID_MEDICAL_CONDITION_ARTHRITIS \u003d \"arthritis\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String VALID_MEDICAL_CONDITION_OBESE \u003d \"obese\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String NAME_DESC_ARCHIE \u003d \" \" + PREFIX_NAME + VALID_NAME_ARCHIE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String NAME_DESC_BAILEY \u003d \" \" + PREFIX_NAME + VALID_NAME_BAILEY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String ID_DESC_ARCHIE \u003d \" \" + PREFIX_ID + VALID_ID_ARCHIE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String ID_DESC_BAILEY \u003d \" \" + PREFIX_ID + VALID_ID_BAILEY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String SPECIES_DESC_ARCHIE \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_ARCHIE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String SPECIES_DESC_BAILEY \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String MEDICAL_CONDITION_DESC_OBESE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \" \" + PREFIX_MEDICAL_CONDITION + VALID_MEDICAL_CONDITION_OBESE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String MEDICAL_CONDITION_DESC_ARTHRITIS \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \" \" + PREFIX_MEDICAL_CONDITION + VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public static final String INVALID_ID_DESC \u003d \" \" + PREFIX_ID + \"911a\"; // \u0027a\u0027 not allowed in IDs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static final String INVALID_SPECIES_DESC \u003d \" \" + PREFIX_SPECIES; // empty string not allowed for species"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String INVALID_MEDICAL_CONDITION_DESC \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            \" \" + PREFIX_MEDICAL_CONDITION + \"healthy*\"; // \u0027*\u0027 not allowed in medicalConditions"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final EditCommand.EditAnimalDescriptor DESC_ARCHIE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final EditCommand.EditAnimalDescriptor DESC_BAILEY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        DESC_ARCHIE \u003d new EditAnimalDescriptorBuilder().withName(VALID_NAME_ARCHIE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withId(VALID_ID_ARCHIE).withSpecies(VALID_SPECIES_ARCHIE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_OBESE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        DESC_BAILEY \u003d new EditAnimalDescriptorBuilder().withName(VALID_NAME_BAILEY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withId(VALID_ID_BAILEY).withSpecies(VALID_SPECIES_BAILEY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS, VALID_MEDICAL_CONDITION_OBESE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * - the zookeep book, filtered animal list and selected animal in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook expectedZooKeepBook \u003d new ZooKeepBook(actualModel.getZooKeepBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        List\u003cAnimal\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAnimalList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(expectedZooKeepBook, actualModel.getZooKeepBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAnimalList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the animal at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * {@code model}\u0027s zookeep book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static void showAnimalAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAnimalList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal animal \u003d model.getFilteredAnimalList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        final String[] splitName \u003d animal.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        model.updateFilteredAnimalList(new AnimalContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(1, model.getFilteredAnimalList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 4,
      "JunCheng98": 4,
      "m0nggh": 24,
      "aizatazhar": 9,
      "-": 75,
      "lamlaaaam": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAnimalAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ANIMAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private static final Id OUT_OF_BOUNDS_ID \u003d new Id(\"99999999999999999999999999999999\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal animalToDelete \u003d model.getFilteredAnimalList().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(animalToDelete.getId());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ANIMAL_SUCCESS, animalToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.deleteAnimal(animalToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAnimalList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(OUT_OF_BOUNDS_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ANIMAL_DISPLAYED_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        showAnimalAtIndex(model, INDEX_FIRST_ANIMAL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal animalToDelete \u003d model.getFilteredAnimalList().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(animalToDelete.getId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ANIMAL_SUCCESS, animalToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.deleteAnimal(animalToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        showNoAnimal(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        showAnimalAtIndex(model, INDEX_FIRST_ANIMAL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ANIMAL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of zookeep book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getZooKeepBook().getAnimalList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(OUT_OF_BOUNDS_ID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ANIMAL_DISPLAYED_ID);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new Id(\"123\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new Id(\"1234\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new Id(\"123\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different animal -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void showNoAnimal(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        model.updateFilteredAnimalList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(model.getFilteredAnimalList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 9,
      "m0nggh": 5,
      "aizatazhar": 6,
      "-": 75,
      "lamlaaaam": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditAnimalDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ARCHIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BAILEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BAILEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BAILEY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAnimalDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.EditAnimalDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class EditAnimalDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor descriptorWithSameValues \u003d new EditAnimalDescriptor(DESC_ARCHIE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(DESC_ARCHIE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(DESC_ARCHIE.equals(DESC_ARCHIE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(DESC_ARCHIE.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(DESC_ARCHIE.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(DESC_ARCHIE.equals(DESC_BAILEY));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor editedArchie \u003d new EditAnimalDescriptorBuilder(DESC_ARCHIE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withName(VALID_NAME_BAILEY).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(DESC_ARCHIE.equals(editedArchie));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // different ID -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedArchie \u003d new EditAnimalDescriptorBuilder(DESC_ARCHIE).withId(VALID_ID_BAILEY).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(DESC_ARCHIE.equals(editedArchie));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // different species -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedArchie \u003d new EditAnimalDescriptorBuilder(DESC_ARCHIE).withSpecies(VALID_SPECIES_BAILEY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(DESC_ARCHIE.equals(editedArchie));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different medicalConditions -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedArchie \u003d new EditAnimalDescriptorBuilder(DESC_ARCHIE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(DESC_ARCHIE.equals(editedArchie));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 1,
      "m0nggh": 23,
      "-": 27,
      "lamlaaaam": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ARCHIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BAILEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_PASHA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BAILEY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PASHA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAnimalAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ANIMAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAnimalDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.EditAnimalDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal editedAnimal \u003d new AnimalBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder(editedAnimal).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANIMAL, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANIMAL_SUCCESS, editedAnimal);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ZooKeepBook(model.getZooKeepBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.setAnimal(model.getFilteredAnimalList().get(0), editedAnimal);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index indexLastAnimal \u003d Index.fromOneBased(model.getFilteredAnimalList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal lastAnimal \u003d model.getFilteredAnimalList().get(indexLastAnimal.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        AnimalBuilder animalInList \u003d new AnimalBuilder(lastAnimal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        Animal editedAnimal \u003d animalInList.withName(VALID_NAME_PASHA).withId(VALID_ID_PASHA)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withName(VALID_NAME_PASHA)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .withId(VALID_ID_PASHA).withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastAnimal, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANIMAL_SUCCESS, editedAnimal);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ZooKeepBook(model.getZooKeepBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.setAnimal(lastAnimal, editedAnimal);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANIMAL, new EditAnimalDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal editedAnimal \u003d model.getFilteredAnimalList().get(INDEX_FIRST_ANIMAL.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANIMAL_SUCCESS, editedAnimal);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ZooKeepBook(model.getZooKeepBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        showAnimalAtIndex(model, INDEX_FIRST_ANIMAL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal animalInFilteredList \u003d model.getFilteredAnimalList().get(INDEX_FIRST_ANIMAL.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal editedAnimal \u003d new AnimalBuilder(animalInFilteredList).withName(VALID_NAME_BAILEY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANIMAL,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                new EditAnimalDescriptorBuilder().withName(VALID_NAME_BAILEY).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANIMAL_SUCCESS, editedAnimal);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ZooKeepBook(model.getZooKeepBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.setAnimal(model.getFilteredAnimalList().get(0), editedAnimal);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_duplicateAnimalUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal firstAnimal \u003d model.getFilteredAnimalList().get(INDEX_FIRST_ANIMAL.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder(firstAnimal).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ANIMAL, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ANIMAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_duplicateAnimalFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        showAnimalAtIndex(model, INDEX_FIRST_ANIMAL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // edit animal in filtered list into a duplicate in zookeep book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Animal animalInList \u003d model.getZooKeepBook().getAnimalList().get(INDEX_SECOND_ANIMAL.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANIMAL,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new EditAnimalDescriptorBuilder(animalInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ANIMAL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_invalidAnimalIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAnimalList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withName(VALID_NAME_BAILEY).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ANIMAL_DISPLAYED_ID);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * but smaller than size of zookeep book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_invalidAnimalIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        showAnimalAtIndex(model, INDEX_FIRST_ANIMAL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ANIMAL;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of zookeep book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getZooKeepBook().getAnimalList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                new EditAnimalDescriptorBuilder().withName(VALID_NAME_BAILEY).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ANIMAL_DISPLAYED_ID);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ANIMAL, DESC_ARCHIE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor copyDescriptor \u003d new EditAnimalDescriptor(DESC_ARCHIE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ANIMAL, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ANIMAL, DESC_ARCHIE)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ANIMAL, DESC_BAILEY)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 7,
      "m0nggh": 13,
      "aizatazhar": 12,
      "-": 99,
      "lamlaaaam": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ANIMALS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.COCO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.GRECIA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.NEMO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                new AnimalContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                new AnimalContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different animal -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_zeroKeywords_noAnimalFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ANIMALS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.updateFilteredAnimalList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAnimalList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_multipleKeywords_multipleAnimalsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ANIMALS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate predicate \u003d preparePredicate(\"Coco Grecia Nemo\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        expectedModel.updateFilteredAnimalList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(Arrays.asList(COCO, GRECIA, NEMO), model.getFilteredAnimalList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "     * Parses {@code userInput} into a {@code AnimalContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private AnimalContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        return new AnimalContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 10,
      "m0nggh": 4,
      "aizatazhar": 3,
      "-": 57,
      "lamlaaaam": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAnimalAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        model \u003d new ModelManager(getTypicalZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getZooKeepBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        showAnimalAtIndex(model, INDEX_FIRST_ANIMAL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 3,
      "-": 33,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.HistoryStack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_redoSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook bookA \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        bookA.addAnimal(new AnimalBuilder().withName(\"Bob\").build());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook bookB \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        bookB.addAnimal(new AnimalBuilder().withName(\"Bob\").build());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        bookB.addAnimal(new AnimalBuilder().withName(\"Tom\").withId(\"1234\").build());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToHistory(bookA);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToHistory(bookB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        CommandResult testResult \u003d new UndoCommand().execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        CommandResult commandResult \u003d new RedoCommand().execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(RedoCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.getRedoSize(), 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_noRedoAvailable_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertThrows(CommandException.class, RedoCommand.MESSAGE_NO_REDO, () -\u003e redoCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        book.addAnimal(new AnimalBuilder().withName(\"Bob\").build());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToHistory(book);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertTrue(redoCommand.equals(redoCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        RedoCommand redoCommandCopy \u003d new RedoCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertTrue(redoCommand.equals(redoCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertFalse(redoCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertFalse(redoCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        private ZooKeepBook zooKeepBook \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void setZooKeepBookFilePath(Path zooKeepBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void addAnimal(Animal animal) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void setZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            this.zooKeepBook.resetData(zooKeepBook);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void deleteAnimal(Animal target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public ObservableList\u003cAnimal\u003e getFilteredAnimalList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        public void updateFilteredAnimalList(Predicate\u003cAnimal\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SnapCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.storage.JsonZooKeepBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.testutil.TypicalAnimals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class SnapCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Path makePath(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return Path.of(\"src\", \"test\", \"data\", \"SnapCommandTest\", fileName + SnapCommand.FILE_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void constructor_nullConstructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SnapCommand(null, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void execute_validFileName_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String validFileName \u003d \"ZooKeepBookTest_19-10-2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Path path \u003d makePath(validFileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        CommandResult commandResult \u003d new SnapCommand(path, validFileName).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // assert that command has executed successfully"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(String.format(SnapCommand.MESSAGE_SUCCESS, validFileName + SnapCommand.FILE_FORMAT),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // assert that contents of created file is equal"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ReadOnlyZooKeepBook expectedBook \u003d modelStub.getZooKeepBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ReadOnlyZooKeepBook savedBook \u003d new JsonZooKeepBookStorageStub(path).readZooKeepBook().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(expectedBook, savedBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        final String fileName \u003d \"zookeepbook_19-10-2020\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Path path \u003d makePath(fileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        SnapCommand snapCommand \u003d new SnapCommand(path, fileName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertTrue(snapCommand.equals(snapCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        SnapCommand snapCommandCopy \u003d new SnapCommand(path, fileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertTrue(snapCommand.equals(snapCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // different file names -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        SnapCommand snapCommandWithDifferentFileName \u003d new SnapCommand(path, fileName + \"x\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(snapCommand.equals(snapCommandWithDifferentFileName));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(snapCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(snapCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            userPrefs.setZooKeepBookFilePath(Paths.get(\"zookeepbook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setZooKeepBookFilePath(Path zooKeepBookFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void addAnimal(Animal animal) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setZooKeepBook(ReadOnlyZooKeepBook newData) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            return TypicalAnimals.getTypicalZooKeepBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void deleteAnimal(Animal target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public ObservableList\u003cAnimal\u003e getFilteredAnimalList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void updateFilteredAnimalList(Predicate\u003cAnimal\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private class JsonZooKeepBookStorageStub extends JsonZooKeepBookStorage {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public JsonZooKeepBookStorageStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        public void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook, Path filePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 6,
      "aizatazhar": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.logic.parser.SortCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "class SortCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute_sortAnimalNameSuccessful() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal ahmeng \u003d new AnimalBuilder().withName(\"Ahmeng\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal buttercup \u003d new AnimalBuilder().withName(\"Buttercup\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal coco \u003d new AnimalBuilder().withName(\"Coco\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ModelStubSortingAnimals modelStub \u003d new ModelStubSortingAnimals("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(buttercup, ahmeng, coco)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AnimalComparator animalNameComparator \u003d AnimalComparator.createAnimalNameComparator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(animalNameComparator).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(String.format(SortCommand.MESSAGE_SUCCESS + SortCommandParser.NAME_CATEGORY),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(Arrays.asList(ahmeng, buttercup, coco), modelStub.animals);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute_sortAnimalIdSuccessful() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal ahmeng \u003d new AnimalBuilder().withId(\"121\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal buttercup \u003d new AnimalBuilder().withId(\"122\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal coco \u003d new AnimalBuilder().withId(\"123\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ModelStubSortingAnimals modelStub \u003d new ModelStubSortingAnimals("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(buttercup, ahmeng, coco)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AnimalComparator animalIdComparator \u003d AnimalComparator.createAnimalIdComparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(animalIdComparator).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(String.format(SortCommand.MESSAGE_SUCCESS + SortCommandParser.ID_CATEGORY),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(Arrays.asList(ahmeng, buttercup, coco), modelStub.animals);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute_sortAnimalFeedTimeSuccessful() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal ahmeng \u003d new AnimalBuilder().withFeedTimes(\"1200\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal buttercup \u003d new AnimalBuilder().withFeedTimes(\"1230\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal coco \u003d new AnimalBuilder().withFeedTimes(\"1300\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ModelStubSortingAnimals modelStub \u003d new ModelStubSortingAnimals("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(buttercup, ahmeng, coco)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AnimalComparator animalFeedTimeComparator \u003d AnimalComparator.createAnimalFeedTimeComparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(animalFeedTimeComparator).execute(modelStub);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(String.format(SortCommand.MESSAGE_SUCCESS + SortCommandParser.FEEDTIME_CATEGORY),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(Arrays.asList(ahmeng, buttercup, coco), modelStub.animals);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute_sortAnimalNoFeedTimeSuccessful() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal ahmeng \u003d new AnimalBuilder().withFeedTimes().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal buttercup \u003d new AnimalBuilder().withFeedTimes().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal coco \u003d new AnimalBuilder().withFeedTimes(\"1300\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal nemo \u003d new AnimalBuilder().withFeedTimes().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ModelStubSortingAnimals modelStub \u003d new ModelStubSortingAnimals("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(buttercup, coco, ahmeng, nemo)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        AnimalComparator animalFeedTimeComparator \u003d AnimalComparator.createAnimalFeedTimeComparator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(animalFeedTimeComparator).execute(modelStub);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(String.format(SortCommand.MESSAGE_SUCCESS + SortCommandParser.FEEDTIME_CATEGORY),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(Arrays.asList(coco, buttercup, ahmeng, nemo), modelStub.animals);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        SortCommand sortByNameCommand \u003d new SortCommand(AnimalComparator.createAnimalNameComparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        SortCommand sortByIdCommand \u003d new SortCommand(AnimalComparator.createAnimalIdComparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(sortByNameCommand.equals(sortByNameCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // same command keyword -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        SortCommand sortByNameCommandCopy \u003d new SortCommand(AnimalComparator.createAnimalNameComparator());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(sortByNameCommand.equals(sortByNameCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(sortByNameCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(sortByNameCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // different command keyword -\u003e return false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(sortByNameCommand.equals(sortByIdCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void setZooKeepBookFilePath(Path zooKeepBookFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void addAnimal(Animal animal) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void setZooKeepBook(ReadOnlyZooKeepBook newData) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void deleteAnimal(Animal target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public ObservableList\u003cAnimal\u003e getFilteredAnimalList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void updateFilteredAnimalList(Predicate\u003cAnimal\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * A Model stub that always sorts a list of animals"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private class ModelStubSortingAnimals extends ModelStub {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        private final List\u003cAnimal\u003e animals;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ModelStubSortingAnimals(List\u003cAnimal\u003e animals) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            requireNonNull(animals);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            this.animals \u003d animals;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            animals.sort(animalComparator.getAnimalComparator());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 211
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.HistoryStack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_undoSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook bookA \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        bookA.addAnimal(new AnimalBuilder().withName(\"Bob\").build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook bookB \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        bookB.addAnimal(new AnimalBuilder().withName(\"Bob\").build());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        bookB.addAnimal(new AnimalBuilder().withName(\"Tom\").withId(\"1234\").build());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(bookA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(bookB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        CommandResult commandResult \u003d new UndoCommand().execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(UndoCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.getHistorySize(), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_noUndoAvailable_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(CommandException.class, UndoCommand.MESSAGE_NO_UNDO, () -\u003e undoCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        book.addAnimal(new AnimalBuilder().withName(\"Bob\").build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(book);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(undoCommand.equals(undoCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UndoCommand undoCommandCopy \u003d new UndoCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(undoCommand.equals(undoCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertFalse(undoCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertFalse(undoCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        private ZooKeepBook zooKeepBook \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public Path getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void setZooKeepBookFilePath(Path zooKeepBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void addAnimal(Animal animal) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void setZooKeepBook(ReadOnlyZooKeepBook zooKeepBook) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            this.zooKeepBook.resetData(zooKeepBook);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public ReadOnlyZooKeepBook getZooKeepBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public boolean hasAnimal(Animal animal) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void deleteAnimal(Animal target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void setAnimal(Animal target, Animal editedAnimal) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        public void sortAnimals(AnimalComparator animalComparator) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public ObservableList\u003cAnimal\u003e getFilteredAnimalList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public void updateFilteredAnimalList(Predicate\u003cAnimal\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "JunCheng98": 1,
      "m0nggh": 6,
      "lamlaaaam": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_ARCHIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_BAILEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ID_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEDICAL_CONDITION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPECIES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICAL_CONDITION_DESC_ARTHRITIS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICAL_CONDITION_DESC_OBESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ARCHIE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BAILEY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_ARCHIE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_BAILEY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BAILEY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_OBESE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BAILEY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.ARCHIE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.BAILEY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal expectedAnimal \u003d new AnimalBuilder(BAILEY).withMedicalConditions(VALID_MEDICAL_CONDITION_OBESE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BAILEY + ID_DESC_BAILEY"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + SPECIES_DESC_BAILEY + MEDICAL_CONDITION_DESC_OBESE, new AddCommand(expectedAnimal));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ARCHIE + NAME_DESC_BAILEY + ID_DESC_BAILEY"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + SPECIES_DESC_BAILEY + MEDICAL_CONDITION_DESC_OBESE, new AddCommand(expectedAnimal));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // multiple ids - last id accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BAILEY + ID_DESC_ARCHIE + ID_DESC_BAILEY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + SPECIES_DESC_BAILEY + MEDICAL_CONDITION_DESC_OBESE, new AddCommand(expectedAnimal));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // multiple species - last species accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BAILEY + ID_DESC_BAILEY + SPECIES_DESC_ARCHIE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + SPECIES_DESC_BAILEY + MEDICAL_CONDITION_DESC_OBESE, new AddCommand(expectedAnimal));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // multiple medicalConditions - all accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal expectedAnimalMultipleMedicalConditions \u003d new AnimalBuilder(BAILEY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_OBESE, VALID_MEDICAL_CONDITION_ARTHRITIS)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BAILEY + ID_DESC_BAILEY + SPECIES_DESC_BAILEY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + MEDICAL_CONDITION_DESC_ARTHRITIS + MEDICAL_CONDITION_DESC_OBESE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new AddCommand(expectedAnimalMultipleMedicalConditions));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // zero medicalConditions"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal expectedAnimal \u003d new AnimalBuilder(ARCHIE).withMedicalConditions().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ARCHIE + ID_DESC_ARCHIE + SPECIES_DESC_ARCHIE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new AddCommand(expectedAnimal));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BAILEY + ID_DESC_BAILEY + SPECIES_DESC_BAILEY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // missing id prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BAILEY + VALID_ID_BAILEY + SPECIES_DESC_BAILEY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // missing species prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BAILEY + ID_DESC_BAILEY + VALID_SPECIES_BAILEY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BAILEY + VALID_ID_BAILEY + VALID_SPECIES_BAILEY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ID_DESC_BAILEY + SPECIES_DESC_BAILEY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + MEDICAL_CONDITION_DESC_ARTHRITIS + MEDICAL_CONDITION_DESC_OBESE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // invalid id"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BAILEY + INVALID_ID_DESC + SPECIES_DESC_BAILEY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + MEDICAL_CONDITION_DESC_ARTHRITIS + MEDICAL_CONDITION_DESC_OBESE, Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // invalid species"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BAILEY + ID_DESC_BAILEY + INVALID_SPECIES_DESC"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + MEDICAL_CONDITION_DESC_ARTHRITIS + MEDICAL_CONDITION_DESC_OBESE, Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // invalid medicalCondition"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BAILEY + ID_DESC_BAILEY + SPECIES_DESC_BAILEY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + INVALID_MEDICAL_CONDITION_DESC + VALID_MEDICAL_CONDITION_OBESE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ID_DESC_BAILEY + INVALID_SPECIES_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BAILEY + ID_DESC_BAILEY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + SPECIES_DESC_BAILEY + MEDICAL_CONDITION_DESC_ARTHRITIS + MEDICAL_CONDITION_DESC_OBESE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 1,
      "m0nggh": 50,
      "aizatazhar": 3,
      "-": 61,
      "lamlaaaam": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String argsString \u003d \"  some random string /t medicalCondition with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assertParseSuccess(parser, \"1234\", new DeleteCommand(new Id(\"1234\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "m0nggh": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_ARCHIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_BAILEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ID_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEDICAL_CONDITION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPECIES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICAL_CONDITION_DESC_ARTHRITIS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICAL_CONDITION_DESC_OBESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ARCHIE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_ARCHIE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_BAILEY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_ARCHIE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BAILEY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_OBESE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ARCHIE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_ARCHIE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ANIMAL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ANIMAL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAnimalDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.EditAnimalDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final String MEDICAL_CONDITION_EMPTY \u003d \" \" + PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_ARCHIE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_ARCHIE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_ARCHIE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertParseFailure(parser, \"1 k/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ID_DESC, Id.MESSAGE_CONSTRAINTS); // invalid id"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SPECIES_DESC, Species.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MEDICAL_CONDITION_DESC,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                MedicalCondition.MESSAGE_CONSTRAINTS); // invalid medicalCondition"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // invalid id followed by valid species"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ID_DESC + SPECIES_DESC_ARCHIE, Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // valid id followed by invalid id. The test case for invalid id followed by valid id"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"1\" + ID_DESC_BAILEY + INVALID_ID_DESC, Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // while parsing {@code PREFIX_MEDICAL_CONDITION} alone will reset the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // medicalConditions of the {@code Animal} being edited,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // parsing it together with a valid medicalCondition results in error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEDICAL_CONDITION_DESC_OBESE + MEDICAL_CONDITION_DESC_ARTHRITIS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                + MEDICAL_CONDITION_EMPTY, MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEDICAL_CONDITION_DESC_OBESE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + MEDICAL_CONDITION_EMPTY + MEDICAL_CONDITION_DESC_ARTHRITIS, MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEDICAL_CONDITION_EMPTY + MEDICAL_CONDITION_DESC_OBESE"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + MEDICAL_CONDITION_DESC_ARTHRITIS, MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_SPECIES_DESC + VALID_ID_ARCHIE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ANIMAL;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ID_DESC_BAILEY + MEDICAL_CONDITION_DESC_ARTHRITIS"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + SPECIES_DESC_ARCHIE + NAME_DESC_ARCHIE + MEDICAL_CONDITION_DESC_OBESE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withName(VALID_NAME_ARCHIE)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withId(VALID_ID_BAILEY).withSpecies(VALID_SPECIES_ARCHIE)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS, VALID_MEDICAL_CONDITION_OBESE).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ID_DESC_BAILEY + SPECIES_DESC_ARCHIE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withId(VALID_ID_BAILEY)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withSpecies(VALID_SPECIES_ARCHIE).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ANIMAL;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_ARCHIE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withName(VALID_NAME_ARCHIE).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // id"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ID_DESC_ARCHIE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        descriptor \u003d new EditAnimalDescriptorBuilder().withId(VALID_ID_ARCHIE).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // species"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SPECIES_DESC_ARCHIE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        descriptor \u003d new EditAnimalDescriptorBuilder().withSpecies(VALID_SPECIES_ARCHIE).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // medicalConditions"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MEDICAL_CONDITION_DESC_OBESE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        descriptor \u003d new EditAnimalDescriptorBuilder().withMedicalConditions(VALID_MEDICAL_CONDITION_OBESE).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ID_DESC_ARCHIE + SPECIES_DESC_ARCHIE"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + MEDICAL_CONDITION_DESC_OBESE + ID_DESC_ARCHIE + SPECIES_DESC_ARCHIE + MEDICAL_CONDITION_DESC_OBESE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + ID_DESC_BAILEY + SPECIES_DESC_BAILEY + MEDICAL_CONDITION_DESC_ARTHRITIS;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withId(VALID_ID_BAILEY)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withSpecies(VALID_SPECIES_BAILEY).withMedicalConditions(VALID_MEDICAL_CONDITION_OBESE,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                        VALID_MEDICAL_CONDITION_ARTHRITIS)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ID_DESC + ID_DESC_BAILEY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withId(VALID_ID_BAILEY).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_ID_DESC + SPECIES_DESC_BAILEY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + ID_DESC_BAILEY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        descriptor \u003d new EditAnimalDescriptorBuilder().withId(VALID_ID_BAILEY)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withSpecies(VALID_SPECIES_BAILEY).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parse_resetMedicalConditions_success() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ANIMAL;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEDICAL_CONDITION_EMPTY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder().withMedicalConditions().build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 2,
      "m0nggh": 56,
      "aizatazhar": 2,
      "-": 114,
      "lamlaaaam": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                new FindCommand(new AnimalContainsKeywordsPredicate(Arrays.asList(\"Ahmeng\", \"Buttercup\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, \"Ahmeng Buttercup\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, \" \\n Ahmeng \\n \\t Buttercup  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 2,
      "m0nggh": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private static final String INVALID_ID \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final String INVALID_SPECIES \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final String INVALID_MEDICAL_CONDITION \u003d \"#dead\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final String VALID_SPECIES \u003d \"Cat\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private static final String VALID_ID \u003d \"123456\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final String VALID_MEDICAL_CONDITION_1 \u003d \"Healthy\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final String VALID_MEDICAL_CONDITION_2 \u003d \"Drowsy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(INDEX_FIRST_ANIMAL, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(INDEX_FIRST_ANIMAL, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void parseId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseId((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void parseId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseId(INVALID_ID));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void parseId_validValueWithoutWhitespace_returnsId() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        Id expectedId \u003d new Id(VALID_ID);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseId(VALID_ID));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void parseId_validValueWithWhitespace_returnsTrimmedId() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        String idWithWhitespace \u003d WHITESPACE + VALID_ID + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        Id expectedId \u003d new Id(VALID_ID);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseId(idWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void parseSpecies_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSpecies((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void parseSpecies_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSpecies(INVALID_SPECIES));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void parseSpecies_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Species expectedSpecies \u003d new Species(VALID_SPECIES);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(expectedSpecies, ParserUtil.parseSpecies(VALID_SPECIES));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void parseSpecies_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String speciesWithWhiteSpace \u003d WHITESPACE + VALID_SPECIES + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Species expectedSpecies \u003d new Species(VALID_SPECIES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(expectedSpecies, ParserUtil.parseSpecies(speciesWithWhiteSpace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalCondition_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicalCondition(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalCondition_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicalCondition(INVALID_MEDICAL_CONDITION));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalCondition_validValueWithoutWhitespace_returnsMedicalCondition() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        MedicalCondition expectedMedicalCondition \u003d new MedicalCondition(VALID_MEDICAL_CONDITION_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedMedicalCondition, ParserUtil.parseMedicalCondition(VALID_MEDICAL_CONDITION_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalCondition_validValueWithWhitespace_returnsTrimmedMedicalCondition() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String medicalConditionWithWhitespace \u003d WHITESPACE + VALID_MEDICAL_CONDITION_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        MedicalCondition expectedMedicalCondition \u003d new MedicalCondition(VALID_MEDICAL_CONDITION_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedMedicalCondition, ParserUtil.parseMedicalCondition(medicalConditionWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalConditions_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicalConditions(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalConditions_collectionWithInvalidMedicalConditions_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicalConditions(Arrays"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .asList(VALID_MEDICAL_CONDITION_1, INVALID_MEDICAL_CONDITION)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalConditions_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(ParserUtil.parseMedicalConditions(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseMedicalConditions_collectionWithValidMedicalConditions_returnsMedicalConditionSet()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Set\u003cMedicalCondition\u003e actualMedicalConditionSet \u003d ParserUtil.parseMedicalConditions(Arrays"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .asList(VALID_MEDICAL_CONDITION_1, VALID_MEDICAL_CONDITION_2));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Set\u003cMedicalCondition\u003e expectedMedicalConditionSet \u003d new HashSet\u003cMedicalCondition\u003e(Arrays.asList("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                new MedicalCondition(VALID_MEDICAL_CONDITION_1), new MedicalCondition(VALID_MEDICAL_CONDITION_2)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedMedicalConditionSet, actualMedicalConditionSet);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 13,
      "aizatazhar": 13,
      "-": 113,
      "lamlaaaam": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SnapCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.logic.commands.SnapCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class SnapCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private SnapCommandParser parser \u003d new SnapCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Path makePath(String fileName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return Path.of(\"data\", fileName + SnapCommand.FILE_FORMAT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void parse_validFileName_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String validFileName1 \u003d \"zookeep_19-10-2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseSuccess(parser, validFileName1, new SnapCommand(makePath(validFileName1), validFileName1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String validFileName2 \u003d \"_\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseSuccess(parser, validFileName2, new SnapCommand(makePath(validFileName2), validFileName2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String validFileName3 \u003d \"-\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseSuccess(parser, validFileName3, new SnapCommand(makePath(validFileName3), validFileName3));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String validFileNameLength \u003d \"x\".repeat(100);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseSuccess(parser, validFileNameLength,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                new SnapCommand(makePath(validFileNameLength), validFileNameLength));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void parse_invalidFileName_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String expectedMessageEmptyString \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SnapCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String expectedMessageConstraints \u003d SnapCommand.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String fileNameIsEmpty \u003d \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseFailure(parser, fileNameIsEmpty, expectedMessageEmptyString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String fileNameContainsWhitespace \u003d \"zookeep 19-10-2020\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseFailure(parser, fileNameContainsWhitespace, expectedMessageConstraints);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String fileNameContainsNonAlphanumeric \u003d \"19.10.2020\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseFailure(parser, fileNameContainsNonAlphanumeric, expectedMessageConstraints);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String fileNameLongerThan100Characters \u003d \"x\".repeat(101);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertParseFailure(parser, fileNameLongerThan100Characters, expectedMessageConstraints);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "class SortCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseFailure(parser, \"  \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void parse_validArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                new SortCommand(AnimalComparator.createAnimalNameComparator());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, \"name\", expectedSortCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // multiple whitespaces before and after keyword"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertParseSuccess(parser, \" \\t name \\t\", expectedSortCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ZooKeepBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ANIMAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAnimalDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.EditAnimalDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class ZooKeepBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private final ZooKeepBookParser parser \u003d new ZooKeepBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal animal \u003d new AnimalBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AnimalUtil.getAddCommand(animal));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(new AddCommand(animal), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + \"1234\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assertEquals(new DeleteCommand(new Id(\"1234\")), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal animal \u003d new AnimalBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        EditAnimalDescriptor descriptor \u003d new EditAnimalDescriptorBuilder(animal).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                + INDEX_FIRST_ANIMAL.getOneBased() + \" \" + AnimalUtil.getEditAnimalDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ANIMAL, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(new FindCommand(new AnimalContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        SortCommand command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                SortCommand.COMMAND_WORD + \" \" + \"name\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(new SortCommand(AnimalComparator.createAnimalNameComparator()), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 2,
      "JunCheng98": 2,
      "m0nggh": 17,
      "aizatazhar": 2,
      "-": 82,
      "lamlaaaam": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/HistoryStackTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class HistoryStackTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_get_historyStack() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(historyStack, HistoryStack.getHistoryStack());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_addToHistory_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(book);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.toString(), \"Undo stack: [0 animals]\" + \"\\n\" + \"Redo stack: []\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_addToHistory_duplicate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook bookA \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook bookB \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(bookA);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(bookB);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.toString(), \"Undo stack: [0 animals]\" + \"\\n\" + \"Redo stack: []\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_removeRecentHistory() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(book);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.removeRecentHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.toString(), \"Undo stack: []\" + \"\\n\" + \"Redo stack: []\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_viewRecentHistory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(book);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(historyStack.viewRecentHistory().toString(), \"0 animals\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_getHistorySize() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.addToHistory(book);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.getHistorySize(), 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void execute_clearHistory() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.toString(), \"Undo stack: []\" + \"\\n\" + \"Redo stack: []\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_addToRedo_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToRedo(book);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.toString(), \"Undo stack: []\" + \"\\n\" + \"Redo stack: [0 animals]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_removeRecentRedo() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToRedo(book);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.removeRecentRedo();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.toString(), \"Undo stack: []\" + \"\\n\" + \"Redo stack: []\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_viewRecentRedo() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToRedo(book);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.viewRecentRedo().toString(), \"0 animals\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_getRedoSize() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.addToRedo(book);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.getRedoSize(), 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void execute_clearRedo() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        ZooKeepBook book \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        HistoryStack historyStack \u003d HistoryStack.getHistoryStack();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearHistory();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        historyStack.clearRedo();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertEquals(historyStack.toString(), \"Undo stack: []\" + \"\\n\" + \"Redo stack: []\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 62,
      "lamlaaaam": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ANIMALS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.AHMENG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.BUTTERCUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import seedu.address.model.animal.AnimalComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import seedu.address.model.animal.AnimalContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.testutil.ZooKeepBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(new ZooKeepBook(), new ZooKeepBook(modelManager.getZooKeepBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        userPrefs.setZooKeepBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        userPrefs.setZooKeepBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void setZooKeepBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setZooKeepBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void setZooKeepBookFilePath_validPath_setsZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        modelManager.setZooKeepBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(path, modelManager.getZooKeepBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void hasAnimal_nullAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAnimal(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void hasAnimal_animalNotInZooKeepBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(modelManager.hasAnimal(AHMENG));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void hasAnimal_animalInZooKeepBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        modelManager.addAnimal(AHMENG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(modelManager.hasAnimal(AHMENG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void getFilteredAnimalList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAnimalList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ZooKeepBook zooKeepBook \u003d new ZooKeepBookBuilder().withAnimal(AHMENG).withAnimal(BUTTERCUP).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook differentZooKeepBook \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        modelManager \u003d new ModelManager(zooKeepBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(zooKeepBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // different zooKeepBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentZooKeepBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] keywords \u003d AHMENG.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        modelManager.updateFilteredAnimalList(new AnimalContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(zooKeepBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // different after sorting by feedtimes -\u003e return false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        modelManager.sortAnimals(AnimalComparator.createAnimalFeedTimeComparator());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(zooKeepBook, userPrefs)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        modelManager.updateFilteredAnimalList(PREDICATE_SHOW_ALL_ANIMALS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        differentUserPrefs.setZooKeepBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(zooKeepBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 2,
      "m0nggh": 11,
      "aizatazhar": 19,
      "-": 99,
      "lamlaaaam": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void setZooKeepBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setZooKeepBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ZooKeepBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.AHMENG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.exceptions.DuplicateAnimalException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class ZooKeepBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private final ZooKeepBook zooKeepBook \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(Collections.emptyList(), zooKeepBook.getAnimalList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e zooKeepBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void resetData_withValidReadOnlyZooKeepBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook newData \u003d getTypicalZooKeepBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(newData, zooKeepBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void resetData_withDuplicateAnimals_throwsDuplicateAnimalException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // Two animals with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal editedAhmeng \u003d new AnimalBuilder(AHMENG).withSpecies(VALID_SPECIES_BAILEY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        List\u003cAnimal\u003e newAnimals \u003d Arrays.asList(AHMENG, editedAhmeng);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBookStub newData \u003d new ZooKeepBookStub(newAnimals);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(DuplicateAnimalException.class, () -\u003e zooKeepBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void hasAnimal_nullAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e zooKeepBook.hasAnimal(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void hasAnimal_animalNotInZooKeepBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(zooKeepBook.hasAnimal(AHMENG));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void hasAnimal_animalInZooKeepBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        zooKeepBook.addAnimal(AHMENG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(zooKeepBook.hasAnimal(AHMENG));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void hasAnimal_animalWithSameIdentityFieldsInZooKeepBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        zooKeepBook.addAnimal(AHMENG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal editedAhmeng \u003d new AnimalBuilder(AHMENG).withSpecies(VALID_SPECIES_BAILEY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(zooKeepBook.hasAnimal(editedAhmeng));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void getAnimalList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e zooKeepBook.getAnimalList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * A stub ReadOnlyZooKeepBook whose animals list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static class ZooKeepBookStub implements ReadOnlyZooKeepBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        private final ObservableList\u003cAnimal\u003e animals \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBookStub(Collection\u003cAnimal\u003e animals) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            this.animals.setAll(animals);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        public ObservableList\u003cAnimal\u003e getAnimalList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return animals;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 13,
      "aizatazhar": 19,
      "-": 61,
      "lamlaaaam": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/animal/AnimalContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "public class AnimalContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate firstPredicate \u003d new AnimalContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                new AnimalContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                new AnimalContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different animal -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void test_animalContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate predicate \u003d new AnimalContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Collections.singletonList(\"Ahmeng\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(predicate.test(new AnimalBuilder().withName(\"Ahmeng Buttercup\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        predicate \u003d new AnimalContainsKeywordsPredicate(Arrays.asList(\"Ahmeng\", \"Buttercup\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(predicate.test(new AnimalBuilder().withName(\"Ahmeng Buttercup\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // Multiple keywords which match in different fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        predicate \u003d new AnimalContainsKeywordsPredicate(Arrays.asList(\"000123\", \"Reticulated\", \"Python\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertTrue(predicate.test(new AnimalBuilder().withName(\"Buttercup\").withId(\"000123\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "                .withSpecies(\"Reticulated Python\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        predicate \u003d new AnimalContainsKeywordsPredicate(Arrays.asList(\"Buttercup\", \"Coco\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(predicate.test(new AnimalBuilder().withName(\"Buttercup Coco\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        predicate \u003d new AnimalContainsKeywordsPredicate(Arrays.asList(\"ahMeNg\", \"buTTercup\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(predicate.test(new AnimalBuilder().withName(\"Ahmeng Buttercup\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        AnimalContainsKeywordsPredicate predicate \u003d new AnimalContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(predicate.test(new AnimalBuilder().withName(\"Ahmeng\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        predicate \u003d new AnimalContainsKeywordsPredicate(Arrays.asList(\"Coco\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(predicate.test(new AnimalBuilder().withName(\"Ahmeng Buttercup\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // Multiple non-matching keywords"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        predicate \u003d new AnimalContainsKeywordsPredicate(Arrays.asList(\"0000123\", \"Reti\", \"Anaconda\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(predicate.test(new AnimalBuilder().withName(\"Buttercup\").withId(\"000123\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withSpecies(\"Reticulated Python\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 20,
      "m0nggh": 9,
      "-": 51,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/animal/AnimalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BAILEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BAILEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.AHMENG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.BAILEY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class AnimalTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal animal \u003d new AnimalBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e animal.getMedicalConditions().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void isSameAnimal() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(AHMENG.isSameAnimal(AHMENG));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.isSameAnimal(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // different ID and species -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal editedAhmeng \u003d new AnimalBuilder(AHMENG).withId(VALID_ID_BAILEY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withSpecies(VALID_SPECIES_BAILEY).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.isSameAnimal(editedAhmeng));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedAhmeng \u003d new AnimalBuilder(AHMENG).withName(VALID_NAME_BAILEY).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        assertTrue(AHMENG.isSameAnimal(editedAhmeng));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // same name, same ID, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedAhmeng \u003d new AnimalBuilder(AHMENG).withSpecies(VALID_SPECIES_BAILEY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(AHMENG.isSameAnimal(editedAhmeng));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // same name, different ID, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedAhmeng \u003d new AnimalBuilder(AHMENG).withId(VALID_ID_BAILEY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.isSameAnimal(editedAhmeng));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal ahmengCopy \u003d new AnimalBuilder(AHMENG).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(AHMENG.equals(ahmengCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(AHMENG.equals(AHMENG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different animal -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.equals(BAILEY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal editedAhmeng \u003d new AnimalBuilder(AHMENG).withName(VALID_NAME_BAILEY).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.equals(editedAhmeng));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        // different ID -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedAhmeng \u003d new AnimalBuilder(AHMENG).withId(VALID_ID_BAILEY).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.equals(editedAhmeng));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // different species -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedAhmeng \u003d new AnimalBuilder(AHMENG).withSpecies(VALID_SPECIES_BAILEY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.equals(editedAhmeng));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // different medicalConditions -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        editedAhmeng \u003d new AnimalBuilder(AHMENG).withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(AHMENG.equals(editedAhmeng));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 1,
      "JunCheng98": 2,
      "m0nggh": 35,
      "-": 40,
      "lamlaaaam": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/animal/IdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "public class IdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Id(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void constructor_invalidId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String invalidId \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Id(invalidId));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void isValidId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // null id number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Id.isValidId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // invalid id numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertFalse(Id.isValidId(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertFalse(Id.isValidId(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertFalse(Id.isValidId(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertFalse(Id.isValidId(\"id\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertFalse(Id.isValidId(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertFalse(Id.isValidId(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // valid id numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertTrue(Id.isValidId(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        assertTrue(Id.isValidId(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(Id.isValidId(\"124293842033123\")); // long id numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 30,
      "lamlaaaam": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/animal/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/animal/SpeciesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class SpeciesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Species(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void constructor_invalidSpecies_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String invalidSpecies \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Species(invalidSpecies));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void isValidSpecies() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // null species"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Species.isValidSpecies(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // invalid species"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(Species.isValidSpecies(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // valid species"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"Ailuropoda melanoleuca\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"Parastratiosphecomyia stratiosphecomyioides\")); // long species"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 35,
      "lamlaaaam": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/animal/UniqueAnimalListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.animal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.AHMENG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.BAILEY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.exceptions.AnimalNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.exceptions.DuplicateAnimalException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.AnimalBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class UniqueAnimalListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final UniqueAnimalList uniqueAnimalList \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void contains_nullAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnimalList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void contains_animalNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertFalse(uniqueAnimalList.contains(AHMENG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void contains_animalInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(uniqueAnimalList.contains(AHMENG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void contains_animalWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal editedAhmeng \u003d new AnimalBuilder(AHMENG).withSpecies(VALID_SPECIES_BAILEY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertTrue(uniqueAnimalList.contains(editedAhmeng));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void add_nullAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnimalList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void add_duplicateAnimal_throwsDuplicateAnimalException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertThrows(DuplicateAnimalException.class, () -\u003e uniqueAnimalList.add(AHMENG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal_nullTargetAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnimalList.setAnimal(null, AHMENG));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal_nullEditedAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnimalList.setAnimal(AHMENG, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal_targetAnimalNotInList_throwsAnimalNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertThrows(AnimalNotFoundException.class, () -\u003e uniqueAnimalList.setAnimal(AHMENG, AHMENG));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal_editedAnimalIsSameAnimal_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.setAnimal(AHMENG, AHMENG);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UniqueAnimalList expectedUniqueAnimalList \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        expectedUniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedUniqueAnimalList, uniqueAnimalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal_editedAnimalHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Animal editedAhmeng \u003d new AnimalBuilder(AHMENG).withSpecies(VALID_SPECIES_BAILEY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.setAnimal(AHMENG, editedAhmeng);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UniqueAnimalList expectedUniqueAnimalList \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        expectedUniqueAnimalList.add(editedAhmeng);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedUniqueAnimalList, uniqueAnimalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal_editedAnimalHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.setAnimal(AHMENG, BAILEY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UniqueAnimalList expectedUniqueAnimalList \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        expectedUniqueAnimalList.add(BAILEY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedUniqueAnimalList, uniqueAnimalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimal_editedAnimalHasNonUniqueIdentity_throwsDuplicateAnimalException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(BAILEY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertThrows(DuplicateAnimalException.class, () -\u003e uniqueAnimalList.setAnimal(AHMENG, BAILEY));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void remove_nullAnimal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnimalList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void remove_animalDoesNotExist_throwsAnimalNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertThrows(AnimalNotFoundException.class, () -\u003e uniqueAnimalList.remove(AHMENG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void remove_existingAnimal_removesAnimal() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.remove(AHMENG);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UniqueAnimalList expectedUniqueAnimalList \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedUniqueAnimalList, uniqueAnimalList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals_nullUniqueAnimalList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnimalList.setAnimals((UniqueAnimalList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals_uniqueAnimalList_replacesOwnListWithProvidedUniqueAnimalList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UniqueAnimalList expectedUniqueAnimalList \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        expectedUniqueAnimalList.add(BAILEY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        uniqueAnimalList.setAnimals(expectedUniqueAnimalList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedUniqueAnimalList, uniqueAnimalList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnimalList.setAnimals((List\u003cAnimal\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        uniqueAnimalList.add(AHMENG);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        List\u003cAnimal\u003e animalList \u003d Collections.singletonList(BAILEY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        uniqueAnimalList.setAnimals(animalList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        UniqueAnimalList expectedUniqueAnimalList \u003d new UniqueAnimalList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        expectedUniqueAnimalList.add(BAILEY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(expectedUniqueAnimalList, uniqueAnimalList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void setAnimals_listWithDuplicateAnimals_throwsDuplicateAnimalException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        List\u003cAnimal\u003e listWithDuplicateAnimals \u003d Arrays.asList(AHMENG, AHMENG);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(DuplicateAnimalException.class, () -\u003e uniqueAnimalList.setAnimals(listWithDuplicateAnimals));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            -\u003e uniqueAnimalList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 39,
      "lamlaaaam": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicalcondition/MedicalConditionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.medicalcondition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class MedicalConditionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MedicalCondition(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void constructor_invalidMedicalConditionName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String invalidMedicalConditionName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MedicalCondition(invalidMedicalConditionName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void isValidMedicalConditionName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        // null medicalCondition name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MedicalCondition.isValidMedicalConditionName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void sampleAnimalsExist() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Animal[] sampleAnimals \u003d SampleDataUtil.getSampleAnimals();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertTrue(sampleAnimals.length \u003e 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAnimalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAnimal.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.BUTTERCUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class JsonAdaptedAnimalTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    private static final String INVALID_ID \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final String INVALID_SPECIES \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final String INVALID_MEDICAL_CONDITION \u003d \"#dead\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String VALID_NAME \u003d BUTTERCUP.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String VALID_ID \u003d BUTTERCUP.getId().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String VALID_SPECIES \u003d BUTTERCUP.getSpecies().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private static final List\u003cJsonAdaptedMedicalCondition\u003e VALID_MEDICAL_CONDITIONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            BUTTERCUP.getMedicalConditions().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            .map(JsonAdaptedMedicalCondition::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private static final List\u003cJsonAdaptedFeedTime\u003e VALID_FEED_TIMES \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            BUTTERCUP.getFeedTimes().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            .map(JsonAdaptedFeedTime::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void toModelType_validAnimalDetails_returnsAnimal() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        JsonAdaptedAnimal animal \u003d new JsonAdaptedAnimal(BUTTERCUP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(BUTTERCUP, animal.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        JsonAdaptedAnimal animal \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                new JsonAdaptedAnimal(INVALID_NAME, VALID_ID, VALID_SPECIES, VALID_MEDICAL_CONDITIONS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                        VALID_FEED_TIMES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, animal::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        JsonAdaptedAnimal animal \u003d new JsonAdaptedAnimal(null, VALID_ID, VALID_SPECIES, VALID_MEDICAL_CONDITIONS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                VALID_FEED_TIMES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, animal::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "    public void toModelType_invalidId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        JsonAdaptedAnimal animal \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                new JsonAdaptedAnimal(VALID_NAME, INVALID_ID, VALID_SPECIES, VALID_MEDICAL_CONDITIONS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                        VALID_FEED_TIMES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        String expectedMessage \u003d Id.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, animal::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        JsonAdaptedAnimal animal \u003d new JsonAdaptedAnimal(VALID_NAME, null, VALID_SPECIES, VALID_MEDICAL_CONDITIONS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                VALID_FEED_TIMES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, animal::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void toModelType_invalidSpecies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        JsonAdaptedAnimal animal \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                new JsonAdaptedAnimal(VALID_NAME, VALID_ID, INVALID_SPECIES, VALID_MEDICAL_CONDITIONS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                        VALID_FEED_TIMES);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String expectedMessage \u003d Species.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, animal::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void toModelType_nullSpecies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        JsonAdaptedAnimal animal \u003d new JsonAdaptedAnimal(VALID_NAME, VALID_ID, null, VALID_MEDICAL_CONDITIONS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                VALID_FEED_TIMES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Species.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, animal::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void toModelType_invalidMedicalConditions_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        List\u003cJsonAdaptedMedicalCondition\u003e invalidMedicalConditions \u003d new ArrayList\u003c\u003e(VALID_MEDICAL_CONDITIONS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        invalidMedicalConditions.add(new JsonAdaptedMedicalCondition(INVALID_MEDICAL_CONDITION));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        JsonAdaptedAnimal animal \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                new JsonAdaptedAnimal(VALID_NAME, VALID_ID, VALID_SPECIES, invalidMedicalConditions, VALID_FEED_TIMES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertThrows(IllegalValueException.class, animal::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 17,
      "JunCheng98": 4,
      "m0nggh": 8,
      "aizatazhar": 5,
      "-": 46,
      "lamlaaaam": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableZooKeepBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.testutil.TypicalAnimals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class JsonSerializableZooKeepBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableZooKeepBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final Path TYPICAL_ANIMALS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAnimalsZooKeepBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final Path INVALID_ANIMAL_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAnimalZooKeepBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final Path DUPLICATE_ANIMAL_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateAnimalZooKeepBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void toModelType_typicalAnimalsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonSerializableZooKeepBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ANIMALS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                JsonSerializableZooKeepBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook zooKeepBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook typicalAnimalsZooKeepBook \u003d TypicalAnimals.getTypicalZooKeepBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(zooKeepBookFromFile, typicalAnimalsZooKeepBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void toModelType_invalidAnimalFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonSerializableZooKeepBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ANIMAL_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                JsonSerializableZooKeepBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void toModelType_duplicateAnimals_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonSerializableZooKeepBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ANIMAL_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                JsonSerializableZooKeepBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableZooKeepBook.MESSAGE_DUPLICATE_ANIMAL,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 16,
      "-": 27,
      "lamlaaaam": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        userPrefs.setZooKeepBookFilePath(Paths.get(\"zookeepbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonZooKeepBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.AHMENG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.JIAJIA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.KAIKAI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class JsonZooKeepBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonZooKeepBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void readZooKeepBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readZooKeepBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private java.util.Optional\u003cReadOnlyZooKeepBook\u003e readZooKeepBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return new JsonZooKeepBookStorage(Paths.get(filePath)).readZooKeepBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertFalse(readZooKeepBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readZooKeepBook(\"notJsonFormatZooKeepBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void readZooKeepBook_invalidAnimalZooKeepBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readZooKeepBook(\"invalidAnimalZooKeepBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void readZooKeepBook_invalidAndValidAnimalZooKeepBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readZooKeepBook(\"invalidAndValidAnimalZooKeepBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void readAndSaveZooKeepBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempZooKeepBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook original \u003d getTypicalZooKeepBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonZooKeepBookStorage jsonZooKeepBookStorage \u003d new JsonZooKeepBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        jsonZooKeepBookStorage.saveZooKeepBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ReadOnlyZooKeepBook readBack \u003d jsonZooKeepBookStorage.readZooKeepBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(original, new ZooKeepBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        original.addAnimal(JIAJIA);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        original.removeAnimal(AHMENG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        jsonZooKeepBookStorage.saveZooKeepBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        readBack \u003d jsonZooKeepBookStorage.readZooKeepBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(original, new ZooKeepBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        original.addAnimal(KAIKAI);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        jsonZooKeepBookStorage.saveZooKeepBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        readBack \u003d jsonZooKeepBookStorage.readZooKeepBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(original, new ZooKeepBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void saveZooKeepBook_nullZooKeepBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveZooKeepBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Saves {@code zooKeepBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private void saveZooKeepBook(ReadOnlyZooKeepBook zooKeepBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            new JsonZooKeepBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "                    .saveZooKeepBook(zooKeepBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void saveZooKeepBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveZooKeepBook(new ZooKeepBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 6,
      "aizatazhar": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.testutil.TypicalAnimals.getTypicalZooKeepBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ReadOnlyZooKeepBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        JsonZooKeepBookStorage zooKeepBookStorage \u003d new JsonZooKeepBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        storageManager \u003d new StorageManager(zooKeepBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void zooKeepBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "         * {@link JsonZooKeepBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonZooKeepBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook original \u003d getTypicalZooKeepBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        storageManager.saveZooKeepBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ReadOnlyZooKeepBook retrieved \u003d storageManager.readZooKeepBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertEquals(original, new ZooKeepBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public void getZooKeepBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        assertNotNull(storageManager.getZooKeepBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aizatazhar": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AnimalBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTimeComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * A utility class to help with building Animal objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class AnimalBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Ah Meng\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"199\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final String DEFAULT_SPECIES \u003d \"Panthera leo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Species species;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Set\u003cMedicalCondition\u003e medicalConditions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    private Set\u003cFeedTime\u003e feedTimes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates a {@code AnimalBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        id \u003d new Id(DEFAULT_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        species \u003d new Species(DEFAULT_SPECIES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        medicalConditions \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        feedTimes \u003d new TreeSet\u003c\u003e(new FeedTimeComparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Initializes the AnimalBuilder with the data of {@code animalToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalBuilder(Animal animalToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        name \u003d animalToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        id \u003d animalToCopy.getId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        species \u003d animalToCopy.getSpecies();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        medicalConditions \u003d new HashSet\u003c\u003e(animalToCopy.getMedicalConditions());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        feedTimes \u003d new TreeSet\u003c\u003e(animalToCopy.getFeedTimes());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Sets the {@code Name} of the {@code Animal} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses the {@code medicalConditions} into a {@code Set\u003cMedicalCondition\u003e} and"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * set it to the {@code Animal} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalBuilder withMedicalConditions(String ... medicalConditions) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.medicalConditions \u003d SampleDataUtil.getMedicalConditionSet(medicalConditions);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Parses the {@code feedTimes} into a {@code Set\u003cFeedTime\u003e} and"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * set it to the {@code Animal} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public AnimalBuilder withFeedTimes(String ... feedTimes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        this.feedTimes \u003d SampleDataUtil.getFeedTimeSet(feedTimes);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Sets the {@code Species} of the {@code Animal} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalBuilder withSpecies(String species) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.species \u003d new Species(species);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Sets the {@code Id} of the {@code Animal} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public AnimalBuilder withId(String id) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.id \u003d new Id(id);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Animal build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return new Animal(name, id, species, medicalConditions, feedTimes);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 17,
      "m0nggh": 1,
      "aizatazhar": 2,
      "lamlaaaam": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AnimalUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAnimalDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * A utility class for Animal."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class AnimalUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns an add command string for adding the {@code animal}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static String getAddCommand(Animal animal) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getAnimalDetails(animal);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the part of command string for the given {@code animal}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static String getAnimalDetails(Animal animal) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        sb.append(PREFIX_NAME + animal.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        sb.append(PREFIX_ID + animal.getId().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        sb.append(PREFIX_SPECIES + animal.getSpecies().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        animal.getMedicalConditions().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            s -\u003e sb.append(PREFIX_MEDICAL_CONDITION + s.medicalConditionName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the part of command string for the given {@code EditAnimalDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static String getEditAnimalDescriptorDetails(EditAnimalDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": "        descriptor.getId().ifPresent(id -\u003e sb.append(PREFIX_ID).append(id.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        descriptor.getSpecies().ifPresent(species -\u003e sb.append(PREFIX_SPECIES).append(species.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (descriptor.getMedicalConditions().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            Set\u003cMedicalCondition\u003e medicalConditions \u003d descriptor.getMedicalConditions().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            if (medicalConditions.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                sb.append(PREFIX_MEDICAL_CONDITION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                medicalConditions.forEach(s -\u003e sb.append(PREFIX_MEDICAL_CONDITION)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                        .append(s.medicalConditionName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 2,
      "aizatazhar": 2,
      "-": 32,
      "lamlaaaam": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAnimalDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAnimalDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Species;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koonweee"
        },
        "content": "import seedu.address.model.feedtime.FeedTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.medicalcondition.MedicalCondition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * A utility class to help with building EditAnimalDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class EditAnimalDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private EditAnimalDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor \u003d new EditAnimalDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptorBuilder(EditAnimalDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.descriptor \u003d new EditAnimalDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns an {@code EditAnimalDescriptor} with fields containing {@code animal}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptorBuilder(Animal animal) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor \u003d new EditAnimalDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setName(animal.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setId(animal.getId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setSpecies(animal.getSpecies());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setMedicalConditions(animal.getMedicalConditions());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        descriptor.setFeedTimes(animal.getFeedTimes());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAnimalDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Sets the {@code Id} of the {@code EditAnimalDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptorBuilder withId(String id) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setId(new Id(id));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Sets the {@code Species} of the {@code EditAnimalDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptorBuilder withSpecies(String species) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setSpecies(new Species(species));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses the {@code medicalConditions} into a {@code Set\u003cMedicalCondition\u003e}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * and set it to the {@code EditAnimalDescriptor}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptorBuilder withMedicalConditions(String... medicalConditions) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Set\u003cMedicalCondition\u003e medicalConditionSet \u003d Stream.of(medicalConditions).map(MedicalCondition::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        descriptor.setMedicalConditions(medicalConditionSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * Parses the {@code feedTimes} into a {@code Set\u003cFeedTime\u003e}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * and set it to the {@code EditAnimalDescriptor}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koonweee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public EditAnimalDescriptorBuilder withFeedTimes(String... feedTimes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        Set\u003cFeedTime\u003e feedTimeSet \u003d Stream.of(feedTimes).map(FeedTime::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koonweee"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        descriptor.setFeedTimes(feedTimeSet);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koonweee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koonweee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public EditAnimalDescriptor build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 14,
      "lamlaaaam": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the middle index of the animal in the {@code model}\u0027s animal list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAnimalList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the last index of the animal in the {@code model}\u0027s animal list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAnimalList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the animal in the {@code model}\u0027s animal list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Animal getAnimal(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return model.getFilteredAnimalList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "lamlaaaam": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAnimals.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_ARCHIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BAILEY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_ARTHRITIS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_OBESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ARCHIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BAILEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_ARCHIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_BAILEY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * A utility class containing a list of {@code Animal} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class TypicalAnimals {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final Animal AHMENG \u003d new AnimalBuilder().withName(\"Ahmeng\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(\"Orangutan\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koonweee"
        },
        "content": "            .withId(\"123\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withMedicalConditions(\"Healthy\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal BUTTERCUP \u003d new AnimalBuilder().withName(\"Buttercup\").withId(\"456\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(\"Reticulated Python\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withMedicalConditions(\"Skin Infection\", \"Inclusion Body Disease\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withFeedTimes(\"1300\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal COCO \u003d new AnimalBuilder().withName(\"Coco\").withId(\"125\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(\"Chihuahua\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal ESTHER \u003d new AnimalBuilder().withName(\"Esther\").withId(\"126\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(\"Pig\").withMedicalConditions(\"Healthy\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal GRECIA \u003d new AnimalBuilder().withName(\"Grecia\").withId(\"134\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(\"Toucan\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal NEMO \u003d new AnimalBuilder().withName(\"Nemo\").withId(\"1212\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(\"Clownfish\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal PASHA \u003d new AnimalBuilder().withName(\"Pasha\").withId(\"1234\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(\"White Tiger\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal JIAJIA \u003d new AnimalBuilder().withName(\"JiaJia\").withId(\"111\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            .withSpecies(\"Giant Panda\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koonweee"
        },
        "content": "    public static final Animal KAIKAI \u003d new AnimalBuilder().withName(\"KaiKai\").withId(\"233\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            .withSpecies(\"Giant Panda\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    // Manually added - Animal\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final Animal ARCHIE \u003d new AnimalBuilder().withName(VALID_NAME_ARCHIE).withId(VALID_ID_ARCHIE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(VALID_SPECIES_ARCHIE).withMedicalConditions(VALID_MEDICAL_CONDITION_OBESE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static final Animal BAILEY \u003d new AnimalBuilder().withName(VALID_NAME_BAILEY).withId(VALID_ID_BAILEY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            .withSpecies(VALID_SPECIES_BAILEY).withMedicalConditions(VALID_MEDICAL_CONDITION_ARTHRITIS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    VALID_MEDICAL_CONDITION_OBESE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private TypicalAnimals() {} // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Returns an {@code ZooKeepBook} with all the typical animals."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public static ZooKeepBook getTypicalZooKeepBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        ZooKeepBook ab \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (Animal animal : getTypicalAnimals()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ab.addAnimal(animal);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static List\u003cAnimal\u003e getTypicalAnimals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AHMENG, BUTTERCUP, COCO, ESTHER, GRECIA, NEMO, PASHA));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koonweee": 9,
      "m0nggh": 25,
      "aizatazhar": 4,
      "-": 27,
      "lamlaaaam": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final Index INDEX_FIRST_ANIMAL \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final Index INDEX_SECOND_ANIMAL \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static final Index INDEX_THIRD_ANIMAL \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "lamlaaaam": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ZooKeepBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.ZooKeepBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "import seedu.address.model.animal.Animal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * A utility class to help with building ZooKeepBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunCheng98"
        },
        "content": " *     {@code ZooKeepBook ab \u003d new ZooKeepBookBuilder().withAnimal(harambe).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "public class ZooKeepBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    private ZooKeepBook zooKeepBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ZooKeepBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBook \u003d new ZooKeepBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ZooKeepBookBuilder(ZooKeepBook zooKeepBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        this.zooKeepBook \u003d zooKeepBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     * Adds a new {@code Animal} to the {@code ZooKeepBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ZooKeepBookBuilder withAnimal(Animal animal) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        zooKeepBook.addAnimal(animal);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    public ZooKeepBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "        return zooKeepBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aizatazhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunCheng98": 1,
      "aizatazhar": 33
    }
  }
]
